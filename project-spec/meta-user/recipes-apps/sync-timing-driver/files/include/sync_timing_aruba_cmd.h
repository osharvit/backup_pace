
/****************************************************************************************/
/**                  Copyright (c) 2018, 2021 Skyworks Solution Inc.                   **/
/****************************************************************************************/
/** This software is provided 'as-is', without any express or implied warranty.        **/
/** In no event will the authors be held liable for any damages arising from the use   **/
/** of this software.                                                                  **/
/** Permission is granted to anyone to use this software for any purpose, including    **/
/** commercial applications, and to alter it and redistribute it freely, subject to    **/
/** the following restrictions:                                                        **/
/** 1. The origin of this software must not be misrepresented; you must not claim that **/
/**    you wrote the original software. If you use this software in a product,         **/
/**    an acknowledgment in the product documentation would be appreciated but is not  **/
/**    required.                                                                       **/
/** 2. Altered source versions must be plainly marked as such, and must not be         **/
/**    misrepresented as being the original software.                                  **/
/** 3. This notice may not be removed or altered from any source distribution.         **/
/****************************************************************************************/

/*
 * THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT!
 */

#ifndef _SYNC_TIMING_ARUBA_CMD_H_
#define _SYNC_TIMING_ARUBA_CMD_H_


#define CMD_GET_FIELD(cmd,reg,fld,value) (((value)&CMD_##cmd##_ARG_##reg##_##fld##_MASK)>>(CMD_##cmd##_ARG_##reg##_##fld##_LSB))
#define REP_SET_FIELD(cmd,reg,fld,value) (((value)<<CMD_##cmd##_REPLY_##reg##_##fld##_LSB)&CMD_##cmd##_REPLY_##reg##_##fld##_MASK)
#define REP_GET_FIELD(cmd,reg,fld,value) (((value)&CMD_##cmd##_REPLY_##reg##_##fld##_MASK)>>(CMD_##cmd##_REPLY_##reg##_##fld##_LSB))
#define CMD_SET_FIELD(cmd,reg,fld,value) (((value)<<CMD_##cmd##_ARG_##reg##_##fld##_LSB)&CMD_##cmd##_ARG_##reg##_##fld##_MASK)

/* basic_cmds commands */

#define CMD_READ_REPLY 0x00
/* READ_REPLY ARGS */
/* READ_REPLY REPLY */
        /* macros for entire REPLY STATUS access of type uint8_t */
        #define CMD_READ_REPLY_REPLY_STATUS_TYPE uint8_t
        #define CMD_READ_REPLY_REPLY_STATUS_SIZE 8
        #define CMD_READ_REPLY_REPLY_STATUS_MASK 0xff
        #define CMD_READ_REPLY_REPLY_STATUS_MSB 7
        #define CMD_READ_REPLY_REPLY_STATUS_LSB 0
        #define CMD_READ_REPLY_REPLY_STATUS_INDEX 0
        #define CMD_READ_REPLY_REPLY_STATUS_var() ()
        #define CMD_READ_REPLY_REPLY_STATUS_value() ((uint8_t)CMD_READ_REPLY_REPLY_STATUS_var())
        #define CMD_READ_REPLY_REPLY_STATUS_write_u8(x) (CMD_READ_REPLY_REPLY_STATUS_var() = (x))
                /* macros for field CTS access */
                #define CMD_READ_REPLY_REPLY_STATUS_CTS_TYPE uint16_t
                #define CMD_READ_REPLY_REPLY_STATUS_CTS_SIZE 1
                #define CMD_READ_REPLY_REPLY_STATUS_CTS_INDEX 0
                #define CMD_READ_REPLY_REPLY_STATUS_CTS_PARAM_MSB 7
                #define CMD_READ_REPLY_REPLY_STATUS_CTS_PARAM_LSB 7
                #define CMD_READ_REPLY_REPLY_STATUS_CTS_MASK 0x80
                #define CMD_READ_REPLY_REPLY_STATUS_CTS_BYTE_MSB 7
                #define CMD_READ_REPLY_REPLY_STATUS_CTS_BYTE_LSB 7
                #define CMD_READ_REPLY_REPLY_STATUS_CTS_BIT 0x80
                #define CMD_READ_REPLY_REPLY_STATUS_CTS_TRUE_BIT 0x80
                #define CMD_READ_REPLY_REPLY_STATUS_CTS_FALSE_BIT 0x00
                #define CMD_READ_REPLY_REPLY_STATUS_CTS_write_bitfield(x) (CMD_READ_REPLY_REPLY_STATUS_var() = ((CMD_READ_REPLY_REPLY_STATUS_var() & ~0x80) | (((x) << 7) & 0x80)))
                #define CMD_READ_REPLY_REPLY_STATUS_CTS_ENUM_NOT_READY 0
                #define CMD_READ_REPLY_REPLY_STATUS_CTS_ENUM_READY 1

                /* macros for field HWERR access */
                #define CMD_READ_REPLY_REPLY_STATUS_HWERR_TYPE uint16_t
                #define CMD_READ_REPLY_REPLY_STATUS_HWERR_SIZE 1
                #define CMD_READ_REPLY_REPLY_STATUS_HWERR_INDEX 0
                #define CMD_READ_REPLY_REPLY_STATUS_HWERR_PARAM_MSB 6
                #define CMD_READ_REPLY_REPLY_STATUS_HWERR_PARAM_LSB 6
                #define CMD_READ_REPLY_REPLY_STATUS_HWERR_MASK 0x40
                #define CMD_READ_REPLY_REPLY_STATUS_HWERR_BYTE_MSB 6
                #define CMD_READ_REPLY_REPLY_STATUS_HWERR_BYTE_LSB 6
                #define CMD_READ_REPLY_REPLY_STATUS_HWERR_BIT 0x40
                #define CMD_READ_REPLY_REPLY_STATUS_HWERR_TRUE_BIT 0x40
                #define CMD_READ_REPLY_REPLY_STATUS_HWERR_FALSE_BIT 0x00
                #define CMD_READ_REPLY_REPLY_STATUS_HWERR_write_bitfield(x) (CMD_READ_REPLY_REPLY_STATUS_var() = ((CMD_READ_REPLY_REPLY_STATUS_var() & ~0x40) | (((x) << 6) & 0x40)))
                #define CMD_READ_REPLY_REPLY_STATUS_HWERR_ENUM_NORMAL 0
                #define CMD_READ_REPLY_REPLY_STATUS_HWERR_ENUM_ERROR 1

                /* macros for field APIERR access */
                #define CMD_READ_REPLY_REPLY_STATUS_APIERR_TYPE uint16_t
                #define CMD_READ_REPLY_REPLY_STATUS_APIERR_SIZE 1
                #define CMD_READ_REPLY_REPLY_STATUS_APIERR_INDEX 0
                #define CMD_READ_REPLY_REPLY_STATUS_APIERR_PARAM_MSB 5
                #define CMD_READ_REPLY_REPLY_STATUS_APIERR_PARAM_LSB 5
                #define CMD_READ_REPLY_REPLY_STATUS_APIERR_MASK 0x20
                #define CMD_READ_REPLY_REPLY_STATUS_APIERR_BYTE_MSB 5
                #define CMD_READ_REPLY_REPLY_STATUS_APIERR_BYTE_LSB 5
                #define CMD_READ_REPLY_REPLY_STATUS_APIERR_BIT 0x20
                #define CMD_READ_REPLY_REPLY_STATUS_APIERR_TRUE_BIT 0x20
                #define CMD_READ_REPLY_REPLY_STATUS_APIERR_FALSE_BIT 0x00
                #define CMD_READ_REPLY_REPLY_STATUS_APIERR_write_bitfield(x) (CMD_READ_REPLY_REPLY_STATUS_var() = ((CMD_READ_REPLY_REPLY_STATUS_var() & ~0x20) | (((x) << 5) & 0x20)))
                #define CMD_READ_REPLY_REPLY_STATUS_APIERR_ENUM_NORMAL 0
                #define CMD_READ_REPLY_REPLY_STATUS_APIERR_ENUM_ERROR 1

                /* macros for field FWERR access */
                #define CMD_READ_REPLY_REPLY_STATUS_FWERR_TYPE uint16_t
                #define CMD_READ_REPLY_REPLY_STATUS_FWERR_SIZE 1
                #define CMD_READ_REPLY_REPLY_STATUS_FWERR_INDEX 0
                #define CMD_READ_REPLY_REPLY_STATUS_FWERR_PARAM_MSB 4
                #define CMD_READ_REPLY_REPLY_STATUS_FWERR_PARAM_LSB 4
                #define CMD_READ_REPLY_REPLY_STATUS_FWERR_MASK 0x10
                #define CMD_READ_REPLY_REPLY_STATUS_FWERR_BYTE_MSB 4
                #define CMD_READ_REPLY_REPLY_STATUS_FWERR_BYTE_LSB 4
                #define CMD_READ_REPLY_REPLY_STATUS_FWERR_BIT 0x10
                #define CMD_READ_REPLY_REPLY_STATUS_FWERR_TRUE_BIT 0x10
                #define CMD_READ_REPLY_REPLY_STATUS_FWERR_FALSE_BIT 0x00
                #define CMD_READ_REPLY_REPLY_STATUS_FWERR_write_bitfield(x) (CMD_READ_REPLY_REPLY_STATUS_var() = ((CMD_READ_REPLY_REPLY_STATUS_var() & ~0x10) | (((x) << 4) & 0x10)))
                #define CMD_READ_REPLY_REPLY_STATUS_FWERR_ENUM_NORMAL 0
                #define CMD_READ_REPLY_REPLY_STATUS_FWERR_ENUM_ERROR 1

        /* macros for entire REPLY ERR access of type uint16_t */
        #define CMD_READ_REPLY_REPLY_ERR_TYPE uint16_t
        #define CMD_READ_REPLY_REPLY_ERR_SIZE 16
        #define CMD_READ_REPLY_REPLY_ERR_MASK 0xffff
        #define CMD_READ_REPLY_REPLY_ERR_MSB 15
        #define CMD_READ_REPLY_REPLY_ERR_LSB 0
        #define CMD_READ_REPLY_REPLY_ERR_INDEX 1
        #define CMD_READ_REPLY_REPLY_ERR_var() ()
        #define CMD_READ_REPLY_REPLY_ERR_value() ((uint16_t)CMD_READ_REPLY_REPLY_ERR_var())
        #define CMD_READ_REPLY_REPLY_ERR_write_u16(x) (CMD_READ_REPLY_REPLY_ERR_var() = (x))
                /* macros for field ERROR access */
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_TYPE uint16_t
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_SIZE 16
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_INDEX 1
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_PARAM_MSB 15
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_PARAM_LSB 0
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_MASK 0xffff
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_BYTE_MSB 15
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_BYTE_LSB 0
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_write_u16(x) (CMD_READ_REPLY_REPLY_ERR_var() = ((CMD_READ_REPLY_REPLY_ERR_var() & ~0xffff) | (((x)) & 0xffff)))
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_7_0_MASK 0xff
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_15_8_MASK 0xff
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_ENUM_NONE 0
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_ENUM_PARSER_ERR 1
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_ENUM_PARSER_ERR_CRC 769
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_ENUM_PARSER_ERR_REGIONCRC 1025
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_ENUM_PARSER_ERR_BADOPCODE 1281
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_ENUM_PARSER_ERR_MALFORMED 1537
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_ENUM_PARSER_ERR_UNTRUSTED 1793
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_ENUM_PARSER_ERR_ADDRERROR 2049
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_ENUM_PARSER_ERR_PROTECTED 2305
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_ENUM_BOOT_ERR 2
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_ENUM_BOOT_ERR_NOAPP 258
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_ENUM_BOOT_ERR_CRC_ERROR 770
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_ENUM_BOOT_ERR_REGIONCRC 1026
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_ENUM_BOOT_ERR_BADOPCODE 1282
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_ENUM_BOOT_ERR_MALFORMED 1538
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_ENUM_BOOT_ERR_UNTRUSTED 1794
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_ENUM_BOOT_ERR_ADDRERROR 2050
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_ENUM_BOOT_ERR_PROTECTED 2306
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_ENUM_BOOT_ERR_PARTNUM 16386
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_ENUM_BOOT_ERR_GRADE 32770
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_ENUM_CMD_ERR 3
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_ENUM_CMD_ERR_CRCMISMATCH 259
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_ENUM_CMD_ERR_UNRECOGNIZED 515
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_ENUM_CMD_ERR_UNREACHABLE 771
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_ENUM_CMD_ERR_BADARG 1027
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_ENUM_CMD_ERR_UNAVAILABLE 1283
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_ENUM_BURN_ERR 4
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_ENUM_BURN_ERR_RAM_FULL 260
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_ENUM_BURN_ERR_NVM_FULL 516
                #define CMD_READ_REPLY_REPLY_ERR_ERROR_ENUM_BURN_ERR_DIR_FULL 772

#define CMD_SIO_TEST 0x01
/* SIO_TEST ARGS */
        /* macros for entire ARG DATA_IN access of type uint8_t */
        #define CMD_SIO_TEST_ARG_DATA_IN_TYPE uint8_t
        #define CMD_SIO_TEST_ARG_DATA_IN_SIZE 8
        #define CMD_SIO_TEST_ARG_DATA_IN_MASK 0xff
        #define CMD_SIO_TEST_ARG_DATA_IN_MSB 7
        #define CMD_SIO_TEST_ARG_DATA_IN_LSB 0
        #define CMD_SIO_TEST_ARG_DATA_IN_INDEX 1
        #define CMD_SIO_TEST_ARG_DATA_IN_ARRAY_LEN 255
        #define CMD_SIO_TEST_ARG_DATA_IN_var(i) ([(i)])
        #define CMD_SIO_TEST_ARG_DATA_IN_value(i) ((uint8_t)CMD_SIO_TEST_ARG_DATA_IN_var(i))
                /* macros for field DATA_IN access */
                #define CMD_SIO_TEST_ARG_DATA_IN_DATA_IN_TYPE uint8_t
                #define CMD_SIO_TEST_ARG_DATA_IN_DATA_IN_SIZE 8
                #define CMD_SIO_TEST_ARG_DATA_IN_DATA_IN_INDEX 1
                #define CMD_SIO_TEST_ARG_DATA_IN_DATA_IN_PARAM_MSB 7
                #define CMD_SIO_TEST_ARG_DATA_IN_DATA_IN_PARAM_LSB 0
                #define CMD_SIO_TEST_ARG_DATA_IN_DATA_IN_MASK 0xff
                #define CMD_SIO_TEST_ARG_DATA_IN_DATA_IN_BYTE_MSB 7
                #define CMD_SIO_TEST_ARG_DATA_IN_DATA_IN_BYTE_LSB 0
                #define CMD_SIO_TEST_ARG_DATA_IN_DATA_IN_is_true(i) (CMD_SIO_TEST_ARG_DATA_IN_var(i))
                #define CMD_SIO_TEST_ARG_DATA_IN_DATA_IN_value(i) ((uint8_t)((CMD_SIO_TEST_ARG_DATA_IN_var(i))))

/* SIO_TEST REPLY */
        /* macros for entire REPLY CMD_ECHO access of type uint8_t */
        #define CMD_SIO_TEST_REPLY_CMD_ECHO_TYPE uint8_t
        #define CMD_SIO_TEST_REPLY_CMD_ECHO_SIZE 8
        #define CMD_SIO_TEST_REPLY_CMD_ECHO_MASK 0xff
        #define CMD_SIO_TEST_REPLY_CMD_ECHO_MSB 7
        #define CMD_SIO_TEST_REPLY_CMD_ECHO_LSB 0
        #define CMD_SIO_TEST_REPLY_CMD_ECHO_INDEX 1
        #define CMD_SIO_TEST_REPLY_CMD_ECHO_var() ()
        #define CMD_SIO_TEST_REPLY_CMD_ECHO_value() ((uint8_t)CMD_SIO_TEST_REPLY_CMD_ECHO_var())
        #define CMD_SIO_TEST_REPLY_CMD_ECHO_write_u8(x) (CMD_SIO_TEST_REPLY_CMD_ECHO_var() = (x))
                /* macros for field CMD_ECHO access */
                #define CMD_SIO_TEST_REPLY_CMD_ECHO_CMD_ECHO_TYPE uint8_t
                #define CMD_SIO_TEST_REPLY_CMD_ECHO_CMD_ECHO_SIZE 8
                #define CMD_SIO_TEST_REPLY_CMD_ECHO_CMD_ECHO_INDEX 1
                #define CMD_SIO_TEST_REPLY_CMD_ECHO_CMD_ECHO_PARAM_MSB 7
                #define CMD_SIO_TEST_REPLY_CMD_ECHO_CMD_ECHO_PARAM_LSB 0
                #define CMD_SIO_TEST_REPLY_CMD_ECHO_CMD_ECHO_MASK 0xff
                #define CMD_SIO_TEST_REPLY_CMD_ECHO_CMD_ECHO_BYTE_MSB 7
                #define CMD_SIO_TEST_REPLY_CMD_ECHO_CMD_ECHO_BYTE_LSB 0
                #define CMD_SIO_TEST_REPLY_CMD_ECHO_CMD_ECHO_write_u8(x) (CMD_SIO_TEST_REPLY_CMD_ECHO_var() = ((x)))

        /* macros for entire REPLY DATA_OUT access of type uint8_t */
        #define CMD_SIO_TEST_REPLY_DATA_OUT_TYPE uint8_t
        #define CMD_SIO_TEST_REPLY_DATA_OUT_SIZE 8
        #define CMD_SIO_TEST_REPLY_DATA_OUT_MASK 0xff
        #define CMD_SIO_TEST_REPLY_DATA_OUT_MSB 7
        #define CMD_SIO_TEST_REPLY_DATA_OUT_LSB 0
        #define CMD_SIO_TEST_REPLY_DATA_OUT_INDEX 2
        #define CMD_SIO_TEST_REPLY_DATA_OUT_ARRAY_LEN 255
        #define CMD_SIO_TEST_REPLY_DATA_OUT_var(i) ([(i)])
        #define CMD_SIO_TEST_REPLY_DATA_OUT_value(i) ((uint8_t)CMD_SIO_TEST_REPLY_DATA_OUT_var(i))
        #define CMD_SIO_TEST_REPLY_DATA_OUT_write_u8(i, x) (CMD_SIO_TEST_REPLY_DATA_OUT_var(i) = (x))
                /* macros for field DATA_OUT access */
                #define CMD_SIO_TEST_REPLY_DATA_OUT_DATA_OUT_TYPE uint8_t
                #define CMD_SIO_TEST_REPLY_DATA_OUT_DATA_OUT_SIZE 8
                #define CMD_SIO_TEST_REPLY_DATA_OUT_DATA_OUT_INDEX 2
                #define CMD_SIO_TEST_REPLY_DATA_OUT_DATA_OUT_PARAM_MSB 7
                #define CMD_SIO_TEST_REPLY_DATA_OUT_DATA_OUT_PARAM_LSB 0
                #define CMD_SIO_TEST_REPLY_DATA_OUT_DATA_OUT_MASK 0xff
                #define CMD_SIO_TEST_REPLY_DATA_OUT_DATA_OUT_BYTE_MSB 7
                #define CMD_SIO_TEST_REPLY_DATA_OUT_DATA_OUT_BYTE_LSB 0
                #define CMD_SIO_TEST_REPLY_DATA_OUT_DATA_OUT_write_u8(i, x) (CMD_SIO_TEST_REPLY_DATA_OUT_var(i) = ((x)))

#define CMD_SIO_INFO 0x02
/* SIO_INFO ARGS */
/* SIO_INFO REPLY */
        /* macros for entire REPLY CBS access of type uint16_t */
        #define CMD_SIO_INFO_REPLY_CBS_TYPE uint16_t
        #define CMD_SIO_INFO_REPLY_CBS_SIZE 16
        #define CMD_SIO_INFO_REPLY_CBS_MASK 0xffff
        #define CMD_SIO_INFO_REPLY_CBS_MSB 15
        #define CMD_SIO_INFO_REPLY_CBS_LSB 0
        #define CMD_SIO_INFO_REPLY_CBS_INDEX 1
        #define CMD_SIO_INFO_REPLY_CBS_var() ()
        #define CMD_SIO_INFO_REPLY_CBS_value() ((uint16_t)CMD_SIO_INFO_REPLY_CBS_var())
        #define CMD_SIO_INFO_REPLY_CBS_write_u16(x) (CMD_SIO_INFO_REPLY_CBS_var() = (x))
                /* macros for field CMD_BUFFER_SIZE access */
                #define CMD_SIO_INFO_REPLY_CBS_CMD_BUFFER_SIZE_TYPE uint16_t
                #define CMD_SIO_INFO_REPLY_CBS_CMD_BUFFER_SIZE_SIZE 16
                #define CMD_SIO_INFO_REPLY_CBS_CMD_BUFFER_SIZE_INDEX 1
                #define CMD_SIO_INFO_REPLY_CBS_CMD_BUFFER_SIZE_PARAM_MSB 15
                #define CMD_SIO_INFO_REPLY_CBS_CMD_BUFFER_SIZE_PARAM_LSB 0
                #define CMD_SIO_INFO_REPLY_CBS_CMD_BUFFER_SIZE_MASK 0xffff
                #define CMD_SIO_INFO_REPLY_CBS_CMD_BUFFER_SIZE_BYTE_MSB 15
                #define CMD_SIO_INFO_REPLY_CBS_CMD_BUFFER_SIZE_BYTE_LSB 0
                #define CMD_SIO_INFO_REPLY_CBS_CMD_BUFFER_SIZE_write_u16(x) (CMD_SIO_INFO_REPLY_CBS_var() = ((x)))
                #define CMD_SIO_INFO_REPLY_CBS_CMD_BUFFER_SIZE_7_0_MASK 0xff
                #define CMD_SIO_INFO_REPLY_CBS_CMD_BUFFER_SIZE_15_8_MASK 0xff

        /* macros for entire REPLY RBS access of type uint16_t */
        #define CMD_SIO_INFO_REPLY_RBS_TYPE uint16_t
        #define CMD_SIO_INFO_REPLY_RBS_SIZE 16
        #define CMD_SIO_INFO_REPLY_RBS_MASK 0xffff
        #define CMD_SIO_INFO_REPLY_RBS_MSB 15
        #define CMD_SIO_INFO_REPLY_RBS_LSB 0
        #define CMD_SIO_INFO_REPLY_RBS_INDEX 3
        #define CMD_SIO_INFO_REPLY_RBS_var() ()
        #define CMD_SIO_INFO_REPLY_RBS_value() ((uint16_t)CMD_SIO_INFO_REPLY_RBS_var())
        #define CMD_SIO_INFO_REPLY_RBS_write_u16(x) (CMD_SIO_INFO_REPLY_RBS_var() = (x))
                /* macros for field REPLY_BUFFER_SIZE access */
                #define CMD_SIO_INFO_REPLY_RBS_REPLY_BUFFER_SIZE_TYPE uint16_t
                #define CMD_SIO_INFO_REPLY_RBS_REPLY_BUFFER_SIZE_SIZE 16
                #define CMD_SIO_INFO_REPLY_RBS_REPLY_BUFFER_SIZE_INDEX 3
                #define CMD_SIO_INFO_REPLY_RBS_REPLY_BUFFER_SIZE_PARAM_MSB 15
                #define CMD_SIO_INFO_REPLY_RBS_REPLY_BUFFER_SIZE_PARAM_LSB 0
                #define CMD_SIO_INFO_REPLY_RBS_REPLY_BUFFER_SIZE_MASK 0xffff
                #define CMD_SIO_INFO_REPLY_RBS_REPLY_BUFFER_SIZE_BYTE_MSB 15
                #define CMD_SIO_INFO_REPLY_RBS_REPLY_BUFFER_SIZE_BYTE_LSB 0
                #define CMD_SIO_INFO_REPLY_RBS_REPLY_BUFFER_SIZE_write_u16(x) (CMD_SIO_INFO_REPLY_RBS_var() = ((x)))
                #define CMD_SIO_INFO_REPLY_RBS_REPLY_BUFFER_SIZE_7_0_MASK 0xff
                #define CMD_SIO_INFO_REPLY_RBS_REPLY_BUFFER_SIZE_15_8_MASK 0xff

/* bootloader_cmds commands */

#define CMD_APPS_AVAILABLE 0x03
/* APPS_AVAILABLE ARGS */
/* APPS_AVAILABLE REPLY */
        /* macros for entire REPLY CNT access of type uint8_t */
        #define CMD_APPS_AVAILABLE_REPLY_CNT_TYPE uint8_t
        #define CMD_APPS_AVAILABLE_REPLY_CNT_SIZE 8
        #define CMD_APPS_AVAILABLE_REPLY_CNT_MASK 0xff
        #define CMD_APPS_AVAILABLE_REPLY_CNT_MSB 7
        #define CMD_APPS_AVAILABLE_REPLY_CNT_LSB 0
        #define CMD_APPS_AVAILABLE_REPLY_CNT_INDEX 1
        #define CMD_APPS_AVAILABLE_REPLY_CNT_var() ()
        #define CMD_APPS_AVAILABLE_REPLY_CNT_value() ((uint8_t)CMD_APPS_AVAILABLE_REPLY_CNT_var())
        #define CMD_APPS_AVAILABLE_REPLY_CNT_write_u8(x) (CMD_APPS_AVAILABLE_REPLY_CNT_var() = (x))
                /* macros for field COUNT access */
                #define CMD_APPS_AVAILABLE_REPLY_CNT_COUNT_TYPE uint8_t
                #define CMD_APPS_AVAILABLE_REPLY_CNT_COUNT_SIZE 8
                #define CMD_APPS_AVAILABLE_REPLY_CNT_COUNT_INDEX 1
                #define CMD_APPS_AVAILABLE_REPLY_CNT_COUNT_PARAM_MSB 7
                #define CMD_APPS_AVAILABLE_REPLY_CNT_COUNT_PARAM_LSB 0
                #define CMD_APPS_AVAILABLE_REPLY_CNT_COUNT_MASK 0xff
                #define CMD_APPS_AVAILABLE_REPLY_CNT_COUNT_BYTE_MSB 7
                #define CMD_APPS_AVAILABLE_REPLY_CNT_COUNT_BYTE_LSB 0
                #define CMD_APPS_AVAILABLE_REPLY_CNT_COUNT_write_u8(x) (CMD_APPS_AVAILABLE_REPLY_CNT_var() = ((x)))

        /* macros for entire REPLY APP access of type uint8_t */
        #define CMD_APPS_AVAILABLE_REPLY_APP_TYPE uint8_t
        #define CMD_APPS_AVAILABLE_REPLY_APP_SIZE 8
        #define CMD_APPS_AVAILABLE_REPLY_APP_MASK 0xff
        #define CMD_APPS_AVAILABLE_REPLY_APP_MSB 7
        #define CMD_APPS_AVAILABLE_REPLY_APP_LSB 0
        #define CMD_APPS_AVAILABLE_REPLY_APP_INDEX 2
        #define CMD_APPS_AVAILABLE_REPLY_APP_ARRAY_LEN 8
        #define CMD_APPS_AVAILABLE_REPLY_APP_var(i) ([(i)])
        #define CMD_APPS_AVAILABLE_REPLY_APP_value(i) ((uint8_t)CMD_APPS_AVAILABLE_REPLY_APP_var(i))
        #define CMD_APPS_AVAILABLE_REPLY_APP_write_u8(i, x) (CMD_APPS_AVAILABLE_REPLY_APP_var(i) = (x))
                /* macros for field APP_SIG access */
                #define CMD_APPS_AVAILABLE_REPLY_APP_APP_SIG_TYPE uint8_t
                #define CMD_APPS_AVAILABLE_REPLY_APP_APP_SIG_SIZE 8
                #define CMD_APPS_AVAILABLE_REPLY_APP_APP_SIG_INDEX 2
                #define CMD_APPS_AVAILABLE_REPLY_APP_APP_SIG_PARAM_MSB 7
                #define CMD_APPS_AVAILABLE_REPLY_APP_APP_SIG_PARAM_LSB 0
                #define CMD_APPS_AVAILABLE_REPLY_APP_APP_SIG_MASK 0xff
                #define CMD_APPS_AVAILABLE_REPLY_APP_APP_SIG_BYTE_MSB 7
                #define CMD_APPS_AVAILABLE_REPLY_APP_APP_SIG_BYTE_LSB 0
                #define CMD_APPS_AVAILABLE_REPLY_APP_APP_SIG_write_u8(i, x) (CMD_APPS_AVAILABLE_REPLY_APP_var(i) = ((x)))

#define CMD_APP_SELECT 0x04
/* APP_SELECT ARGS */
        /* macros for entire ARG APP access of type uint8_t */
        #define CMD_APP_SELECT_ARG_APP_TYPE uint8_t
        #define CMD_APP_SELECT_ARG_APP_SIZE 8
        #define CMD_APP_SELECT_ARG_APP_MASK 0xff
        #define CMD_APP_SELECT_ARG_APP_MSB 7
        #define CMD_APP_SELECT_ARG_APP_LSB 0
        #define CMD_APP_SELECT_ARG_APP_INDEX 1
        #define CMD_APP_SELECT_ARG_APP_var() ()
        #define CMD_APP_SELECT_ARG_APP_value() ((uint8_t)CMD_APP_SELECT_ARG_APP_var())
                /* macros for field APP_SIG access */
                #define CMD_APP_SELECT_ARG_APP_APP_SIG_TYPE uint8_t
                #define CMD_APP_SELECT_ARG_APP_APP_SIG_SIZE 8
                #define CMD_APP_SELECT_ARG_APP_APP_SIG_INDEX 1
                #define CMD_APP_SELECT_ARG_APP_APP_SIG_PARAM_MSB 7
                #define CMD_APP_SELECT_ARG_APP_APP_SIG_PARAM_LSB 0
                #define CMD_APP_SELECT_ARG_APP_APP_SIG_MASK 0xff
                #define CMD_APP_SELECT_ARG_APP_APP_SIG_BYTE_MSB 7
                #define CMD_APP_SELECT_ARG_APP_APP_SIG_BYTE_LSB 0
                #define CMD_APP_SELECT_ARG_APP_APP_SIG_is_true() (CMD_APP_SELECT_ARG_APP_var())
                #define CMD_APP_SELECT_ARG_APP_APP_SIG_value() ((uint8_t)((CMD_APP_SELECT_ARG_APP_var())))

/* APP_SELECT REPLY */
#define CMD_HOST_LOAD 0x05
/* HOST_LOAD ARGS */
        /* macros for entire ARG DATA access of type uint8_t */
        #define CMD_HOST_LOAD_ARG_DATA_TYPE uint8_t
        #define CMD_HOST_LOAD_ARG_DATA_SIZE 8
        #define CMD_HOST_LOAD_ARG_DATA_MASK 0xff
        #define CMD_HOST_LOAD_ARG_DATA_MSB 7
        #define CMD_HOST_LOAD_ARG_DATA_LSB 0
        #define CMD_HOST_LOAD_ARG_DATA_INDEX 1
        #define CMD_HOST_LOAD_ARG_DATA_ARRAY_LEN 1024
        #define CMD_HOST_LOAD_ARG_DATA_var(i) ([(i)])
        #define CMD_HOST_LOAD_ARG_DATA_value(i) ((uint8_t)CMD_HOST_LOAD_ARG_DATA_var(i))
                /* macros for field DATA access */
                #define CMD_HOST_LOAD_ARG_DATA_DATA_TYPE uint8_t
                #define CMD_HOST_LOAD_ARG_DATA_DATA_SIZE 8
                #define CMD_HOST_LOAD_ARG_DATA_DATA_INDEX 1
                #define CMD_HOST_LOAD_ARG_DATA_DATA_PARAM_MSB 7
                #define CMD_HOST_LOAD_ARG_DATA_DATA_PARAM_LSB 0
                #define CMD_HOST_LOAD_ARG_DATA_DATA_MASK 0xff
                #define CMD_HOST_LOAD_ARG_DATA_DATA_BYTE_MSB 7
                #define CMD_HOST_LOAD_ARG_DATA_DATA_BYTE_LSB 0
                #define CMD_HOST_LOAD_ARG_DATA_DATA_is_true(i) (CMD_HOST_LOAD_ARG_DATA_var(i))
                #define CMD_HOST_LOAD_ARG_DATA_DATA_value(i) ((uint8_t)((CMD_HOST_LOAD_ARG_DATA_var(i))))

/* HOST_LOAD REPLY */
#define CMD_BOOT 0x07
/* BOOT ARGS */
/* BOOT REPLY */
#define CMD_DEVICE_INFO 0x08
/* DEVICE_INFO ARGS */
/* DEVICE_INFO REPLY */
        /* macros for entire REPLY PN access of type uint16_t */
        #define CMD_DEVICE_INFO_REPLY_PN_TYPE uint16_t
        #define CMD_DEVICE_INFO_REPLY_PN_SIZE 16
        #define CMD_DEVICE_INFO_REPLY_PN_MASK 0xffff
        #define CMD_DEVICE_INFO_REPLY_PN_MSB 15
        #define CMD_DEVICE_INFO_REPLY_PN_LSB 0
        #define CMD_DEVICE_INFO_REPLY_PN_INDEX 1
        #define CMD_DEVICE_INFO_REPLY_PN_var() ()
        #define CMD_DEVICE_INFO_REPLY_PN_value() ((uint16_t)CMD_DEVICE_INFO_REPLY_PN_var())
        #define CMD_DEVICE_INFO_REPLY_PN_write_u16(x) (CMD_DEVICE_INFO_REPLY_PN_var() = (x))
                /* macros for field PART_NUMBER access */
                #define CMD_DEVICE_INFO_REPLY_PN_PART_NUMBER_TYPE uint16_t
                #define CMD_DEVICE_INFO_REPLY_PN_PART_NUMBER_SIZE 16
                #define CMD_DEVICE_INFO_REPLY_PN_PART_NUMBER_INDEX 1
                #define CMD_DEVICE_INFO_REPLY_PN_PART_NUMBER_PARAM_MSB 15
                #define CMD_DEVICE_INFO_REPLY_PN_PART_NUMBER_PARAM_LSB 0
                #define CMD_DEVICE_INFO_REPLY_PN_PART_NUMBER_MASK 0xffff
                #define CMD_DEVICE_INFO_REPLY_PN_PART_NUMBER_BYTE_MSB 15
                #define CMD_DEVICE_INFO_REPLY_PN_PART_NUMBER_BYTE_LSB 0
                #define CMD_DEVICE_INFO_REPLY_PN_PART_NUMBER_write_u16(x) (CMD_DEVICE_INFO_REPLY_PN_var() = ((x)))
                #define CMD_DEVICE_INFO_REPLY_PN_PART_NUMBER_7_0_MASK 0xff
                #define CMD_DEVICE_INFO_REPLY_PN_PART_NUMBER_15_8_MASK 0xff

        /* macros for entire REPLY DG access of type uint8_t */
        #define CMD_DEVICE_INFO_REPLY_DG_TYPE uint8_t
        #define CMD_DEVICE_INFO_REPLY_DG_SIZE 8
        #define CMD_DEVICE_INFO_REPLY_DG_MASK 0xff
        #define CMD_DEVICE_INFO_REPLY_DG_MSB 7
        #define CMD_DEVICE_INFO_REPLY_DG_LSB 0
        #define CMD_DEVICE_INFO_REPLY_DG_INDEX 3
        #define CMD_DEVICE_INFO_REPLY_DG_var() ()
        #define CMD_DEVICE_INFO_REPLY_DG_value() ((uint8_t)CMD_DEVICE_INFO_REPLY_DG_var())
        #define CMD_DEVICE_INFO_REPLY_DG_write_u8(x) (CMD_DEVICE_INFO_REPLY_DG_var() = (x))
                /* macros for field DEVICE_GRADE access */
                #define CMD_DEVICE_INFO_REPLY_DG_DEVICE_GRADE_TYPE uint8_t
                #define CMD_DEVICE_INFO_REPLY_DG_DEVICE_GRADE_SIZE 8
                #define CMD_DEVICE_INFO_REPLY_DG_DEVICE_GRADE_INDEX 3
                #define CMD_DEVICE_INFO_REPLY_DG_DEVICE_GRADE_PARAM_MSB 7
                #define CMD_DEVICE_INFO_REPLY_DG_DEVICE_GRADE_PARAM_LSB 0
                #define CMD_DEVICE_INFO_REPLY_DG_DEVICE_GRADE_MASK 0xff
                #define CMD_DEVICE_INFO_REPLY_DG_DEVICE_GRADE_BYTE_MSB 7
                #define CMD_DEVICE_INFO_REPLY_DG_DEVICE_GRADE_BYTE_LSB 0
                #define CMD_DEVICE_INFO_REPLY_DG_DEVICE_GRADE_write_u8(x) (CMD_DEVICE_INFO_REPLY_DG_var() = ((CMD_DEVICE_INFO_REPLY_DG_var() & ~0xff) | (((x)) & 0xff)))

        /* macros for entire REPLY REV access of type uint8_t */
        #define CMD_DEVICE_INFO_REPLY_REV_TYPE uint8_t
        #define CMD_DEVICE_INFO_REPLY_REV_SIZE 8
        #define CMD_DEVICE_INFO_REPLY_REV_MASK 0xff
        #define CMD_DEVICE_INFO_REPLY_REV_MSB 7
        #define CMD_DEVICE_INFO_REPLY_REV_LSB 0
        #define CMD_DEVICE_INFO_REPLY_REV_INDEX 4
        #define CMD_DEVICE_INFO_REPLY_REV_var() ()
        #define CMD_DEVICE_INFO_REPLY_REV_value() ((uint8_t)CMD_DEVICE_INFO_REPLY_REV_var())
        #define CMD_DEVICE_INFO_REPLY_REV_write_u8(x) (CMD_DEVICE_INFO_REPLY_REV_var() = (x))
                /* macros for field DEVICE_REV access */
                #define CMD_DEVICE_INFO_REPLY_REV_DEVICE_REV_TYPE uint8_t
                #define CMD_DEVICE_INFO_REPLY_REV_DEVICE_REV_SIZE 8
                #define CMD_DEVICE_INFO_REPLY_REV_DEVICE_REV_INDEX 4
                #define CMD_DEVICE_INFO_REPLY_REV_DEVICE_REV_PARAM_MSB 7
                #define CMD_DEVICE_INFO_REPLY_REV_DEVICE_REV_PARAM_LSB 0
                #define CMD_DEVICE_INFO_REPLY_REV_DEVICE_REV_MASK 0xff
                #define CMD_DEVICE_INFO_REPLY_REV_DEVICE_REV_BYTE_MSB 7
                #define CMD_DEVICE_INFO_REPLY_REV_DEVICE_REV_BYTE_LSB 0
                #define CMD_DEVICE_INFO_REPLY_REV_DEVICE_REV_write_u8(x) (CMD_DEVICE_INFO_REPLY_REV_var() = ((CMD_DEVICE_INFO_REPLY_REV_var() & ~0xff) | (((x)) & 0xff)))

        /* macros for entire REPLY OPNID access of type uint32_t */
        #define CMD_DEVICE_INFO_REPLY_OPNID_TYPE uint32_t
        #define CMD_DEVICE_INFO_REPLY_OPNID_SIZE 32
        #define CMD_DEVICE_INFO_REPLY_OPNID_MASK 0xffffffff
        #define CMD_DEVICE_INFO_REPLY_OPNID_MSB 31
        #define CMD_DEVICE_INFO_REPLY_OPNID_LSB 0
        #define CMD_DEVICE_INFO_REPLY_OPNID_INDEX 5
        #define CMD_DEVICE_INFO_REPLY_OPNID_var() ()
        #define CMD_DEVICE_INFO_REPLY_OPNID_value() ((uint32_t)CMD_DEVICE_INFO_REPLY_OPNID_var())
        #define CMD_DEVICE_INFO_REPLY_OPNID_write_u32(x) (CMD_DEVICE_INFO_REPLY_OPNID_var() = (x))
                /* macros for field OPNID access */
                #define CMD_DEVICE_INFO_REPLY_OPNID_OPNID_TYPE uint32_t
                #define CMD_DEVICE_INFO_REPLY_OPNID_OPNID_SIZE 32
                #define CMD_DEVICE_INFO_REPLY_OPNID_OPNID_INDEX 5
                #define CMD_DEVICE_INFO_REPLY_OPNID_OPNID_PARAM_MSB 31
                #define CMD_DEVICE_INFO_REPLY_OPNID_OPNID_PARAM_LSB 0
                #define CMD_DEVICE_INFO_REPLY_OPNID_OPNID_MASK 0xffffffff
                #define CMD_DEVICE_INFO_REPLY_OPNID_OPNID_BYTE_MSB 31
                #define CMD_DEVICE_INFO_REPLY_OPNID_OPNID_BYTE_LSB 0
                #define CMD_DEVICE_INFO_REPLY_OPNID_OPNID_write_u32(x) (CMD_DEVICE_INFO_REPLY_OPNID_var() = ((x)))
                #define CMD_DEVICE_INFO_REPLY_OPNID_OPNID_7_0_MASK 0xff
                #define CMD_DEVICE_INFO_REPLY_OPNID_OPNID_15_8_MASK 0xff
                #define CMD_DEVICE_INFO_REPLY_OPNID_OPNID_23_16_MASK 0xff
                #define CMD_DEVICE_INFO_REPLY_OPNID_OPNID_31_24_MASK 0xff

        /* macros for entire REPLY OPNREV access of type uint8_t */
        #define CMD_DEVICE_INFO_REPLY_OPNREV_TYPE uint8_t
        #define CMD_DEVICE_INFO_REPLY_OPNREV_SIZE 8
        #define CMD_DEVICE_INFO_REPLY_OPNREV_MASK 0xff
        #define CMD_DEVICE_INFO_REPLY_OPNREV_MSB 7
        #define CMD_DEVICE_INFO_REPLY_OPNREV_LSB 0
        #define CMD_DEVICE_INFO_REPLY_OPNREV_INDEX 9
        #define CMD_DEVICE_INFO_REPLY_OPNREV_var() ()
        #define CMD_DEVICE_INFO_REPLY_OPNREV_value() ((uint8_t)CMD_DEVICE_INFO_REPLY_OPNREV_var())
        #define CMD_DEVICE_INFO_REPLY_OPNREV_write_u8(x) (CMD_DEVICE_INFO_REPLY_OPNREV_var() = (x))
                /* macros for field OPN_REVISION access */
                #define CMD_DEVICE_INFO_REPLY_OPNREV_OPN_REVISION_TYPE uint8_t
                #define CMD_DEVICE_INFO_REPLY_OPNREV_OPN_REVISION_SIZE 8
                #define CMD_DEVICE_INFO_REPLY_OPNREV_OPN_REVISION_INDEX 9
                #define CMD_DEVICE_INFO_REPLY_OPNREV_OPN_REVISION_PARAM_MSB 7
                #define CMD_DEVICE_INFO_REPLY_OPNREV_OPN_REVISION_PARAM_LSB 0
                #define CMD_DEVICE_INFO_REPLY_OPNREV_OPN_REVISION_MASK 0xff
                #define CMD_DEVICE_INFO_REPLY_OPNREV_OPN_REVISION_BYTE_MSB 7
                #define CMD_DEVICE_INFO_REPLY_OPNREV_OPN_REVISION_BYTE_LSB 0
                #define CMD_DEVICE_INFO_REPLY_OPNREV_OPN_REVISION_write_u8(x) (CMD_DEVICE_INFO_REPLY_OPNREV_var() = ((x)))

        /* macros for entire REPLY TG access of type uint8_t */
        #define CMD_DEVICE_INFO_REPLY_TG_TYPE uint8_t
        #define CMD_DEVICE_INFO_REPLY_TG_SIZE 8
        #define CMD_DEVICE_INFO_REPLY_TG_MASK 0xff
        #define CMD_DEVICE_INFO_REPLY_TG_MSB 7
        #define CMD_DEVICE_INFO_REPLY_TG_LSB 0
        #define CMD_DEVICE_INFO_REPLY_TG_INDEX 10
        #define CMD_DEVICE_INFO_REPLY_TG_var() ()
        #define CMD_DEVICE_INFO_REPLY_TG_value() ((uint8_t)CMD_DEVICE_INFO_REPLY_TG_var())
        #define CMD_DEVICE_INFO_REPLY_TG_write_u8(x) (CMD_DEVICE_INFO_REPLY_TG_var() = (x))
                /* macros for field TEMP_GRADE access */
                #define CMD_DEVICE_INFO_REPLY_TG_TEMP_GRADE_TYPE uint16_t
                #define CMD_DEVICE_INFO_REPLY_TG_TEMP_GRADE_SIZE 8
                #define CMD_DEVICE_INFO_REPLY_TG_TEMP_GRADE_INDEX 10
                #define CMD_DEVICE_INFO_REPLY_TG_TEMP_GRADE_PARAM_MSB 7
                #define CMD_DEVICE_INFO_REPLY_TG_TEMP_GRADE_PARAM_LSB 0
                #define CMD_DEVICE_INFO_REPLY_TG_TEMP_GRADE_MASK 0xff
                #define CMD_DEVICE_INFO_REPLY_TG_TEMP_GRADE_BYTE_MSB 7
                #define CMD_DEVICE_INFO_REPLY_TG_TEMP_GRADE_BYTE_LSB 0
                #define CMD_DEVICE_INFO_REPLY_TG_TEMP_GRADE_write_u8(x) (CMD_DEVICE_INFO_REPLY_TG_var() = ((CMD_DEVICE_INFO_REPLY_TG_var() & ~0xff) | (((x)) & 0xff)))
                #define CMD_DEVICE_INFO_REPLY_TG_TEMP_GRADE_ENUM_G 0
                #define CMD_DEVICE_INFO_REPLY_TG_TEMP_GRADE_ENUM_N 1

        /* macros for entire REPLY PKG access of type uint8_t */
        #define CMD_DEVICE_INFO_REPLY_PKG_TYPE uint8_t
        #define CMD_DEVICE_INFO_REPLY_PKG_SIZE 8
        #define CMD_DEVICE_INFO_REPLY_PKG_MASK 0xff
        #define CMD_DEVICE_INFO_REPLY_PKG_MSB 7
        #define CMD_DEVICE_INFO_REPLY_PKG_LSB 0
        #define CMD_DEVICE_INFO_REPLY_PKG_INDEX 11
        #define CMD_DEVICE_INFO_REPLY_PKG_var() ()
        #define CMD_DEVICE_INFO_REPLY_PKG_value() ((uint8_t)CMD_DEVICE_INFO_REPLY_PKG_var())
        #define CMD_DEVICE_INFO_REPLY_PKG_write_u8(x) (CMD_DEVICE_INFO_REPLY_PKG_var() = (x))
                /* macros for field PACKAGE access */
                #define CMD_DEVICE_INFO_REPLY_PKG_PACKAGE_TYPE uint16_t
                #define CMD_DEVICE_INFO_REPLY_PKG_PACKAGE_SIZE 8
                #define CMD_DEVICE_INFO_REPLY_PKG_PACKAGE_INDEX 11
                #define CMD_DEVICE_INFO_REPLY_PKG_PACKAGE_PARAM_MSB 7
                #define CMD_DEVICE_INFO_REPLY_PKG_PACKAGE_PARAM_LSB 0
                #define CMD_DEVICE_INFO_REPLY_PKG_PACKAGE_MASK 0xff
                #define CMD_DEVICE_INFO_REPLY_PKG_PACKAGE_BYTE_MSB 7
                #define CMD_DEVICE_INFO_REPLY_PKG_PACKAGE_BYTE_LSB 0
                #define CMD_DEVICE_INFO_REPLY_PKG_PACKAGE_write_u8(x) (CMD_DEVICE_INFO_REPLY_PKG_var() = ((CMD_DEVICE_INFO_REPLY_PKG_var() & ~0xff) | (((x)) & 0xff)))
                #define CMD_DEVICE_INFO_REPLY_PKG_PACKAGE_ENUM_QFN120 0
                #define CMD_DEVICE_INFO_REPLY_PKG_PACKAGE_ENUM_QFN72 1
                #define CMD_DEVICE_INFO_REPLY_PKG_PACKAGE_ENUM_QFN64 2

        /* macros for entire REPLY MISC access of type uint8_t */
        #define CMD_DEVICE_INFO_REPLY_MISC_TYPE uint8_t
        #define CMD_DEVICE_INFO_REPLY_MISC_SIZE 8
        #define CMD_DEVICE_INFO_REPLY_MISC_MASK 0xff
        #define CMD_DEVICE_INFO_REPLY_MISC_MSB 7
        #define CMD_DEVICE_INFO_REPLY_MISC_LSB 0
        #define CMD_DEVICE_INFO_REPLY_MISC_INDEX 12
        #define CMD_DEVICE_INFO_REPLY_MISC_var() ()
        #define CMD_DEVICE_INFO_REPLY_MISC_value() ((uint8_t)CMD_DEVICE_INFO_REPLY_MISC_var())
        #define CMD_DEVICE_INFO_REPLY_MISC_write_u8(x) (CMD_DEVICE_INFO_REPLY_MISC_var() = (x))
                /* macros for field ACCUTIME access */
                #define CMD_DEVICE_INFO_REPLY_MISC_ACCUTIME_TYPE uint16_t
                #define CMD_DEVICE_INFO_REPLY_MISC_ACCUTIME_SIZE 2
                #define CMD_DEVICE_INFO_REPLY_MISC_ACCUTIME_INDEX 12
                #define CMD_DEVICE_INFO_REPLY_MISC_ACCUTIME_PARAM_MSB 2
                #define CMD_DEVICE_INFO_REPLY_MISC_ACCUTIME_PARAM_LSB 1
                #define CMD_DEVICE_INFO_REPLY_MISC_ACCUTIME_MASK 0x06
                #define CMD_DEVICE_INFO_REPLY_MISC_ACCUTIME_BYTE_MSB 2
                #define CMD_DEVICE_INFO_REPLY_MISC_ACCUTIME_BYTE_LSB 1
                #define CMD_DEVICE_INFO_REPLY_MISC_ACCUTIME_write_bitfield(x) (CMD_DEVICE_INFO_REPLY_MISC_var() = ((CMD_DEVICE_INFO_REPLY_MISC_var() & ~0x06) | (((x) << 1) & 0x06)))
                #define CMD_DEVICE_INFO_REPLY_MISC_ACCUTIME_ENUM_NOT_SUPPORTED 0
                #define CMD_DEVICE_INFO_REPLY_MISC_ACCUTIME_ENUM_SERVO_ONLY 1
                #define CMD_DEVICE_INFO_REPLY_MISC_ACCUTIME_ENUM_FULL_SUPPORT 2

                /* macros for field CEVB access */
                #define CMD_DEVICE_INFO_REPLY_MISC_CEVB_TYPE uint16_t
                #define CMD_DEVICE_INFO_REPLY_MISC_CEVB_SIZE 1
                #define CMD_DEVICE_INFO_REPLY_MISC_CEVB_INDEX 12
                #define CMD_DEVICE_INFO_REPLY_MISC_CEVB_PARAM_MSB 0
                #define CMD_DEVICE_INFO_REPLY_MISC_CEVB_PARAM_LSB 0
                #define CMD_DEVICE_INFO_REPLY_MISC_CEVB_MASK 0x01
                #define CMD_DEVICE_INFO_REPLY_MISC_CEVB_BYTE_MSB 0
                #define CMD_DEVICE_INFO_REPLY_MISC_CEVB_BYTE_LSB 0
                #define CMD_DEVICE_INFO_REPLY_MISC_CEVB_BIT 0x01
                #define CMD_DEVICE_INFO_REPLY_MISC_CEVB_TRUE_BIT 0x01
                #define CMD_DEVICE_INFO_REPLY_MISC_CEVB_FALSE_BIT 0x00
                #define CMD_DEVICE_INFO_REPLY_MISC_CEVB_write_bitfield(x) (CMD_DEVICE_INFO_REPLY_MISC_var() = ((CMD_DEVICE_INFO_REPLY_MISC_var() & ~0x01) | (((x)) & 0x01)))
                #define CMD_DEVICE_INFO_REPLY_MISC_CEVB_ENUM_LOCKED 0
                #define CMD_DEVICE_INFO_REPLY_MISC_CEVB_ENUM_UNLOCKED 1

        /* macros for entire REPLY ROM access of type uint8_t */
        #define CMD_DEVICE_INFO_REPLY_ROM_TYPE uint8_t
        #define CMD_DEVICE_INFO_REPLY_ROM_SIZE 8
        #define CMD_DEVICE_INFO_REPLY_ROM_MASK 0xff
        #define CMD_DEVICE_INFO_REPLY_ROM_MSB 7
        #define CMD_DEVICE_INFO_REPLY_ROM_LSB 0
        #define CMD_DEVICE_INFO_REPLY_ROM_INDEX 13
        #define CMD_DEVICE_INFO_REPLY_ROM_var() ()
        #define CMD_DEVICE_INFO_REPLY_ROM_value() ((uint8_t)CMD_DEVICE_INFO_REPLY_ROM_var())
        #define CMD_DEVICE_INFO_REPLY_ROM_write_u8(x) (CMD_DEVICE_INFO_REPLY_ROM_var() = (x))
                /* macros for field ROMREV access */
                #define CMD_DEVICE_INFO_REPLY_ROM_ROMREV_TYPE uint8_t
                #define CMD_DEVICE_INFO_REPLY_ROM_ROMREV_SIZE 8
                #define CMD_DEVICE_INFO_REPLY_ROM_ROMREV_INDEX 13
                #define CMD_DEVICE_INFO_REPLY_ROM_ROMREV_MIN 0x0
                #define CMD_DEVICE_INFO_REPLY_ROM_ROMREV_MAX 0xff
                #define CMD_DEVICE_INFO_REPLY_ROM_ROMREV_PARAM_MSB 7
                #define CMD_DEVICE_INFO_REPLY_ROM_ROMREV_PARAM_LSB 0
                #define CMD_DEVICE_INFO_REPLY_ROM_ROMREV_MASK 0xff
                #define CMD_DEVICE_INFO_REPLY_ROM_ROMREV_BYTE_MSB 7
                #define CMD_DEVICE_INFO_REPLY_ROM_ROMREV_BYTE_LSB 0
                #define CMD_DEVICE_INFO_REPLY_ROM_ROMREV_write_u8(x) (CMD_DEVICE_INFO_REPLY_ROM_var() = ((x)))

        /* macros for entire REPLY MROM access of type uint8_t */
        #define CMD_DEVICE_INFO_REPLY_MROM_TYPE uint8_t
        #define CMD_DEVICE_INFO_REPLY_MROM_SIZE 8
        #define CMD_DEVICE_INFO_REPLY_MROM_MASK 0xff
        #define CMD_DEVICE_INFO_REPLY_MROM_MSB 7
        #define CMD_DEVICE_INFO_REPLY_MROM_LSB 0
        #define CMD_DEVICE_INFO_REPLY_MROM_INDEX 14
        #define CMD_DEVICE_INFO_REPLY_MROM_var() ()
        #define CMD_DEVICE_INFO_REPLY_MROM_value() ((uint8_t)CMD_DEVICE_INFO_REPLY_MROM_var())
        #define CMD_DEVICE_INFO_REPLY_MROM_write_u8(x) (CMD_DEVICE_INFO_REPLY_MROM_var() = (x))
                /* macros for field MINORREV access */
                #define CMD_DEVICE_INFO_REPLY_MROM_MINORREV_TYPE uint8_t
                #define CMD_DEVICE_INFO_REPLY_MROM_MINORREV_SIZE 8
                #define CMD_DEVICE_INFO_REPLY_MROM_MINORREV_INDEX 14
                #define CMD_DEVICE_INFO_REPLY_MROM_MINORREV_MIN 0x0
                #define CMD_DEVICE_INFO_REPLY_MROM_MINORREV_MAX 0xff
                #define CMD_DEVICE_INFO_REPLY_MROM_MINORREV_PARAM_MSB 7
                #define CMD_DEVICE_INFO_REPLY_MROM_MINORREV_PARAM_LSB 0
                #define CMD_DEVICE_INFO_REPLY_MROM_MINORREV_MASK 0xff
                #define CMD_DEVICE_INFO_REPLY_MROM_MINORREV_BYTE_MSB 7
                #define CMD_DEVICE_INFO_REPLY_MROM_MINORREV_BYTE_LSB 0
                #define CMD_DEVICE_INFO_REPLY_MROM_MINORREV_write_u8(x) (CMD_DEVICE_INFO_REPLY_MROM_var() = ((x)))

        /* macros for entire REPLY BROM access of type uint8_t */
        #define CMD_DEVICE_INFO_REPLY_BROM_TYPE uint8_t
        #define CMD_DEVICE_INFO_REPLY_BROM_SIZE 8
        #define CMD_DEVICE_INFO_REPLY_BROM_MASK 0xff
        #define CMD_DEVICE_INFO_REPLY_BROM_MSB 7
        #define CMD_DEVICE_INFO_REPLY_BROM_LSB 0
        #define CMD_DEVICE_INFO_REPLY_BROM_INDEX 15
        #define CMD_DEVICE_INFO_REPLY_BROM_var() ()
        #define CMD_DEVICE_INFO_REPLY_BROM_value() ((uint8_t)CMD_DEVICE_INFO_REPLY_BROM_var())
        #define CMD_DEVICE_INFO_REPLY_BROM_write_u8(x) (CMD_DEVICE_INFO_REPLY_BROM_var() = (x))
                /* macros for field BRANCHREV access */
                #define CMD_DEVICE_INFO_REPLY_BROM_BRANCHREV_TYPE uint8_t
                #define CMD_DEVICE_INFO_REPLY_BROM_BRANCHREV_SIZE 8
                #define CMD_DEVICE_INFO_REPLY_BROM_BRANCHREV_INDEX 15
                #define CMD_DEVICE_INFO_REPLY_BROM_BRANCHREV_MIN 0x0
                #define CMD_DEVICE_INFO_REPLY_BROM_BRANCHREV_MAX 0xff
                #define CMD_DEVICE_INFO_REPLY_BROM_BRANCHREV_PARAM_MSB 7
                #define CMD_DEVICE_INFO_REPLY_BROM_BRANCHREV_PARAM_LSB 0
                #define CMD_DEVICE_INFO_REPLY_BROM_BRANCHREV_MASK 0xff
                #define CMD_DEVICE_INFO_REPLY_BROM_BRANCHREV_BYTE_MSB 7
                #define CMD_DEVICE_INFO_REPLY_BROM_BRANCHREV_BYTE_LSB 0
                #define CMD_DEVICE_INFO_REPLY_BROM_BRANCHREV_write_u8(x) (CMD_DEVICE_INFO_REPLY_BROM_var() = ((x)))

        /* macros for entire REPLY SFLAGS access of type uint8_t */
        #define CMD_DEVICE_INFO_REPLY_SFLAGS_TYPE uint8_t
        #define CMD_DEVICE_INFO_REPLY_SFLAGS_SIZE 8
        #define CMD_DEVICE_INFO_REPLY_SFLAGS_MASK 0xff
        #define CMD_DEVICE_INFO_REPLY_SFLAGS_MSB 7
        #define CMD_DEVICE_INFO_REPLY_SFLAGS_LSB 0
        #define CMD_DEVICE_INFO_REPLY_SFLAGS_INDEX 16
        #define CMD_DEVICE_INFO_REPLY_SFLAGS_var() ()
        #define CMD_DEVICE_INFO_REPLY_SFLAGS_value() ((uint8_t)CMD_DEVICE_INFO_REPLY_SFLAGS_var())
        #define CMD_DEVICE_INFO_REPLY_SFLAGS_write_u8(x) (CMD_DEVICE_INFO_REPLY_SFLAGS_var() = (x))
                /* macros for field LOCAL access */
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_LOCAL_TYPE uint16_t
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_LOCAL_SIZE 1
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_LOCAL_INDEX 16
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_LOCAL_PARAM_MSB 6
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_LOCAL_PARAM_LSB 6
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_LOCAL_MASK 0x40
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_LOCAL_BYTE_MSB 6
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_LOCAL_BYTE_LSB 6
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_LOCAL_BIT 0x40
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_LOCAL_TRUE_BIT 0x40
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_LOCAL_FALSE_BIT 0x00
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_LOCAL_write_bitfield(x) (CMD_DEVICE_INFO_REPLY_SFLAGS_var() = ((CMD_DEVICE_INFO_REPLY_SFLAGS_var() & ~0x40) | (((x) << 6) & 0x40)))
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_LOCAL_ENUM_CLEAN 0
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_LOCAL_ENUM_DIRTY 1

                /* macros for field EXTERNALS access */
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_EXTERNALS_TYPE uint16_t
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_EXTERNALS_SIZE 1
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_EXTERNALS_INDEX 16
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_EXTERNALS_PARAM_MSB 5
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_EXTERNALS_PARAM_LSB 5
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_EXTERNALS_MASK 0x20
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_EXTERNALS_BYTE_MSB 5
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_EXTERNALS_BYTE_LSB 5
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_EXTERNALS_BIT 0x20
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_EXTERNALS_TRUE_BIT 0x20
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_EXTERNALS_FALSE_BIT 0x00
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_EXTERNALS_write_bitfield(x) (CMD_DEVICE_INFO_REPLY_SFLAGS_var() = ((CMD_DEVICE_INFO_REPLY_SFLAGS_var() & ~0x20) | (((x) << 5) & 0x20)))
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_EXTERNALS_ENUM_SAFE 0
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_EXTERNALS_ENUM_FLEX 1

                /* macros for field MIXED access */
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_MIXED_TYPE uint16_t
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_MIXED_SIZE 1
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_MIXED_INDEX 16
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_MIXED_PARAM_MSB 4
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_MIXED_PARAM_LSB 4
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_MIXED_MASK 0x10
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_MIXED_BYTE_MSB 4
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_MIXED_BYTE_LSB 4
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_MIXED_BIT 0x10
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_MIXED_TRUE_BIT 0x10
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_MIXED_FALSE_BIT 0x00
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_MIXED_write_bitfield(x) (CMD_DEVICE_INFO_REPLY_SFLAGS_var() = ((CMD_DEVICE_INFO_REPLY_SFLAGS_var() & ~0x10) | (((x) << 4) & 0x10)))
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_MIXED_ENUM_CLEAN 0
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_MIXED_ENUM_DIRTY 1

                /* macros for field UNVER access */
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_UNVER_TYPE uint16_t
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_UNVER_SIZE 1
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_UNVER_INDEX 16
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_UNVER_PARAM_MSB 3
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_UNVER_PARAM_LSB 3
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_UNVER_MASK 0x08
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_UNVER_BYTE_MSB 3
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_UNVER_BYTE_LSB 3
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_UNVER_BIT 0x08
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_UNVER_TRUE_BIT 0x08
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_UNVER_FALSE_BIT 0x00
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_UNVER_write_bitfield(x) (CMD_DEVICE_INFO_REPLY_SFLAGS_var() = ((CMD_DEVICE_INFO_REPLY_SFLAGS_var() & ~0x08) | (((x) << 3) & 0x08)))
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_UNVER_ENUM_CLEAN 0
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_UNVER_ENUM_DIRTY 1

                /* macros for field TAGGED access */
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_TAGGED_TYPE uint16_t
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_TAGGED_SIZE 1
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_TAGGED_INDEX 16
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_TAGGED_PARAM_MSB 2
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_TAGGED_PARAM_LSB 2
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_TAGGED_MASK 0x04
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_TAGGED_BYTE_MSB 2
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_TAGGED_BYTE_LSB 2
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_TAGGED_BIT 0x04
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_TAGGED_TRUE_BIT 0x04
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_TAGGED_FALSE_BIT 0x00
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_TAGGED_write_bitfield(x) (CMD_DEVICE_INFO_REPLY_SFLAGS_var() = ((CMD_DEVICE_INFO_REPLY_SFLAGS_var() & ~0x04) | (((x) << 2) & 0x04)))
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_TAGGED_ENUM_TAG 0
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_TAGGED_ENUM_NOTAG 1

                /* macros for field BUILD access */
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_BUILD_TYPE uint16_t
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_BUILD_SIZE 2
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_BUILD_INDEX 16
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_BUILD_PARAM_MSB 1
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_BUILD_PARAM_LSB 0
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_BUILD_MASK 0x03
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_BUILD_BYTE_MSB 1
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_BUILD_BYTE_LSB 0
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_BUILD_write_bitfield(x) (CMD_DEVICE_INFO_REPLY_SFLAGS_var() = ((CMD_DEVICE_INFO_REPLY_SFLAGS_var() & ~0x03) | (((x)) & 0x03)))
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_BUILD_ENUM_TAG 0
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_BUILD_ENUM_BRANCH 1
                #define CMD_DEVICE_INFO_REPLY_SFLAGS_BUILD_ENUM_TRUNK 2

        /* macros for entire REPLY M0 access of type uint8_t */
        #define CMD_DEVICE_INFO_REPLY_M0_TYPE uint8_t
        #define CMD_DEVICE_INFO_REPLY_M0_SIZE 8
        #define CMD_DEVICE_INFO_REPLY_M0_MASK 0xff
        #define CMD_DEVICE_INFO_REPLY_M0_MSB 7
        #define CMD_DEVICE_INFO_REPLY_M0_LSB 0
        #define CMD_DEVICE_INFO_REPLY_M0_INDEX 17
        #define CMD_DEVICE_INFO_REPLY_M0_var() ()
        #define CMD_DEVICE_INFO_REPLY_M0_value() ((uint8_t)CMD_DEVICE_INFO_REPLY_M0_var())
        #define CMD_DEVICE_INFO_REPLY_M0_write_u8(x) (CMD_DEVICE_INFO_REPLY_M0_var() = (x))
                /* macros for field HWREV access */
                #define CMD_DEVICE_INFO_REPLY_M0_HWREV_TYPE uint8_t
                #define CMD_DEVICE_INFO_REPLY_M0_HWREV_SIZE 4
                #define CMD_DEVICE_INFO_REPLY_M0_HWREV_INDEX 17
                #define CMD_DEVICE_INFO_REPLY_M0_HWREV_PARAM_MSB 7
                #define CMD_DEVICE_INFO_REPLY_M0_HWREV_PARAM_LSB 4
                #define CMD_DEVICE_INFO_REPLY_M0_HWREV_MASK 0xf0
                #define CMD_DEVICE_INFO_REPLY_M0_HWREV_BYTE_MSB 7
                #define CMD_DEVICE_INFO_REPLY_M0_HWREV_BYTE_LSB 4
                #define CMD_DEVICE_INFO_REPLY_M0_HWREV_write_bitfield(x) (CMD_DEVICE_INFO_REPLY_M0_var() = ((CMD_DEVICE_INFO_REPLY_M0_var() & ~0xf0) | (((x) << 4) & 0xf0)))

                /* macros for field HWSUBREV access */
                #define CMD_DEVICE_INFO_REPLY_M0_HWSUBREV_TYPE uint8_t
                #define CMD_DEVICE_INFO_REPLY_M0_HWSUBREV_SIZE 4
                #define CMD_DEVICE_INFO_REPLY_M0_HWSUBREV_INDEX 17
                #define CMD_DEVICE_INFO_REPLY_M0_HWSUBREV_PARAM_MSB 3
                #define CMD_DEVICE_INFO_REPLY_M0_HWSUBREV_PARAM_LSB 0
                #define CMD_DEVICE_INFO_REPLY_M0_HWSUBREV_MASK 0x0f
                #define CMD_DEVICE_INFO_REPLY_M0_HWSUBREV_BYTE_MSB 3
                #define CMD_DEVICE_INFO_REPLY_M0_HWSUBREV_BYTE_LSB 0
                #define CMD_DEVICE_INFO_REPLY_M0_HWSUBREV_write_bitfield(x) (CMD_DEVICE_INFO_REPLY_M0_var() = ((CMD_DEVICE_INFO_REPLY_M0_var() & ~0x0f) | (((x)) & 0x0f)))

        /* macros for entire REPLY M1 access of type uint8_t */
        #define CMD_DEVICE_INFO_REPLY_M1_TYPE uint8_t
        #define CMD_DEVICE_INFO_REPLY_M1_SIZE 8
        #define CMD_DEVICE_INFO_REPLY_M1_MASK 0xff
        #define CMD_DEVICE_INFO_REPLY_M1_MSB 7
        #define CMD_DEVICE_INFO_REPLY_M1_LSB 0
        #define CMD_DEVICE_INFO_REPLY_M1_INDEX 18
        #define CMD_DEVICE_INFO_REPLY_M1_var() ()
        #define CMD_DEVICE_INFO_REPLY_M1_value() ((uint8_t)CMD_DEVICE_INFO_REPLY_M1_var())
        #define CMD_DEVICE_INFO_REPLY_M1_write_u8(x) (CMD_DEVICE_INFO_REPLY_M1_var() = (x))
                /* macros for field BANKSTRUCTURE access */
                #define CMD_DEVICE_INFO_REPLY_M1_BANKSTRUCTURE_TYPE uint8_t
                #define CMD_DEVICE_INFO_REPLY_M1_BANKSTRUCTURE_SIZE 4
                #define CMD_DEVICE_INFO_REPLY_M1_BANKSTRUCTURE_INDEX 18
                #define CMD_DEVICE_INFO_REPLY_M1_BANKSTRUCTURE_PARAM_MSB 7
                #define CMD_DEVICE_INFO_REPLY_M1_BANKSTRUCTURE_PARAM_LSB 4
                #define CMD_DEVICE_INFO_REPLY_M1_BANKSTRUCTURE_MASK 0xf0
                #define CMD_DEVICE_INFO_REPLY_M1_BANKSTRUCTURE_BYTE_MSB 7
                #define CMD_DEVICE_INFO_REPLY_M1_BANKSTRUCTURE_BYTE_LSB 4
                #define CMD_DEVICE_INFO_REPLY_M1_BANKSTRUCTURE_write_bitfield(x) (CMD_DEVICE_INFO_REPLY_M1_var() = ((CMD_DEVICE_INFO_REPLY_M1_var() & ~0xf0) | (((x) << 4) & 0xf0)))

                /* macros for field HWVARIANT access */
                #define CMD_DEVICE_INFO_REPLY_M1_HWVARIANT_TYPE uint8_t
                #define CMD_DEVICE_INFO_REPLY_M1_HWVARIANT_SIZE 4
                #define CMD_DEVICE_INFO_REPLY_M1_HWVARIANT_INDEX 18
                #define CMD_DEVICE_INFO_REPLY_M1_HWVARIANT_PARAM_MSB 3
                #define CMD_DEVICE_INFO_REPLY_M1_HWVARIANT_PARAM_LSB 0
                #define CMD_DEVICE_INFO_REPLY_M1_HWVARIANT_MASK 0x0f
                #define CMD_DEVICE_INFO_REPLY_M1_HWVARIANT_BYTE_MSB 3
                #define CMD_DEVICE_INFO_REPLY_M1_HWVARIANT_BYTE_LSB 0
                #define CMD_DEVICE_INFO_REPLY_M1_HWVARIANT_write_bitfield(x) (CMD_DEVICE_INFO_REPLY_M1_var() = ((CMD_DEVICE_INFO_REPLY_M1_var() & ~0x0f) | (((x)) & 0x0f)))

        /* macros for entire REPLY SVN access of type uint32_t */
        #define CMD_DEVICE_INFO_REPLY_SVN_TYPE uint32_t
        #define CMD_DEVICE_INFO_REPLY_SVN_SIZE 32
        #define CMD_DEVICE_INFO_REPLY_SVN_MASK 0xffffffff
        #define CMD_DEVICE_INFO_REPLY_SVN_MSB 31
        #define CMD_DEVICE_INFO_REPLY_SVN_LSB 0
        #define CMD_DEVICE_INFO_REPLY_SVN_INDEX 20
        #define CMD_DEVICE_INFO_REPLY_SVN_var() ()
        #define CMD_DEVICE_INFO_REPLY_SVN_value() ((uint32_t)CMD_DEVICE_INFO_REPLY_SVN_var())
        #define CMD_DEVICE_INFO_REPLY_SVN_write_u32(x) (CMD_DEVICE_INFO_REPLY_SVN_var() = (x))
                /* macros for field SVN_NUMBER access */
                #define CMD_DEVICE_INFO_REPLY_SVN_SVN_NUMBER_TYPE uint32_t
                #define CMD_DEVICE_INFO_REPLY_SVN_SVN_NUMBER_SIZE 32
                #define CMD_DEVICE_INFO_REPLY_SVN_SVN_NUMBER_INDEX 20
                #define CMD_DEVICE_INFO_REPLY_SVN_SVN_NUMBER_PARAM_MSB 31
                #define CMD_DEVICE_INFO_REPLY_SVN_SVN_NUMBER_PARAM_LSB 0
                #define CMD_DEVICE_INFO_REPLY_SVN_SVN_NUMBER_MASK 0xffffffff
                #define CMD_DEVICE_INFO_REPLY_SVN_SVN_NUMBER_BYTE_MSB 31
                #define CMD_DEVICE_INFO_REPLY_SVN_SVN_NUMBER_BYTE_LSB 0
                #define CMD_DEVICE_INFO_REPLY_SVN_SVN_NUMBER_write_u32(x) (CMD_DEVICE_INFO_REPLY_SVN_var() = ((x)))
                #define CMD_DEVICE_INFO_REPLY_SVN_SVN_NUMBER_7_0_MASK 0xff
                #define CMD_DEVICE_INFO_REPLY_SVN_SVN_NUMBER_15_8_MASK 0xff
                #define CMD_DEVICE_INFO_REPLY_SVN_SVN_NUMBER_23_16_MASK 0xff
                #define CMD_DEVICE_INFO_REPLY_SVN_SVN_NUMBER_31_24_MASK 0xff

#define CMD_NVM_READ 0x09
/* NVM_READ ARGS */
/* NVM_READ REPLY */
#define CMD_NVM_STATUS 0x0a
/* NVM_STATUS ARGS */
/* NVM_STATUS REPLY */
        /* macros for entire REPLY ERROR2CNT access of type uint8_t */
        #define CMD_NVM_STATUS_REPLY_ERROR2CNT_TYPE uint8_t
        #define CMD_NVM_STATUS_REPLY_ERROR2CNT_SIZE 8
        #define CMD_NVM_STATUS_REPLY_ERROR2CNT_MASK 0xff
        #define CMD_NVM_STATUS_REPLY_ERROR2CNT_MSB 7
        #define CMD_NVM_STATUS_REPLY_ERROR2CNT_LSB 0
        #define CMD_NVM_STATUS_REPLY_ERROR2CNT_INDEX 1
        #define CMD_NVM_STATUS_REPLY_ERROR2CNT_var() ()
        #define CMD_NVM_STATUS_REPLY_ERROR2CNT_value() ((uint8_t)CMD_NVM_STATUS_REPLY_ERROR2CNT_var())
        #define CMD_NVM_STATUS_REPLY_ERROR2CNT_write_u8(x) (CMD_NVM_STATUS_REPLY_ERROR2CNT_var() = (x))
                /* macros for field ERROR2CNT access */
                #define CMD_NVM_STATUS_REPLY_ERROR2CNT_ERROR2CNT_TYPE uint8_t
                #define CMD_NVM_STATUS_REPLY_ERROR2CNT_ERROR2CNT_SIZE 8
                #define CMD_NVM_STATUS_REPLY_ERROR2CNT_ERROR2CNT_INDEX 1
                #define CMD_NVM_STATUS_REPLY_ERROR2CNT_ERROR2CNT_MIN 0x0
                #define CMD_NVM_STATUS_REPLY_ERROR2CNT_ERROR2CNT_MAX 0xff
                #define CMD_NVM_STATUS_REPLY_ERROR2CNT_ERROR2CNT_PARAM_MSB 7
                #define CMD_NVM_STATUS_REPLY_ERROR2CNT_ERROR2CNT_PARAM_LSB 0
                #define CMD_NVM_STATUS_REPLY_ERROR2CNT_ERROR2CNT_MASK 0xff
                #define CMD_NVM_STATUS_REPLY_ERROR2CNT_ERROR2CNT_BYTE_MSB 7
                #define CMD_NVM_STATUS_REPLY_ERROR2CNT_ERROR2CNT_BYTE_LSB 0
                #define CMD_NVM_STATUS_REPLY_ERROR2CNT_ERROR2CNT_write_u8(x) (CMD_NVM_STATUS_REPLY_ERROR2CNT_var() = ((x)))

        /* macros for entire REPLY ERROR1CNT access of type uint8_t */
        #define CMD_NVM_STATUS_REPLY_ERROR1CNT_TYPE uint8_t
        #define CMD_NVM_STATUS_REPLY_ERROR1CNT_SIZE 8
        #define CMD_NVM_STATUS_REPLY_ERROR1CNT_MASK 0xff
        #define CMD_NVM_STATUS_REPLY_ERROR1CNT_MSB 7
        #define CMD_NVM_STATUS_REPLY_ERROR1CNT_LSB 0
        #define CMD_NVM_STATUS_REPLY_ERROR1CNT_INDEX 2
        #define CMD_NVM_STATUS_REPLY_ERROR1CNT_var() ()
        #define CMD_NVM_STATUS_REPLY_ERROR1CNT_value() ((uint8_t)CMD_NVM_STATUS_REPLY_ERROR1CNT_var())
        #define CMD_NVM_STATUS_REPLY_ERROR1CNT_write_u8(x) (CMD_NVM_STATUS_REPLY_ERROR1CNT_var() = (x))
                /* macros for field ERROR1CNT access */
                #define CMD_NVM_STATUS_REPLY_ERROR1CNT_ERROR1CNT_TYPE uint8_t
                #define CMD_NVM_STATUS_REPLY_ERROR1CNT_ERROR1CNT_SIZE 8
                #define CMD_NVM_STATUS_REPLY_ERROR1CNT_ERROR1CNT_INDEX 2
                #define CMD_NVM_STATUS_REPLY_ERROR1CNT_ERROR1CNT_MIN 0x0
                #define CMD_NVM_STATUS_REPLY_ERROR1CNT_ERROR1CNT_MAX 0xff
                #define CMD_NVM_STATUS_REPLY_ERROR1CNT_ERROR1CNT_PARAM_MSB 7
                #define CMD_NVM_STATUS_REPLY_ERROR1CNT_ERROR1CNT_PARAM_LSB 0
                #define CMD_NVM_STATUS_REPLY_ERROR1CNT_ERROR1CNT_MASK 0xff
                #define CMD_NVM_STATUS_REPLY_ERROR1CNT_ERROR1CNT_BYTE_MSB 7
                #define CMD_NVM_STATUS_REPLY_ERROR1CNT_ERROR1CNT_BYTE_LSB 0
                #define CMD_NVM_STATUS_REPLY_ERROR1CNT_ERROR1CNT_write_u8(x) (CMD_NVM_STATUS_REPLY_ERROR1CNT_var() = ((x)))

        /* macros for entire REPLY MISC access of type uint8_t */
        #define CMD_NVM_STATUS_REPLY_MISC_TYPE uint8_t
        #define CMD_NVM_STATUS_REPLY_MISC_SIZE 8
        #define CMD_NVM_STATUS_REPLY_MISC_MASK 0xff
        #define CMD_NVM_STATUS_REPLY_MISC_MSB 7
        #define CMD_NVM_STATUS_REPLY_MISC_LSB 0
        #define CMD_NVM_STATUS_REPLY_MISC_INDEX 3
        #define CMD_NVM_STATUS_REPLY_MISC_var() ()
        #define CMD_NVM_STATUS_REPLY_MISC_value() ((uint8_t)CMD_NVM_STATUS_REPLY_MISC_var())
        #define CMD_NVM_STATUS_REPLY_MISC_write_u8(x) (CMD_NVM_STATUS_REPLY_MISC_var() = (x))
                /* macros for field UNPROGRAMMED access */
                #define CMD_NVM_STATUS_REPLY_MISC_UNPROGRAMMED_TYPE uint16_t
                #define CMD_NVM_STATUS_REPLY_MISC_UNPROGRAMMED_SIZE 1
                #define CMD_NVM_STATUS_REPLY_MISC_UNPROGRAMMED_INDEX 3
                #define CMD_NVM_STATUS_REPLY_MISC_UNPROGRAMMED_PARAM_MSB 3
                #define CMD_NVM_STATUS_REPLY_MISC_UNPROGRAMMED_PARAM_LSB 3
                #define CMD_NVM_STATUS_REPLY_MISC_UNPROGRAMMED_MASK 0x08
                #define CMD_NVM_STATUS_REPLY_MISC_UNPROGRAMMED_BYTE_MSB 3
                #define CMD_NVM_STATUS_REPLY_MISC_UNPROGRAMMED_BYTE_LSB 3
                #define CMD_NVM_STATUS_REPLY_MISC_UNPROGRAMMED_BIT 0x08
                #define CMD_NVM_STATUS_REPLY_MISC_UNPROGRAMMED_TRUE_BIT 0x08
                #define CMD_NVM_STATUS_REPLY_MISC_UNPROGRAMMED_FALSE_BIT 0x00
                #define CMD_NVM_STATUS_REPLY_MISC_UNPROGRAMMED_write_bitfield(x) (CMD_NVM_STATUS_REPLY_MISC_var() = ((CMD_NVM_STATUS_REPLY_MISC_var() & ~0x08) | (((x) << 3) & 0x08)))
                #define CMD_NVM_STATUS_REPLY_MISC_UNPROGRAMMED_ENUM_PROG 0
                #define CMD_NVM_STATUS_REPLY_MISC_UNPROGRAMMED_ENUM_UNPROG 1

                /* macros for field DBP_ERROR access */
                #define CMD_NVM_STATUS_REPLY_MISC_DBP_ERROR_TYPE uint16_t
                #define CMD_NVM_STATUS_REPLY_MISC_DBP_ERROR_SIZE 1
                #define CMD_NVM_STATUS_REPLY_MISC_DBP_ERROR_INDEX 3
                #define CMD_NVM_STATUS_REPLY_MISC_DBP_ERROR_PARAM_MSB 2
                #define CMD_NVM_STATUS_REPLY_MISC_DBP_ERROR_PARAM_LSB 2
                #define CMD_NVM_STATUS_REPLY_MISC_DBP_ERROR_MASK 0x04
                #define CMD_NVM_STATUS_REPLY_MISC_DBP_ERROR_BYTE_MSB 2
                #define CMD_NVM_STATUS_REPLY_MISC_DBP_ERROR_BYTE_LSB 2
                #define CMD_NVM_STATUS_REPLY_MISC_DBP_ERROR_BIT 0x04
                #define CMD_NVM_STATUS_REPLY_MISC_DBP_ERROR_TRUE_BIT 0x04
                #define CMD_NVM_STATUS_REPLY_MISC_DBP_ERROR_FALSE_BIT 0x00
                #define CMD_NVM_STATUS_REPLY_MISC_DBP_ERROR_write_bitfield(x) (CMD_NVM_STATUS_REPLY_MISC_var() = ((CMD_NVM_STATUS_REPLY_MISC_var() & ~0x04) | (((x) << 2) & 0x04)))
                #define CMD_NVM_STATUS_REPLY_MISC_DBP_ERROR_ENUM_NOERR 0
                #define CMD_NVM_STATUS_REPLY_MISC_DBP_ERROR_ENUM_ERR 1

                /* macros for field CRC_ERROR access */
                #define CMD_NVM_STATUS_REPLY_MISC_CRC_ERROR_TYPE uint16_t
                #define CMD_NVM_STATUS_REPLY_MISC_CRC_ERROR_SIZE 1
                #define CMD_NVM_STATUS_REPLY_MISC_CRC_ERROR_INDEX 3
                #define CMD_NVM_STATUS_REPLY_MISC_CRC_ERROR_PARAM_MSB 1
                #define CMD_NVM_STATUS_REPLY_MISC_CRC_ERROR_PARAM_LSB 1
                #define CMD_NVM_STATUS_REPLY_MISC_CRC_ERROR_MASK 0x02
                #define CMD_NVM_STATUS_REPLY_MISC_CRC_ERROR_BYTE_MSB 1
                #define CMD_NVM_STATUS_REPLY_MISC_CRC_ERROR_BYTE_LSB 1
                #define CMD_NVM_STATUS_REPLY_MISC_CRC_ERROR_BIT 0x02
                #define CMD_NVM_STATUS_REPLY_MISC_CRC_ERROR_TRUE_BIT 0x02
                #define CMD_NVM_STATUS_REPLY_MISC_CRC_ERROR_FALSE_BIT 0x00
                #define CMD_NVM_STATUS_REPLY_MISC_CRC_ERROR_write_bitfield(x) (CMD_NVM_STATUS_REPLY_MISC_var() = ((CMD_NVM_STATUS_REPLY_MISC_var() & ~0x02) | (((x) << 1) & 0x02)))
                #define CMD_NVM_STATUS_REPLY_MISC_CRC_ERROR_ENUM_NOERR 0
                #define CMD_NVM_STATUS_REPLY_MISC_CRC_ERROR_ENUM_ERR 1

                /* macros for field NOECC access */
                #define CMD_NVM_STATUS_REPLY_MISC_NOECC_TYPE uint16_t
                #define CMD_NVM_STATUS_REPLY_MISC_NOECC_SIZE 1
                #define CMD_NVM_STATUS_REPLY_MISC_NOECC_INDEX 3
                #define CMD_NVM_STATUS_REPLY_MISC_NOECC_PARAM_MSB 0
                #define CMD_NVM_STATUS_REPLY_MISC_NOECC_PARAM_LSB 0
                #define CMD_NVM_STATUS_REPLY_MISC_NOECC_MASK 0x01
                #define CMD_NVM_STATUS_REPLY_MISC_NOECC_BYTE_MSB 0
                #define CMD_NVM_STATUS_REPLY_MISC_NOECC_BYTE_LSB 0
                #define CMD_NVM_STATUS_REPLY_MISC_NOECC_BIT 0x01
                #define CMD_NVM_STATUS_REPLY_MISC_NOECC_TRUE_BIT 0x01
                #define CMD_NVM_STATUS_REPLY_MISC_NOECC_FALSE_BIT 0x00
                #define CMD_NVM_STATUS_REPLY_MISC_NOECC_write_bitfield(x) (CMD_NVM_STATUS_REPLY_MISC_var() = ((CMD_NVM_STATUS_REPLY_MISC_var() & ~0x01) | (((x)) & 0x01)))
                #define CMD_NVM_STATUS_REPLY_MISC_NOECC_ENUM_ECC 0
                #define CMD_NVM_STATUS_REPLY_MISC_NOECC_ENUM_NOECC 1

        /* macros for entire REPLY DESCRIPTORS access of type uint8_t */
        #define CMD_NVM_STATUS_REPLY_DESCRIPTORS_TYPE uint8_t
        #define CMD_NVM_STATUS_REPLY_DESCRIPTORS_SIZE 8
        #define CMD_NVM_STATUS_REPLY_DESCRIPTORS_MASK 0xff
        #define CMD_NVM_STATUS_REPLY_DESCRIPTORS_MSB 7
        #define CMD_NVM_STATUS_REPLY_DESCRIPTORS_LSB 0
        #define CMD_NVM_STATUS_REPLY_DESCRIPTORS_INDEX 4
        #define CMD_NVM_STATUS_REPLY_DESCRIPTORS_var() ()
        #define CMD_NVM_STATUS_REPLY_DESCRIPTORS_value() ((uint8_t)CMD_NVM_STATUS_REPLY_DESCRIPTORS_var())
        #define CMD_NVM_STATUS_REPLY_DESCRIPTORS_write_u8(x) (CMD_NVM_STATUS_REPLY_DESCRIPTORS_var() = (x))
                /* macros for field DESCRIPTORS access */
                #define CMD_NVM_STATUS_REPLY_DESCRIPTORS_DESCRIPTORS_TYPE uint8_t
                #define CMD_NVM_STATUS_REPLY_DESCRIPTORS_DESCRIPTORS_SIZE 8
                #define CMD_NVM_STATUS_REPLY_DESCRIPTORS_DESCRIPTORS_INDEX 4
                #define CMD_NVM_STATUS_REPLY_DESCRIPTORS_DESCRIPTORS_MIN 0x0
                #define CMD_NVM_STATUS_REPLY_DESCRIPTORS_DESCRIPTORS_MAX 0xff
                #define CMD_NVM_STATUS_REPLY_DESCRIPTORS_DESCRIPTORS_PARAM_MSB 7
                #define CMD_NVM_STATUS_REPLY_DESCRIPTORS_DESCRIPTORS_PARAM_LSB 0
                #define CMD_NVM_STATUS_REPLY_DESCRIPTORS_DESCRIPTORS_MASK 0xff
                #define CMD_NVM_STATUS_REPLY_DESCRIPTORS_DESCRIPTORS_BYTE_MSB 7
                #define CMD_NVM_STATUS_REPLY_DESCRIPTORS_DESCRIPTORS_BYTE_LSB 0
                #define CMD_NVM_STATUS_REPLY_DESCRIPTORS_DESCRIPTORS_write_u8(x) (CMD_NVM_STATUS_REPLY_DESCRIPTORS_var() = ((x)))

        /* macros for entire REPLY INVALIDATED access of type uint8_t */
        #define CMD_NVM_STATUS_REPLY_INVALIDATED_TYPE uint8_t
        #define CMD_NVM_STATUS_REPLY_INVALIDATED_SIZE 8
        #define CMD_NVM_STATUS_REPLY_INVALIDATED_MASK 0xff
        #define CMD_NVM_STATUS_REPLY_INVALIDATED_MSB 7
        #define CMD_NVM_STATUS_REPLY_INVALIDATED_LSB 0
        #define CMD_NVM_STATUS_REPLY_INVALIDATED_INDEX 5
        #define CMD_NVM_STATUS_REPLY_INVALIDATED_var() ()
        #define CMD_NVM_STATUS_REPLY_INVALIDATED_value() ((uint8_t)CMD_NVM_STATUS_REPLY_INVALIDATED_var())
        #define CMD_NVM_STATUS_REPLY_INVALIDATED_write_u8(x) (CMD_NVM_STATUS_REPLY_INVALIDATED_var() = (x))
                /* macros for field INVALIDATED access */
                #define CMD_NVM_STATUS_REPLY_INVALIDATED_INVALIDATED_TYPE uint8_t
                #define CMD_NVM_STATUS_REPLY_INVALIDATED_INVALIDATED_SIZE 8
                #define CMD_NVM_STATUS_REPLY_INVALIDATED_INVALIDATED_INDEX 5
                #define CMD_NVM_STATUS_REPLY_INVALIDATED_INVALIDATED_MIN 0x0
                #define CMD_NVM_STATUS_REPLY_INVALIDATED_INVALIDATED_MAX 0xff
                #define CMD_NVM_STATUS_REPLY_INVALIDATED_INVALIDATED_PARAM_MSB 7
                #define CMD_NVM_STATUS_REPLY_INVALIDATED_INVALIDATED_PARAM_LSB 0
                #define CMD_NVM_STATUS_REPLY_INVALIDATED_INVALIDATED_MASK 0xff
                #define CMD_NVM_STATUS_REPLY_INVALIDATED_INVALIDATED_BYTE_MSB 7
                #define CMD_NVM_STATUS_REPLY_INVALIDATED_INVALIDATED_BYTE_LSB 0
                #define CMD_NVM_STATUS_REPLY_INVALIDATED_INVALIDATED_write_u8(x) (CMD_NVM_STATUS_REPLY_INVALIDATED_var() = ((x)))

#define CMD_BOOT_LOG 0x0b
/* BOOT_LOG ARGS */
/* BOOT_LOG REPLY */
        /* macros for entire REPLY ROVER access of type uint8_t */
        #define CMD_BOOT_LOG_REPLY_ROVER_TYPE uint8_t
        #define CMD_BOOT_LOG_REPLY_ROVER_SIZE 8
        #define CMD_BOOT_LOG_REPLY_ROVER_MASK 0xff
        #define CMD_BOOT_LOG_REPLY_ROVER_MSB 7
        #define CMD_BOOT_LOG_REPLY_ROVER_LSB 0
        #define CMD_BOOT_LOG_REPLY_ROVER_INDEX 1
        #define CMD_BOOT_LOG_REPLY_ROVER_var() ()
        #define CMD_BOOT_LOG_REPLY_ROVER_value() ((uint8_t)CMD_BOOT_LOG_REPLY_ROVER_var())
        #define CMD_BOOT_LOG_REPLY_ROVER_write_u8(x) (CMD_BOOT_LOG_REPLY_ROVER_var() = (x))
                /* macros for field ROLLOVER access */
                #define CMD_BOOT_LOG_REPLY_ROVER_ROLLOVER_TYPE uint8_t
                #define CMD_BOOT_LOG_REPLY_ROVER_ROLLOVER_SIZE 8
                #define CMD_BOOT_LOG_REPLY_ROVER_ROLLOVER_INDEX 1
                #define CMD_BOOT_LOG_REPLY_ROVER_ROLLOVER_PARAM_MSB 7
                #define CMD_BOOT_LOG_REPLY_ROVER_ROLLOVER_PARAM_LSB 0
                #define CMD_BOOT_LOG_REPLY_ROVER_ROLLOVER_MASK 0xff
                #define CMD_BOOT_LOG_REPLY_ROVER_ROLLOVER_BYTE_MSB 7
                #define CMD_BOOT_LOG_REPLY_ROVER_ROLLOVER_BYTE_LSB 0
                #define CMD_BOOT_LOG_REPLY_ROVER_ROLLOVER_write_u8(x) (CMD_BOOT_LOG_REPLY_ROVER_var() = ((x)))

        /* macros for entire REPLY COLL access of type uint16_t */
        #define CMD_BOOT_LOG_REPLY_COLL_TYPE uint16_t
        #define CMD_BOOT_LOG_REPLY_COLL_SIZE 16
        #define CMD_BOOT_LOG_REPLY_COLL_MASK 0xffff
        #define CMD_BOOT_LOG_REPLY_COLL_MSB 15
        #define CMD_BOOT_LOG_REPLY_COLL_LSB 0
        #define CMD_BOOT_LOG_REPLY_COLL_INDEX 2
        #define CMD_BOOT_LOG_REPLY_COLL_var() ()
        #define CMD_BOOT_LOG_REPLY_COLL_value() ((uint16_t)CMD_BOOT_LOG_REPLY_COLL_var())
        #define CMD_BOOT_LOG_REPLY_COLL_write_u16(x) (CMD_BOOT_LOG_REPLY_COLL_var() = (x))
                /* macros for field COLLECTED access */
                #define CMD_BOOT_LOG_REPLY_COLL_COLLECTED_TYPE uint16_t
                #define CMD_BOOT_LOG_REPLY_COLL_COLLECTED_SIZE 16
                #define CMD_BOOT_LOG_REPLY_COLL_COLLECTED_INDEX 2
                #define CMD_BOOT_LOG_REPLY_COLL_COLLECTED_PARAM_MSB 15
                #define CMD_BOOT_LOG_REPLY_COLL_COLLECTED_PARAM_LSB 0
                #define CMD_BOOT_LOG_REPLY_COLL_COLLECTED_MASK 0xffff
                #define CMD_BOOT_LOG_REPLY_COLL_COLLECTED_BYTE_MSB 15
                #define CMD_BOOT_LOG_REPLY_COLL_COLLECTED_BYTE_LSB 0
                #define CMD_BOOT_LOG_REPLY_COLL_COLLECTED_write_u16(x) (CMD_BOOT_LOG_REPLY_COLL_var() = ((x)))
                #define CMD_BOOT_LOG_REPLY_COLL_COLLECTED_7_0_MASK 0xff
                #define CMD_BOOT_LOG_REPLY_COLL_COLLECTED_15_8_MASK 0xff

        /* macros for entire REPLY CNT access of type uint16_t */
        #define CMD_BOOT_LOG_REPLY_CNT_TYPE uint16_t
        #define CMD_BOOT_LOG_REPLY_CNT_SIZE 16
        #define CMD_BOOT_LOG_REPLY_CNT_MASK 0xffff
        #define CMD_BOOT_LOG_REPLY_CNT_MSB 15
        #define CMD_BOOT_LOG_REPLY_CNT_LSB 0
        #define CMD_BOOT_LOG_REPLY_CNT_INDEX 4
        #define CMD_BOOT_LOG_REPLY_CNT_var() ()
        #define CMD_BOOT_LOG_REPLY_CNT_value() ((uint16_t)CMD_BOOT_LOG_REPLY_CNT_var())
        #define CMD_BOOT_LOG_REPLY_CNT_write_u16(x) (CMD_BOOT_LOG_REPLY_CNT_var() = (x))
                /* macros for field COUNT access */
                #define CMD_BOOT_LOG_REPLY_CNT_COUNT_TYPE uint16_t
                #define CMD_BOOT_LOG_REPLY_CNT_COUNT_SIZE 16
                #define CMD_BOOT_LOG_REPLY_CNT_COUNT_INDEX 4
                #define CMD_BOOT_LOG_REPLY_CNT_COUNT_PARAM_MSB 15
                #define CMD_BOOT_LOG_REPLY_CNT_COUNT_PARAM_LSB 0
                #define CMD_BOOT_LOG_REPLY_CNT_COUNT_MASK 0xffff
                #define CMD_BOOT_LOG_REPLY_CNT_COUNT_BYTE_MSB 15
                #define CMD_BOOT_LOG_REPLY_CNT_COUNT_BYTE_LSB 0
                #define CMD_BOOT_LOG_REPLY_CNT_COUNT_write_u16(x) (CMD_BOOT_LOG_REPLY_CNT_var() = ((x)))
                #define CMD_BOOT_LOG_REPLY_CNT_COUNT_7_0_MASK 0xff
                #define CMD_BOOT_LOG_REPLY_CNT_COUNT_15_8_MASK 0xff

        /* macros for entire REPLY DATA access of type uint8_t */
        #define CMD_BOOT_LOG_REPLY_DATA_TYPE uint8_t
        #define CMD_BOOT_LOG_REPLY_DATA_SIZE 8
        #define CMD_BOOT_LOG_REPLY_DATA_MASK 0xff
        #define CMD_BOOT_LOG_REPLY_DATA_MSB 7
        #define CMD_BOOT_LOG_REPLY_DATA_LSB 0
        #define CMD_BOOT_LOG_REPLY_DATA_INDEX 6
        #define CMD_BOOT_LOG_REPLY_DATA_ARRAY_LEN 255
        #define CMD_BOOT_LOG_REPLY_DATA_var(i) ([(i)])
        #define CMD_BOOT_LOG_REPLY_DATA_value(i) ((uint8_t)CMD_BOOT_LOG_REPLY_DATA_var(i))
        #define CMD_BOOT_LOG_REPLY_DATA_write_u8(i, x) (CMD_BOOT_LOG_REPLY_DATA_var(i) = (x))
                /* macros for field DATA access */
                #define CMD_BOOT_LOG_REPLY_DATA_DATA_TYPE uint8_t
                #define CMD_BOOT_LOG_REPLY_DATA_DATA_SIZE 8
                #define CMD_BOOT_LOG_REPLY_DATA_DATA_INDEX 6
                #define CMD_BOOT_LOG_REPLY_DATA_DATA_PARAM_MSB 7
                #define CMD_BOOT_LOG_REPLY_DATA_DATA_PARAM_LSB 0
                #define CMD_BOOT_LOG_REPLY_DATA_DATA_MASK 0xff
                #define CMD_BOOT_LOG_REPLY_DATA_DATA_BYTE_MSB 7
                #define CMD_BOOT_LOG_REPLY_DATA_DATA_BYTE_LSB 0
                #define CMD_BOOT_LOG_REPLY_DATA_DATA_write_u8(i, x) (CMD_BOOT_LOG_REPLY_DATA_var(i) = ((x)))

#define CMD_CRC_CHECK 0x0c
/* CRC_CHECK ARGS */
        /* macros for entire ARG ADDR access of type uint16_t */
        #define CMD_CRC_CHECK_ARG_ADDR_TYPE uint16_t
        #define CMD_CRC_CHECK_ARG_ADDR_SIZE 16
        #define CMD_CRC_CHECK_ARG_ADDR_MASK 0xffff
        #define CMD_CRC_CHECK_ARG_ADDR_MSB 15
        #define CMD_CRC_CHECK_ARG_ADDR_LSB 0
        #define CMD_CRC_CHECK_ARG_ADDR_INDEX 1
        #define CMD_CRC_CHECK_ARG_ADDR_var() ()
        #define CMD_CRC_CHECK_ARG_ADDR_value() ((uint16_t)CMD_CRC_CHECK_ARG_ADDR_var())
                /* macros for field ADDRESS access */
                #define CMD_CRC_CHECK_ARG_ADDR_ADDRESS_TYPE uint16_t
                #define CMD_CRC_CHECK_ARG_ADDR_ADDRESS_SIZE 16
                #define CMD_CRC_CHECK_ARG_ADDR_ADDRESS_INDEX 1
                #define CMD_CRC_CHECK_ARG_ADDR_ADDRESS_PARAM_MSB 15
                #define CMD_CRC_CHECK_ARG_ADDR_ADDRESS_PARAM_LSB 0
                #define CMD_CRC_CHECK_ARG_ADDR_ADDRESS_MASK 0xffff
                #define CMD_CRC_CHECK_ARG_ADDR_ADDRESS_BYTE_MSB 15
                #define CMD_CRC_CHECK_ARG_ADDR_ADDRESS_BYTE_LSB 0
                #define CMD_CRC_CHECK_ARG_ADDR_ADDRESS_is_true() (CMD_CRC_CHECK_ARG_ADDR_var())
                #define CMD_CRC_CHECK_ARG_ADDR_ADDRESS_value() ((uint16_t)((CMD_CRC_CHECK_ARG_ADDR_var())))
                #define CMD_CRC_CHECK_ARG_ADDR_ADDRESS_7_0_MASK 0xff
                #define CMD_CRC_CHECK_ARG_ADDR_ADDRESS_15_8_MASK 0xff

        /* macros for entire ARG NB access of type uint16_t */
        #define CMD_CRC_CHECK_ARG_NB_TYPE uint16_t
        #define CMD_CRC_CHECK_ARG_NB_SIZE 16
        #define CMD_CRC_CHECK_ARG_NB_MASK 0xffff
        #define CMD_CRC_CHECK_ARG_NB_MSB 15
        #define CMD_CRC_CHECK_ARG_NB_LSB 0
        #define CMD_CRC_CHECK_ARG_NB_INDEX 3
        #define CMD_CRC_CHECK_ARG_NB_var() ()
        #define CMD_CRC_CHECK_ARG_NB_value() ((uint16_t)CMD_CRC_CHECK_ARG_NB_var())
                /* macros for field NUMBYTES access */
                #define CMD_CRC_CHECK_ARG_NB_NUMBYTES_TYPE uint16_t
                #define CMD_CRC_CHECK_ARG_NB_NUMBYTES_SIZE 16
                #define CMD_CRC_CHECK_ARG_NB_NUMBYTES_INDEX 3
                #define CMD_CRC_CHECK_ARG_NB_NUMBYTES_PARAM_MSB 15
                #define CMD_CRC_CHECK_ARG_NB_NUMBYTES_PARAM_LSB 0
                #define CMD_CRC_CHECK_ARG_NB_NUMBYTES_MASK 0xffff
                #define CMD_CRC_CHECK_ARG_NB_NUMBYTES_BYTE_MSB 15
                #define CMD_CRC_CHECK_ARG_NB_NUMBYTES_BYTE_LSB 0
                #define CMD_CRC_CHECK_ARG_NB_NUMBYTES_is_true() (CMD_CRC_CHECK_ARG_NB_var())
                #define CMD_CRC_CHECK_ARG_NB_NUMBYTES_value() ((uint16_t)((CMD_CRC_CHECK_ARG_NB_var())))
                #define CMD_CRC_CHECK_ARG_NB_NUMBYTES_7_0_MASK 0xff
                #define CMD_CRC_CHECK_ARG_NB_NUMBYTES_15_8_MASK 0xff

        /* macros for entire ARG CRC access of type uint32_t */
        #define CMD_CRC_CHECK_ARG_CRC_TYPE uint32_t
        #define CMD_CRC_CHECK_ARG_CRC_SIZE 32
        #define CMD_CRC_CHECK_ARG_CRC_MASK 0xffffffff
        #define CMD_CRC_CHECK_ARG_CRC_MSB 31
        #define CMD_CRC_CHECK_ARG_CRC_LSB 0
        #define CMD_CRC_CHECK_ARG_CRC_INDEX 5
        #define CMD_CRC_CHECK_ARG_CRC_var() ()
        #define CMD_CRC_CHECK_ARG_CRC_value() ((uint32_t)CMD_CRC_CHECK_ARG_CRC_var())
                /* macros for field CRC access */
                #define CMD_CRC_CHECK_ARG_CRC_CRC_TYPE uint32_t
                #define CMD_CRC_CHECK_ARG_CRC_CRC_SIZE 32
                #define CMD_CRC_CHECK_ARG_CRC_CRC_INDEX 5
                #define CMD_CRC_CHECK_ARG_CRC_CRC_PARAM_MSB 31
                #define CMD_CRC_CHECK_ARG_CRC_CRC_PARAM_LSB 0
                #define CMD_CRC_CHECK_ARG_CRC_CRC_MASK 0xffffffff
                #define CMD_CRC_CHECK_ARG_CRC_CRC_BYTE_MSB 31
                #define CMD_CRC_CHECK_ARG_CRC_CRC_BYTE_LSB 0
                #define CMD_CRC_CHECK_ARG_CRC_CRC_is_true() (CMD_CRC_CHECK_ARG_CRC_var())
                #define CMD_CRC_CHECK_ARG_CRC_CRC_value() ((uint32_t)((CMD_CRC_CHECK_ARG_CRC_var())))
                #define CMD_CRC_CHECK_ARG_CRC_CRC_7_0_MASK 0xff
                #define CMD_CRC_CHECK_ARG_CRC_CRC_15_8_MASK 0xff
                #define CMD_CRC_CHECK_ARG_CRC_CRC_23_16_MASK 0xff
                #define CMD_CRC_CHECK_ARG_CRC_CRC_31_24_MASK 0xff

/* CRC_CHECK REPLY */
        /* macros for entire REPLY RESULT access of type uint8_t */
        #define CMD_CRC_CHECK_REPLY_RESULT_TYPE uint8_t
        #define CMD_CRC_CHECK_REPLY_RESULT_SIZE 8
        #define CMD_CRC_CHECK_REPLY_RESULT_MASK 0xff
        #define CMD_CRC_CHECK_REPLY_RESULT_MSB 7
        #define CMD_CRC_CHECK_REPLY_RESULT_LSB 0
        #define CMD_CRC_CHECK_REPLY_RESULT_INDEX 1
        #define CMD_CRC_CHECK_REPLY_RESULT_var() ()
        #define CMD_CRC_CHECK_REPLY_RESULT_value() ((uint8_t)CMD_CRC_CHECK_REPLY_RESULT_var())
        #define CMD_CRC_CHECK_REPLY_RESULT_write_u8(x) (CMD_CRC_CHECK_REPLY_RESULT_var() = (x))
                /* macros for field RESULT access */
                #define CMD_CRC_CHECK_REPLY_RESULT_RESULT_TYPE uint16_t
                #define CMD_CRC_CHECK_REPLY_RESULT_RESULT_SIZE 1
                #define CMD_CRC_CHECK_REPLY_RESULT_RESULT_INDEX 1
                #define CMD_CRC_CHECK_REPLY_RESULT_RESULT_PARAM_MSB 7
                #define CMD_CRC_CHECK_REPLY_RESULT_RESULT_PARAM_LSB 7
                #define CMD_CRC_CHECK_REPLY_RESULT_RESULT_MASK 0x80
                #define CMD_CRC_CHECK_REPLY_RESULT_RESULT_BYTE_MSB 7
                #define CMD_CRC_CHECK_REPLY_RESULT_RESULT_BYTE_LSB 7
                #define CMD_CRC_CHECK_REPLY_RESULT_RESULT_BIT 0x80
                #define CMD_CRC_CHECK_REPLY_RESULT_RESULT_TRUE_BIT 0x80
                #define CMD_CRC_CHECK_REPLY_RESULT_RESULT_FALSE_BIT 0x00
                #define CMD_CRC_CHECK_REPLY_RESULT_RESULT_write_bitfield(x) (CMD_CRC_CHECK_REPLY_RESULT_var() = ((CMD_CRC_CHECK_REPLY_RESULT_var() & ~0x80) | (((x) << 7) & 0x80)))
                #define CMD_CRC_CHECK_REPLY_RESULT_RESULT_ENUM_FAIL 0
                #define CMD_CRC_CHECK_REPLY_RESULT_RESULT_ENUM_SUCCESS 1

        /* macros for entire REPLY CALC access of type uint32_t */
        #define CMD_CRC_CHECK_REPLY_CALC_TYPE uint32_t
        #define CMD_CRC_CHECK_REPLY_CALC_SIZE 32
        #define CMD_CRC_CHECK_REPLY_CALC_MASK 0xffffffff
        #define CMD_CRC_CHECK_REPLY_CALC_MSB 31
        #define CMD_CRC_CHECK_REPLY_CALC_LSB 0
        #define CMD_CRC_CHECK_REPLY_CALC_INDEX 4
        #define CMD_CRC_CHECK_REPLY_CALC_var() ()
        #define CMD_CRC_CHECK_REPLY_CALC_value() ((uint32_t)CMD_CRC_CHECK_REPLY_CALC_var())
        #define CMD_CRC_CHECK_REPLY_CALC_write_u32(x) (CMD_CRC_CHECK_REPLY_CALC_var() = (x))
                /* macros for field CALC access */
                #define CMD_CRC_CHECK_REPLY_CALC_CALC_TYPE uint32_t
                #define CMD_CRC_CHECK_REPLY_CALC_CALC_SIZE 32
                #define CMD_CRC_CHECK_REPLY_CALC_CALC_INDEX 4
                #define CMD_CRC_CHECK_REPLY_CALC_CALC_PARAM_MSB 31
                #define CMD_CRC_CHECK_REPLY_CALC_CALC_PARAM_LSB 0
                #define CMD_CRC_CHECK_REPLY_CALC_CALC_MASK 0xffffffff
                #define CMD_CRC_CHECK_REPLY_CALC_CALC_BYTE_MSB 31
                #define CMD_CRC_CHECK_REPLY_CALC_CALC_BYTE_LSB 0
                #define CMD_CRC_CHECK_REPLY_CALC_CALC_write_u32(x) (CMD_CRC_CHECK_REPLY_CALC_var() = ((x)))
                #define CMD_CRC_CHECK_REPLY_CALC_CALC_7_0_MASK 0xff
                #define CMD_CRC_CHECK_REPLY_CALC_CALC_15_8_MASK 0xff
                #define CMD_CRC_CHECK_REPLY_CALC_CALC_23_16_MASK 0xff
                #define CMD_CRC_CHECK_REPLY_CALC_CALC_31_24_MASK 0xff

#define CMD_RESTART 0xf0
/* RESTART ARGS */
        /* macros for entire ARG OPTIONS access of type uint8_t */
        #define CMD_RESTART_ARG_OPTIONS_TYPE uint8_t
        #define CMD_RESTART_ARG_OPTIONS_SIZE 8
        #define CMD_RESTART_ARG_OPTIONS_MASK 0xff
        #define CMD_RESTART_ARG_OPTIONS_MSB 7
        #define CMD_RESTART_ARG_OPTIONS_LSB 0
        #define CMD_RESTART_ARG_OPTIONS_INDEX 1
        #define CMD_RESTART_ARG_OPTIONS_var() ()
        #define CMD_RESTART_ARG_OPTIONS_value() ((uint8_t)CMD_RESTART_ARG_OPTIONS_var())
                /* macros for field POR access */
                #define CMD_RESTART_ARG_OPTIONS_POR_TYPE uint16_t
                #define CMD_RESTART_ARG_OPTIONS_POR_SIZE 1
                #define CMD_RESTART_ARG_OPTIONS_POR_INDEX 1
                #define CMD_RESTART_ARG_OPTIONS_POR_PARAM_MSB 7
                #define CMD_RESTART_ARG_OPTIONS_POR_PARAM_LSB 7
                #define CMD_RESTART_ARG_OPTIONS_POR_MASK 0x80
                #define CMD_RESTART_ARG_OPTIONS_POR_BYTE_MSB 7
                #define CMD_RESTART_ARG_OPTIONS_POR_BYTE_LSB 7
                #define CMD_RESTART_ARG_OPTIONS_POR_BIT 0x80
                #define CMD_RESTART_ARG_OPTIONS_POR_TRUE_BIT 0x80
                #define CMD_RESTART_ARG_OPTIONS_POR_FALSE_BIT 0x00
                #define CMD_RESTART_ARG_OPTIONS_POR_is_true() (CMD_RESTART_ARG_OPTIONS_var() & 0x80)
                #define CMD_RESTART_ARG_OPTIONS_POR_value() (((CMD_RESTART_ARG_OPTIONS_var() & 0x80) >> 7))
                #define CMD_RESTART_ARG_OPTIONS_POR_ENUM_HARD 0
                #define CMD_RESTART_ARG_OPTIONS_POR_ENUM_POR 1

                /* macros for field RAM access */
                #define CMD_RESTART_ARG_OPTIONS_RAM_TYPE uint16_t
                #define CMD_RESTART_ARG_OPTIONS_RAM_SIZE 1
                #define CMD_RESTART_ARG_OPTIONS_RAM_INDEX 1
                #define CMD_RESTART_ARG_OPTIONS_RAM_PARAM_MSB 6
                #define CMD_RESTART_ARG_OPTIONS_RAM_PARAM_LSB 6
                #define CMD_RESTART_ARG_OPTIONS_RAM_MASK 0x40
                #define CMD_RESTART_ARG_OPTIONS_RAM_BYTE_MSB 6
                #define CMD_RESTART_ARG_OPTIONS_RAM_BYTE_LSB 6
                #define CMD_RESTART_ARG_OPTIONS_RAM_BIT 0x40
                #define CMD_RESTART_ARG_OPTIONS_RAM_TRUE_BIT 0x40
                #define CMD_RESTART_ARG_OPTIONS_RAM_FALSE_BIT 0x00
                #define CMD_RESTART_ARG_OPTIONS_RAM_is_true() (CMD_RESTART_ARG_OPTIONS_var() & 0x40)
                #define CMD_RESTART_ARG_OPTIONS_RAM_value() (((CMD_RESTART_ARG_OPTIONS_var() & 0x40) >> 6))
                #define CMD_RESTART_ARG_OPTIONS_RAM_ENUM_ROM 0
                #define CMD_RESTART_ARG_OPTIONS_RAM_ENUM_RAM 1

                /* macros for field CLKS access */
                #define CMD_RESTART_ARG_OPTIONS_CLKS_TYPE uint16_t
                #define CMD_RESTART_ARG_OPTIONS_CLKS_SIZE 2
                #define CMD_RESTART_ARG_OPTIONS_CLKS_INDEX 1
                #define CMD_RESTART_ARG_OPTIONS_CLKS_PARAM_MSB 2
                #define CMD_RESTART_ARG_OPTIONS_CLKS_PARAM_LSB 1
                #define CMD_RESTART_ARG_OPTIONS_CLKS_MASK 0x06
                #define CMD_RESTART_ARG_OPTIONS_CLKS_BYTE_MSB 2
                #define CMD_RESTART_ARG_OPTIONS_CLKS_BYTE_LSB 1
                #define CMD_RESTART_ARG_OPTIONS_CLKS_is_true() (CMD_RESTART_ARG_OPTIONS_var() & 0x06)
                #define CMD_RESTART_ARG_OPTIONS_CLKS_value() (((CMD_RESTART_ARG_OPTIONS_var() & 0x06) >> 1))
                #define CMD_RESTART_ARG_OPTIONS_CLKS_ENUM_LOW 0
                #define CMD_RESTART_ARG_OPTIONS_CLKS_ENUM_FAST 1
                #define CMD_RESTART_ARG_OPTIONS_CLKS_ENUM_ON 2

                /* macros for field WAIT access */
                #define CMD_RESTART_ARG_OPTIONS_WAIT_TYPE uint16_t
                #define CMD_RESTART_ARG_OPTIONS_WAIT_SIZE 1
                #define CMD_RESTART_ARG_OPTIONS_WAIT_INDEX 1
                #define CMD_RESTART_ARG_OPTIONS_WAIT_PARAM_MSB 0
                #define CMD_RESTART_ARG_OPTIONS_WAIT_PARAM_LSB 0
                #define CMD_RESTART_ARG_OPTIONS_WAIT_MASK 0x01
                #define CMD_RESTART_ARG_OPTIONS_WAIT_BYTE_MSB 0
                #define CMD_RESTART_ARG_OPTIONS_WAIT_BYTE_LSB 0
                #define CMD_RESTART_ARG_OPTIONS_WAIT_BIT 0x01
                #define CMD_RESTART_ARG_OPTIONS_WAIT_TRUE_BIT 0x01
                #define CMD_RESTART_ARG_OPTIONS_WAIT_FALSE_BIT 0x00
                #define CMD_RESTART_ARG_OPTIONS_WAIT_is_true() (CMD_RESTART_ARG_OPTIONS_var() & 0x01)
                #define CMD_RESTART_ARG_OPTIONS_WAIT_value() (((CMD_RESTART_ARG_OPTIONS_var() & 0x01)))
                #define CMD_RESTART_ARG_OPTIONS_WAIT_ENUM_BOOT 0
                #define CMD_RESTART_ARG_OPTIONS_WAIT_ENUM_WAIT 1

/* RESTART REPLY */
/* status_cmds commands */

#define CMD_APP_INFO 0x10
/* APP_INFO ARGS */
/* APP_INFO REPLY */
        /* macros for entire REPLY A_MAJOR access of type uint8_t */
        #define CMD_APP_INFO_REPLY_A_MAJOR_TYPE uint8_t
        #define CMD_APP_INFO_REPLY_A_MAJOR_SIZE 8
        #define CMD_APP_INFO_REPLY_A_MAJOR_MASK 0xff
        #define CMD_APP_INFO_REPLY_A_MAJOR_MSB 7
        #define CMD_APP_INFO_REPLY_A_MAJOR_LSB 0
        #define CMD_APP_INFO_REPLY_A_MAJOR_INDEX 1
        #define CMD_APP_INFO_REPLY_A_MAJOR_var() ()
        #define CMD_APP_INFO_REPLY_A_MAJOR_value() ((uint8_t)CMD_APP_INFO_REPLY_A_MAJOR_var())
        #define CMD_APP_INFO_REPLY_A_MAJOR_write_u8(x) (CMD_APP_INFO_REPLY_A_MAJOR_var() = (x))
                /* macros for field APP_MAJOR access */
                #define CMD_APP_INFO_REPLY_A_MAJOR_APP_MAJOR_TYPE uint8_t
                #define CMD_APP_INFO_REPLY_A_MAJOR_APP_MAJOR_SIZE 8
                #define CMD_APP_INFO_REPLY_A_MAJOR_APP_MAJOR_INDEX 1
                #define CMD_APP_INFO_REPLY_A_MAJOR_APP_MAJOR_MIN 0x0
                #define CMD_APP_INFO_REPLY_A_MAJOR_APP_MAJOR_MAX 0xff
                #define CMD_APP_INFO_REPLY_A_MAJOR_APP_MAJOR_PARAM_MSB 7
                #define CMD_APP_INFO_REPLY_A_MAJOR_APP_MAJOR_PARAM_LSB 0
                #define CMD_APP_INFO_REPLY_A_MAJOR_APP_MAJOR_MASK 0xff
                #define CMD_APP_INFO_REPLY_A_MAJOR_APP_MAJOR_BYTE_MSB 7
                #define CMD_APP_INFO_REPLY_A_MAJOR_APP_MAJOR_BYTE_LSB 0
                #define CMD_APP_INFO_REPLY_A_MAJOR_APP_MAJOR_write_u8(x) (CMD_APP_INFO_REPLY_A_MAJOR_var() = ((x)))

        /* macros for entire REPLY A_MINOR access of type uint8_t */
        #define CMD_APP_INFO_REPLY_A_MINOR_TYPE uint8_t
        #define CMD_APP_INFO_REPLY_A_MINOR_SIZE 8
        #define CMD_APP_INFO_REPLY_A_MINOR_MASK 0xff
        #define CMD_APP_INFO_REPLY_A_MINOR_MSB 7
        #define CMD_APP_INFO_REPLY_A_MINOR_LSB 0
        #define CMD_APP_INFO_REPLY_A_MINOR_INDEX 2
        #define CMD_APP_INFO_REPLY_A_MINOR_var() ()
        #define CMD_APP_INFO_REPLY_A_MINOR_value() ((uint8_t)CMD_APP_INFO_REPLY_A_MINOR_var())
        #define CMD_APP_INFO_REPLY_A_MINOR_write_u8(x) (CMD_APP_INFO_REPLY_A_MINOR_var() = (x))
                /* macros for field APP_MINOR access */
                #define CMD_APP_INFO_REPLY_A_MINOR_APP_MINOR_TYPE uint8_t
                #define CMD_APP_INFO_REPLY_A_MINOR_APP_MINOR_SIZE 8
                #define CMD_APP_INFO_REPLY_A_MINOR_APP_MINOR_INDEX 2
                #define CMD_APP_INFO_REPLY_A_MINOR_APP_MINOR_MIN 0x0
                #define CMD_APP_INFO_REPLY_A_MINOR_APP_MINOR_MAX 0xff
                #define CMD_APP_INFO_REPLY_A_MINOR_APP_MINOR_PARAM_MSB 7
                #define CMD_APP_INFO_REPLY_A_MINOR_APP_MINOR_PARAM_LSB 0
                #define CMD_APP_INFO_REPLY_A_MINOR_APP_MINOR_MASK 0xff
                #define CMD_APP_INFO_REPLY_A_MINOR_APP_MINOR_BYTE_MSB 7
                #define CMD_APP_INFO_REPLY_A_MINOR_APP_MINOR_BYTE_LSB 0
                #define CMD_APP_INFO_REPLY_A_MINOR_APP_MINOR_write_u8(x) (CMD_APP_INFO_REPLY_A_MINOR_var() = ((x)))

        /* macros for entire REPLY A_BRANCH access of type uint8_t */
        #define CMD_APP_INFO_REPLY_A_BRANCH_TYPE uint8_t
        #define CMD_APP_INFO_REPLY_A_BRANCH_SIZE 8
        #define CMD_APP_INFO_REPLY_A_BRANCH_MASK 0xff
        #define CMD_APP_INFO_REPLY_A_BRANCH_MSB 7
        #define CMD_APP_INFO_REPLY_A_BRANCH_LSB 0
        #define CMD_APP_INFO_REPLY_A_BRANCH_INDEX 3
        #define CMD_APP_INFO_REPLY_A_BRANCH_var() ()
        #define CMD_APP_INFO_REPLY_A_BRANCH_value() ((uint8_t)CMD_APP_INFO_REPLY_A_BRANCH_var())
        #define CMD_APP_INFO_REPLY_A_BRANCH_write_u8(x) (CMD_APP_INFO_REPLY_A_BRANCH_var() = (x))
                /* macros for field APP_BRANCH access */
                #define CMD_APP_INFO_REPLY_A_BRANCH_APP_BRANCH_TYPE uint8_t
                #define CMD_APP_INFO_REPLY_A_BRANCH_APP_BRANCH_SIZE 8
                #define CMD_APP_INFO_REPLY_A_BRANCH_APP_BRANCH_INDEX 3
                #define CMD_APP_INFO_REPLY_A_BRANCH_APP_BRANCH_MIN 0x0
                #define CMD_APP_INFO_REPLY_A_BRANCH_APP_BRANCH_MAX 0xff
                #define CMD_APP_INFO_REPLY_A_BRANCH_APP_BRANCH_PARAM_MSB 7
                #define CMD_APP_INFO_REPLY_A_BRANCH_APP_BRANCH_PARAM_LSB 0
                #define CMD_APP_INFO_REPLY_A_BRANCH_APP_BRANCH_MASK 0xff
                #define CMD_APP_INFO_REPLY_A_BRANCH_APP_BRANCH_BYTE_MSB 7
                #define CMD_APP_INFO_REPLY_A_BRANCH_APP_BRANCH_BYTE_LSB 0
                #define CMD_APP_INFO_REPLY_A_BRANCH_APP_BRANCH_write_u8(x) (CMD_APP_INFO_REPLY_A_BRANCH_var() = ((x)))

        /* macros for entire REPLY A_BUILD access of type uint16_t */
        #define CMD_APP_INFO_REPLY_A_BUILD_TYPE uint16_t
        #define CMD_APP_INFO_REPLY_A_BUILD_SIZE 16
        #define CMD_APP_INFO_REPLY_A_BUILD_MASK 0xffff
        #define CMD_APP_INFO_REPLY_A_BUILD_MSB 15
        #define CMD_APP_INFO_REPLY_A_BUILD_LSB 0
        #define CMD_APP_INFO_REPLY_A_BUILD_INDEX 4
        #define CMD_APP_INFO_REPLY_A_BUILD_var() ()
        #define CMD_APP_INFO_REPLY_A_BUILD_value() ((uint16_t)CMD_APP_INFO_REPLY_A_BUILD_var())
        #define CMD_APP_INFO_REPLY_A_BUILD_write_u16(x) (CMD_APP_INFO_REPLY_A_BUILD_var() = (x))
                /* macros for field APP_BUILD access */
                #define CMD_APP_INFO_REPLY_A_BUILD_APP_BUILD_TYPE uint16_t
                #define CMD_APP_INFO_REPLY_A_BUILD_APP_BUILD_SIZE 16
                #define CMD_APP_INFO_REPLY_A_BUILD_APP_BUILD_INDEX 4
                #define CMD_APP_INFO_REPLY_A_BUILD_APP_BUILD_PARAM_MSB 15
                #define CMD_APP_INFO_REPLY_A_BUILD_APP_BUILD_PARAM_LSB 0
                #define CMD_APP_INFO_REPLY_A_BUILD_APP_BUILD_MASK 0xffff
                #define CMD_APP_INFO_REPLY_A_BUILD_APP_BUILD_BYTE_MSB 15
                #define CMD_APP_INFO_REPLY_A_BUILD_APP_BUILD_BYTE_LSB 0
                #define CMD_APP_INFO_REPLY_A_BUILD_APP_BUILD_write_u16(x) (CMD_APP_INFO_REPLY_A_BUILD_var() = ((x)))
                #define CMD_APP_INFO_REPLY_A_BUILD_APP_BUILD_7_0_MASK 0xff
                #define CMD_APP_INFO_REPLY_A_BUILD_APP_BUILD_15_8_MASK 0xff

        /* macros for entire REPLY P_MAJOR access of type uint8_t */
        #define CMD_APP_INFO_REPLY_P_MAJOR_TYPE uint8_t
        #define CMD_APP_INFO_REPLY_P_MAJOR_SIZE 8
        #define CMD_APP_INFO_REPLY_P_MAJOR_MASK 0xff
        #define CMD_APP_INFO_REPLY_P_MAJOR_MSB 7
        #define CMD_APP_INFO_REPLY_P_MAJOR_LSB 0
        #define CMD_APP_INFO_REPLY_P_MAJOR_INDEX 6
        #define CMD_APP_INFO_REPLY_P_MAJOR_var() ()
        #define CMD_APP_INFO_REPLY_P_MAJOR_value() ((uint8_t)CMD_APP_INFO_REPLY_P_MAJOR_var())
        #define CMD_APP_INFO_REPLY_P_MAJOR_write_u8(x) (CMD_APP_INFO_REPLY_P_MAJOR_var() = (x))
                /* macros for field PLANNER_MAJOR access */
                #define CMD_APP_INFO_REPLY_P_MAJOR_PLANNER_MAJOR_TYPE uint8_t
                #define CMD_APP_INFO_REPLY_P_MAJOR_PLANNER_MAJOR_SIZE 8
                #define CMD_APP_INFO_REPLY_P_MAJOR_PLANNER_MAJOR_INDEX 6
                #define CMD_APP_INFO_REPLY_P_MAJOR_PLANNER_MAJOR_MIN 0x0
                #define CMD_APP_INFO_REPLY_P_MAJOR_PLANNER_MAJOR_MAX 0xff
                #define CMD_APP_INFO_REPLY_P_MAJOR_PLANNER_MAJOR_PARAM_MSB 7
                #define CMD_APP_INFO_REPLY_P_MAJOR_PLANNER_MAJOR_PARAM_LSB 0
                #define CMD_APP_INFO_REPLY_P_MAJOR_PLANNER_MAJOR_MASK 0xff
                #define CMD_APP_INFO_REPLY_P_MAJOR_PLANNER_MAJOR_BYTE_MSB 7
                #define CMD_APP_INFO_REPLY_P_MAJOR_PLANNER_MAJOR_BYTE_LSB 0
                #define CMD_APP_INFO_REPLY_P_MAJOR_PLANNER_MAJOR_write_u8(x) (CMD_APP_INFO_REPLY_P_MAJOR_var() = ((x)))

        /* macros for entire REPLY P_MINOR access of type uint8_t */
        #define CMD_APP_INFO_REPLY_P_MINOR_TYPE uint8_t
        #define CMD_APP_INFO_REPLY_P_MINOR_SIZE 8
        #define CMD_APP_INFO_REPLY_P_MINOR_MASK 0xff
        #define CMD_APP_INFO_REPLY_P_MINOR_MSB 7
        #define CMD_APP_INFO_REPLY_P_MINOR_LSB 0
        #define CMD_APP_INFO_REPLY_P_MINOR_INDEX 7
        #define CMD_APP_INFO_REPLY_P_MINOR_var() ()
        #define CMD_APP_INFO_REPLY_P_MINOR_value() ((uint8_t)CMD_APP_INFO_REPLY_P_MINOR_var())
        #define CMD_APP_INFO_REPLY_P_MINOR_write_u8(x) (CMD_APP_INFO_REPLY_P_MINOR_var() = (x))
                /* macros for field PLANNER_MINOR access */
                #define CMD_APP_INFO_REPLY_P_MINOR_PLANNER_MINOR_TYPE uint8_t
                #define CMD_APP_INFO_REPLY_P_MINOR_PLANNER_MINOR_SIZE 8
                #define CMD_APP_INFO_REPLY_P_MINOR_PLANNER_MINOR_INDEX 7
                #define CMD_APP_INFO_REPLY_P_MINOR_PLANNER_MINOR_MIN 0x0
                #define CMD_APP_INFO_REPLY_P_MINOR_PLANNER_MINOR_MAX 0xff
                #define CMD_APP_INFO_REPLY_P_MINOR_PLANNER_MINOR_PARAM_MSB 7
                #define CMD_APP_INFO_REPLY_P_MINOR_PLANNER_MINOR_PARAM_LSB 0
                #define CMD_APP_INFO_REPLY_P_MINOR_PLANNER_MINOR_MASK 0xff
                #define CMD_APP_INFO_REPLY_P_MINOR_PLANNER_MINOR_BYTE_MSB 7
                #define CMD_APP_INFO_REPLY_P_MINOR_PLANNER_MINOR_BYTE_LSB 0
                #define CMD_APP_INFO_REPLY_P_MINOR_PLANNER_MINOR_write_u8(x) (CMD_APP_INFO_REPLY_P_MINOR_var() = ((x)))

        /* macros for entire REPLY P_BRANCH access of type uint8_t */
        #define CMD_APP_INFO_REPLY_P_BRANCH_TYPE uint8_t
        #define CMD_APP_INFO_REPLY_P_BRANCH_SIZE 8
        #define CMD_APP_INFO_REPLY_P_BRANCH_MASK 0xff
        #define CMD_APP_INFO_REPLY_P_BRANCH_MSB 7
        #define CMD_APP_INFO_REPLY_P_BRANCH_LSB 0
        #define CMD_APP_INFO_REPLY_P_BRANCH_INDEX 8
        #define CMD_APP_INFO_REPLY_P_BRANCH_var() ()
        #define CMD_APP_INFO_REPLY_P_BRANCH_value() ((uint8_t)CMD_APP_INFO_REPLY_P_BRANCH_var())
        #define CMD_APP_INFO_REPLY_P_BRANCH_write_u8(x) (CMD_APP_INFO_REPLY_P_BRANCH_var() = (x))
                /* macros for field PLANNER_BRANCH access */
                #define CMD_APP_INFO_REPLY_P_BRANCH_PLANNER_BRANCH_TYPE uint8_t
                #define CMD_APP_INFO_REPLY_P_BRANCH_PLANNER_BRANCH_SIZE 8
                #define CMD_APP_INFO_REPLY_P_BRANCH_PLANNER_BRANCH_INDEX 8
                #define CMD_APP_INFO_REPLY_P_BRANCH_PLANNER_BRANCH_MIN 0x0
                #define CMD_APP_INFO_REPLY_P_BRANCH_PLANNER_BRANCH_MAX 0xff
                #define CMD_APP_INFO_REPLY_P_BRANCH_PLANNER_BRANCH_PARAM_MSB 7
                #define CMD_APP_INFO_REPLY_P_BRANCH_PLANNER_BRANCH_PARAM_LSB 0
                #define CMD_APP_INFO_REPLY_P_BRANCH_PLANNER_BRANCH_MASK 0xff
                #define CMD_APP_INFO_REPLY_P_BRANCH_PLANNER_BRANCH_BYTE_MSB 7
                #define CMD_APP_INFO_REPLY_P_BRANCH_PLANNER_BRANCH_BYTE_LSB 0
                #define CMD_APP_INFO_REPLY_P_BRANCH_PLANNER_BRANCH_write_u8(x) (CMD_APP_INFO_REPLY_P_BRANCH_var() = ((x)))

        /* macros for entire REPLY P_BUILD access of type uint16_t */
        #define CMD_APP_INFO_REPLY_P_BUILD_TYPE uint16_t
        #define CMD_APP_INFO_REPLY_P_BUILD_SIZE 16
        #define CMD_APP_INFO_REPLY_P_BUILD_MASK 0xffff
        #define CMD_APP_INFO_REPLY_P_BUILD_MSB 15
        #define CMD_APP_INFO_REPLY_P_BUILD_LSB 0
        #define CMD_APP_INFO_REPLY_P_BUILD_INDEX 9
        #define CMD_APP_INFO_REPLY_P_BUILD_var() ()
        #define CMD_APP_INFO_REPLY_P_BUILD_value() ((uint16_t)CMD_APP_INFO_REPLY_P_BUILD_var())
        #define CMD_APP_INFO_REPLY_P_BUILD_write_u16(x) (CMD_APP_INFO_REPLY_P_BUILD_var() = (x))
                /* macros for field PLANNER_BUILD access */
                #define CMD_APP_INFO_REPLY_P_BUILD_PLANNER_BUILD_TYPE uint16_t
                #define CMD_APP_INFO_REPLY_P_BUILD_PLANNER_BUILD_SIZE 16
                #define CMD_APP_INFO_REPLY_P_BUILD_PLANNER_BUILD_INDEX 9
                #define CMD_APP_INFO_REPLY_P_BUILD_PLANNER_BUILD_PARAM_MSB 15
                #define CMD_APP_INFO_REPLY_P_BUILD_PLANNER_BUILD_PARAM_LSB 0
                #define CMD_APP_INFO_REPLY_P_BUILD_PLANNER_BUILD_MASK 0xffff
                #define CMD_APP_INFO_REPLY_P_BUILD_PLANNER_BUILD_BYTE_MSB 15
                #define CMD_APP_INFO_REPLY_P_BUILD_PLANNER_BUILD_BYTE_LSB 0
                #define CMD_APP_INFO_REPLY_P_BUILD_PLANNER_BUILD_write_u16(x) (CMD_APP_INFO_REPLY_P_BUILD_var() = ((x)))
                #define CMD_APP_INFO_REPLY_P_BUILD_PLANNER_BUILD_7_0_MASK 0xff
                #define CMD_APP_INFO_REPLY_P_BUILD_PLANNER_BUILD_15_8_MASK 0xff

        /* macros for entire REPLY DESIGN_ID access of type uint8_t */
        #define CMD_APP_INFO_REPLY_DESIGN_ID_TYPE uint8_t
        #define CMD_APP_INFO_REPLY_DESIGN_ID_SIZE 8
        #define CMD_APP_INFO_REPLY_DESIGN_ID_MASK 0xff
        #define CMD_APP_INFO_REPLY_DESIGN_ID_MSB 7
        #define CMD_APP_INFO_REPLY_DESIGN_ID_LSB 0
        #define CMD_APP_INFO_REPLY_DESIGN_ID_INDEX 11
        #define CMD_APP_INFO_REPLY_DESIGN_ID_ARRAY_LEN 8
        #define CMD_APP_INFO_REPLY_DESIGN_ID_var(i) ([(i)])
        #define CMD_APP_INFO_REPLY_DESIGN_ID_value(i) ((uint8_t)CMD_APP_INFO_REPLY_DESIGN_ID_var(i))
        #define CMD_APP_INFO_REPLY_DESIGN_ID_write_u8(i, x) (CMD_APP_INFO_REPLY_DESIGN_ID_var(i) = (x))
                /* macros for field DESIGN_ID access */
                #define CMD_APP_INFO_REPLY_DESIGN_ID_DESIGN_ID_TYPE uint8_t
                #define CMD_APP_INFO_REPLY_DESIGN_ID_DESIGN_ID_SIZE 8
                #define CMD_APP_INFO_REPLY_DESIGN_ID_DESIGN_ID_INDEX 11
                #define CMD_APP_INFO_REPLY_DESIGN_ID_DESIGN_ID_PARAM_MSB 7
                #define CMD_APP_INFO_REPLY_DESIGN_ID_DESIGN_ID_PARAM_LSB 0
                #define CMD_APP_INFO_REPLY_DESIGN_ID_DESIGN_ID_MASK 0xff
                #define CMD_APP_INFO_REPLY_DESIGN_ID_DESIGN_ID_BYTE_MSB 7
                #define CMD_APP_INFO_REPLY_DESIGN_ID_DESIGN_ID_BYTE_LSB 0
                #define CMD_APP_INFO_REPLY_DESIGN_ID_DESIGN_ID_write_u8(i, x) (CMD_APP_INFO_REPLY_DESIGN_ID_var(i) = ((CMD_APP_INFO_REPLY_DESIGN_ID_var(i) & ~0xff) | (((x)) & 0xff)))

        /* macros for entire REPLY CBPRO access of type uint32_t */
        #define CMD_APP_INFO_REPLY_CBPRO_TYPE uint32_t
        #define CMD_APP_INFO_REPLY_CBPRO_SIZE 32
        #define CMD_APP_INFO_REPLY_CBPRO_MASK 0xffffffff
        #define CMD_APP_INFO_REPLY_CBPRO_MSB 31
        #define CMD_APP_INFO_REPLY_CBPRO_LSB 0
        #define CMD_APP_INFO_REPLY_CBPRO_INDEX 19
        #define CMD_APP_INFO_REPLY_CBPRO_var() ()
        #define CMD_APP_INFO_REPLY_CBPRO_value() ((uint32_t)CMD_APP_INFO_REPLY_CBPRO_var())
        #define CMD_APP_INFO_REPLY_CBPRO_write_u32(x) (CMD_APP_INFO_REPLY_CBPRO_var() = (x))
                /* macros for field CBPRO_REV_MAJOR access */
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_MAJOR_TYPE uint8_t
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_MAJOR_SIZE 8
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_MAJOR_INDEX 19
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_MAJOR_MIN 0x0
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_MAJOR_MAX 0xff
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_MAJOR_PARAM_MSB 7
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_MAJOR_PARAM_LSB 0
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_MAJOR_MASK 0x000000ff
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_MAJOR_BYTE_MSB 7
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_MAJOR_BYTE_LSB 0
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_MAJOR_write_bitfield(x) (CMD_APP_INFO_REPLY_CBPRO_var() = ((CMD_APP_INFO_REPLY_CBPRO_var() & ~0x000000ff) | (((x)) & 0x000000ff)))

                /* macros for field CBPRO_REV_MINOR access */
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_MINOR_TYPE uint8_t
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_MINOR_SIZE 8
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_MINOR_INDEX 20
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_MINOR_MIN 0x0
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_MINOR_MAX 0xff
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_MINOR_PARAM_MSB 15
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_MINOR_PARAM_LSB 8
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_MINOR_MASK 0x0000ff00
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_MINOR_BYTE_MSB 7
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_MINOR_BYTE_LSB 0
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_MINOR_write_bitfield(x) (CMD_APP_INFO_REPLY_CBPRO_var() = ((CMD_APP_INFO_REPLY_CBPRO_var() & ~0x0000ff00) | (((x) << 8) & 0x0000ff00)))

                /* macros for field CBPRO_REV_REVISION access */
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_REVISION_TYPE uint8_t
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_REVISION_SIZE 8
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_REVISION_INDEX 21
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_REVISION_MIN 0x0
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_REVISION_MAX 0xff
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_REVISION_PARAM_MSB 23
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_REVISION_PARAM_LSB 16
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_REVISION_MASK 0x00ff0000
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_REVISION_BYTE_MSB 7
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_REVISION_BYTE_LSB 0
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_REVISION_write_bitfield(x) (CMD_APP_INFO_REPLY_CBPRO_var() = ((CMD_APP_INFO_REPLY_CBPRO_var() & ~0x00ff0000) | (((x) << 16) & 0x00ff0000)))

                /* macros for field CBPRO_REV_SPECIAL access */
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_SPECIAL_TYPE uint8_t
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_SPECIAL_SIZE 8
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_SPECIAL_INDEX 22
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_SPECIAL_MIN 0x0
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_SPECIAL_MAX 0xff
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_SPECIAL_PARAM_MSB 31
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_SPECIAL_PARAM_LSB 24
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_SPECIAL_MASK 0xff000000
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_SPECIAL_BYTE_MSB 7
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_SPECIAL_BYTE_LSB 0
                #define CMD_APP_INFO_REPLY_CBPRO_CBPRO_REV_SPECIAL_write_bitfield(x) (CMD_APP_INFO_REPLY_CBPRO_var() = ((CMD_APP_INFO_REPLY_CBPRO_var() & ~0xff000000) | (((x) << 24) & 0xff000000)))

#define CMD_PLL_ACTIVE_REFCLOCK 0x11
/* PLL_ACTIVE_REFCLOCK ARGS */
        /* macros for entire ARG PLLX access of type uint8_t */
        #define CMD_PLL_ACTIVE_REFCLOCK_ARG_PLLX_TYPE uint8_t
        #define CMD_PLL_ACTIVE_REFCLOCK_ARG_PLLX_SIZE 8
        #define CMD_PLL_ACTIVE_REFCLOCK_ARG_PLLX_MASK 0xff
        #define CMD_PLL_ACTIVE_REFCLOCK_ARG_PLLX_MSB 7
        #define CMD_PLL_ACTIVE_REFCLOCK_ARG_PLLX_LSB 0
        #define CMD_PLL_ACTIVE_REFCLOCK_ARG_PLLX_INDEX 1
        #define CMD_PLL_ACTIVE_REFCLOCK_ARG_PLLX_var() ()
        #define CMD_PLL_ACTIVE_REFCLOCK_ARG_PLLX_value() ((uint8_t)CMD_PLL_ACTIVE_REFCLOCK_ARG_PLLX_var())
                /* macros for field PLL access */
                #define CMD_PLL_ACTIVE_REFCLOCK_ARG_PLLX_PLL_TYPE uint16_t
                #define CMD_PLL_ACTIVE_REFCLOCK_ARG_PLLX_PLL_SIZE 8
                #define CMD_PLL_ACTIVE_REFCLOCK_ARG_PLLX_PLL_INDEX 1
                #define CMD_PLL_ACTIVE_REFCLOCK_ARG_PLLX_PLL_PARAM_MSB 7
                #define CMD_PLL_ACTIVE_REFCLOCK_ARG_PLLX_PLL_PARAM_LSB 0
                #define CMD_PLL_ACTIVE_REFCLOCK_ARG_PLLX_PLL_MASK 0xff
                #define CMD_PLL_ACTIVE_REFCLOCK_ARG_PLLX_PLL_BYTE_MSB 7
                #define CMD_PLL_ACTIVE_REFCLOCK_ARG_PLLX_PLL_BYTE_LSB 0
                #define CMD_PLL_ACTIVE_REFCLOCK_ARG_PLLX_PLL_is_true() (CMD_PLL_ACTIVE_REFCLOCK_ARG_PLLX_var())
                #define CMD_PLL_ACTIVE_REFCLOCK_ARG_PLLX_PLL_value() (((CMD_PLL_ACTIVE_REFCLOCK_ARG_PLLX_var())))
                #define CMD_PLL_ACTIVE_REFCLOCK_ARG_PLLX_PLL_ENUM_PLLR 1
                #define CMD_PLL_ACTIVE_REFCLOCK_ARG_PLLX_PLL_ENUM_PLLA 2
                #define CMD_PLL_ACTIVE_REFCLOCK_ARG_PLLX_PLL_ENUM_PLLB 4
                #define CMD_PLL_ACTIVE_REFCLOCK_ARG_PLLX_PLL_ENUM_PPS_PLL 128

/* PLL_ACTIVE_REFCLOCK REPLY */
        /* macros for entire REPLY REFCLOCK access of type uint8_t */
        #define CMD_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_TYPE uint8_t
        #define CMD_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_SIZE 8
        #define CMD_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_MASK 0xff
        #define CMD_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_MSB 7
        #define CMD_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_LSB 0
        #define CMD_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_INDEX 1
        #define CMD_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_var() ()
        #define CMD_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_value() ((uint8_t)CMD_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_var())
        #define CMD_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_write_u8(x) (CMD_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_var() = (x))
                /* macros for field ACTIVE_REFCLOCK access */
                #define CMD_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_ACTIVE_REFCLOCK_TYPE uint16_t
                #define CMD_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_ACTIVE_REFCLOCK_SIZE 8
                #define CMD_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_ACTIVE_REFCLOCK_INDEX 1
                #define CMD_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_ACTIVE_REFCLOCK_PARAM_MSB 7
                #define CMD_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_ACTIVE_REFCLOCK_PARAM_LSB 0
                #define CMD_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_ACTIVE_REFCLOCK_MASK 0xff
                #define CMD_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_ACTIVE_REFCLOCK_BYTE_MSB 7
                #define CMD_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_ACTIVE_REFCLOCK_BYTE_LSB 0
                #define CMD_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_ACTIVE_REFCLOCK_write_u8(x) (CMD_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_var() = ((CMD_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_var() & ~0xff) | (((x)) & 0xff)))
                #define CMD_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_ACTIVE_REFCLOCK_ENUM_IN0 32
                #define CMD_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_ACTIVE_REFCLOCK_ENUM_IN1 34
                #define CMD_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_ACTIVE_REFCLOCK_ENUM_IN2 36
                #define CMD_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_ACTIVE_REFCLOCK_ENUM_IN2B 37
                #define CMD_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_ACTIVE_REFCLOCK_ENUM_IN3 38
                #define CMD_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_ACTIVE_REFCLOCK_ENUM_IN3B 39
                #define CMD_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_ACTIVE_REFCLOCK_ENUM_UNAVAILABLE 255

#define CMD_INPUT_STATUS 0x12
/* INPUT_STATUS ARGS */
        /* macros for entire ARG INPUT_SELECT access of type uint8_t */
        #define CMD_INPUT_STATUS_ARG_INPUT_SELECT_TYPE uint8_t
        #define CMD_INPUT_STATUS_ARG_INPUT_SELECT_SIZE 8
        #define CMD_INPUT_STATUS_ARG_INPUT_SELECT_MASK 0xff
        #define CMD_INPUT_STATUS_ARG_INPUT_SELECT_MSB 7
        #define CMD_INPUT_STATUS_ARG_INPUT_SELECT_LSB 0
        #define CMD_INPUT_STATUS_ARG_INPUT_SELECT_INDEX 1
        #define CMD_INPUT_STATUS_ARG_INPUT_SELECT_var() ()
        #define CMD_INPUT_STATUS_ARG_INPUT_SELECT_value() ((uint8_t)CMD_INPUT_STATUS_ARG_INPUT_SELECT_var())
                /* macros for field INPUT access */
                #define CMD_INPUT_STATUS_ARG_INPUT_SELECT_INPUT_TYPE uint16_t
                #define CMD_INPUT_STATUS_ARG_INPUT_SELECT_INPUT_SIZE 8
                #define CMD_INPUT_STATUS_ARG_INPUT_SELECT_INPUT_INDEX 1
                #define CMD_INPUT_STATUS_ARG_INPUT_SELECT_INPUT_PARAM_MSB 7
                #define CMD_INPUT_STATUS_ARG_INPUT_SELECT_INPUT_PARAM_LSB 0
                #define CMD_INPUT_STATUS_ARG_INPUT_SELECT_INPUT_MASK 0xff
                #define CMD_INPUT_STATUS_ARG_INPUT_SELECT_INPUT_BYTE_MSB 7
                #define CMD_INPUT_STATUS_ARG_INPUT_SELECT_INPUT_BYTE_LSB 0
                #define CMD_INPUT_STATUS_ARG_INPUT_SELECT_INPUT_is_true() (CMD_INPUT_STATUS_ARG_INPUT_SELECT_var())
                #define CMD_INPUT_STATUS_ARG_INPUT_SELECT_INPUT_value() (((CMD_INPUT_STATUS_ARG_INPUT_SELECT_var())))
                #define CMD_INPUT_STATUS_ARG_INPUT_SELECT_INPUT_ENUM_IN0 0
                #define CMD_INPUT_STATUS_ARG_INPUT_SELECT_INPUT_ENUM_IN1 2
                #define CMD_INPUT_STATUS_ARG_INPUT_SELECT_INPUT_ENUM_IN2 4
                #define CMD_INPUT_STATUS_ARG_INPUT_SELECT_INPUT_ENUM_IN2B 5
                #define CMD_INPUT_STATUS_ARG_INPUT_SELECT_INPUT_ENUM_IN3 6
                #define CMD_INPUT_STATUS_ARG_INPUT_SELECT_INPUT_ENUM_IN3B 7

/* INPUT_STATUS REPLY */
        /* macros for entire REPLY INPUT_CLOCK_VALIDATION access of type uint8_t */
        #define CMD_INPUT_STATUS_REPLY_INPUT_CLOCK_VALIDATION_TYPE uint8_t
        #define CMD_INPUT_STATUS_REPLY_INPUT_CLOCK_VALIDATION_SIZE 8
        #define CMD_INPUT_STATUS_REPLY_INPUT_CLOCK_VALIDATION_MASK 0xff
        #define CMD_INPUT_STATUS_REPLY_INPUT_CLOCK_VALIDATION_MSB 7
        #define CMD_INPUT_STATUS_REPLY_INPUT_CLOCK_VALIDATION_LSB 0
        #define CMD_INPUT_STATUS_REPLY_INPUT_CLOCK_VALIDATION_INDEX 1
        #define CMD_INPUT_STATUS_REPLY_INPUT_CLOCK_VALIDATION_var() ()
        #define CMD_INPUT_STATUS_REPLY_INPUT_CLOCK_VALIDATION_value() ((uint8_t)CMD_INPUT_STATUS_REPLY_INPUT_CLOCK_VALIDATION_var())
        #define CMD_INPUT_STATUS_REPLY_INPUT_CLOCK_VALIDATION_write_u8(x) (CMD_INPUT_STATUS_REPLY_INPUT_CLOCK_VALIDATION_var() = (x))
                /* macros for field INPUT_CLOCK_STATUS access */
                #define CMD_INPUT_STATUS_REPLY_INPUT_CLOCK_VALIDATION_INPUT_CLOCK_STATUS_TYPE uint16_t
                #define CMD_INPUT_STATUS_REPLY_INPUT_CLOCK_VALIDATION_INPUT_CLOCK_STATUS_SIZE 2
                #define CMD_INPUT_STATUS_REPLY_INPUT_CLOCK_VALIDATION_INPUT_CLOCK_STATUS_INDEX 1
                #define CMD_INPUT_STATUS_REPLY_INPUT_CLOCK_VALIDATION_INPUT_CLOCK_STATUS_PARAM_MSB 1
                #define CMD_INPUT_STATUS_REPLY_INPUT_CLOCK_VALIDATION_INPUT_CLOCK_STATUS_PARAM_LSB 0
                #define CMD_INPUT_STATUS_REPLY_INPUT_CLOCK_VALIDATION_INPUT_CLOCK_STATUS_MASK 0x03
                #define CMD_INPUT_STATUS_REPLY_INPUT_CLOCK_VALIDATION_INPUT_CLOCK_STATUS_BYTE_MSB 1
                #define CMD_INPUT_STATUS_REPLY_INPUT_CLOCK_VALIDATION_INPUT_CLOCK_STATUS_BYTE_LSB 0
                #define CMD_INPUT_STATUS_REPLY_INPUT_CLOCK_VALIDATION_INPUT_CLOCK_STATUS_write_bitfield(x) (CMD_INPUT_STATUS_REPLY_INPUT_CLOCK_VALIDATION_var() = ((CMD_INPUT_STATUS_REPLY_INPUT_CLOCK_VALIDATION_var() & ~0x03) | (((x)) & 0x03)))
                #define CMD_INPUT_STATUS_REPLY_INPUT_CLOCK_VALIDATION_INPUT_CLOCK_STATUS_ENUM_VALID 0
                #define CMD_INPUT_STATUS_REPLY_INPUT_CLOCK_VALIDATION_INPUT_CLOCK_STATUS_ENUM_PENDING_SHORT_TERM_FAULT 1
                #define CMD_INPUT_STATUS_REPLY_INPUT_CLOCK_VALIDATION_INPUT_CLOCK_STATUS_ENUM_UNDER_VALIDATION 2
                #define CMD_INPUT_STATUS_REPLY_INPUT_CLOCK_VALIDATION_INPUT_CLOCK_STATUS_ENUM_INVALID 3

        /* macros for entire REPLY LOSS_OF_SIGNAL access of type uint8_t */
        #define CMD_INPUT_STATUS_REPLY_LOSS_OF_SIGNAL_TYPE uint8_t
        #define CMD_INPUT_STATUS_REPLY_LOSS_OF_SIGNAL_SIZE 8
        #define CMD_INPUT_STATUS_REPLY_LOSS_OF_SIGNAL_MASK 0xff
        #define CMD_INPUT_STATUS_REPLY_LOSS_OF_SIGNAL_MSB 7
        #define CMD_INPUT_STATUS_REPLY_LOSS_OF_SIGNAL_LSB 0
        #define CMD_INPUT_STATUS_REPLY_LOSS_OF_SIGNAL_INDEX 2
        #define CMD_INPUT_STATUS_REPLY_LOSS_OF_SIGNAL_var() ()
        #define CMD_INPUT_STATUS_REPLY_LOSS_OF_SIGNAL_value() ((uint8_t)CMD_INPUT_STATUS_REPLY_LOSS_OF_SIGNAL_var())
        #define CMD_INPUT_STATUS_REPLY_LOSS_OF_SIGNAL_write_u8(x) (CMD_INPUT_STATUS_REPLY_LOSS_OF_SIGNAL_var() = (x))
                /* macros for field LOSS_OF_SIGNAL_FLAG access */
                #define CMD_INPUT_STATUS_REPLY_LOSS_OF_SIGNAL_LOSS_OF_SIGNAL_FLAG_TYPE uint16_t
                #define CMD_INPUT_STATUS_REPLY_LOSS_OF_SIGNAL_LOSS_OF_SIGNAL_FLAG_SIZE 1
                #define CMD_INPUT_STATUS_REPLY_LOSS_OF_SIGNAL_LOSS_OF_SIGNAL_FLAG_INDEX 2
                #define CMD_INPUT_STATUS_REPLY_LOSS_OF_SIGNAL_LOSS_OF_SIGNAL_FLAG_PARAM_MSB 0
                #define CMD_INPUT_STATUS_REPLY_LOSS_OF_SIGNAL_LOSS_OF_SIGNAL_FLAG_PARAM_LSB 0
                #define CMD_INPUT_STATUS_REPLY_LOSS_OF_SIGNAL_LOSS_OF_SIGNAL_FLAG_MASK 0x01
                #define CMD_INPUT_STATUS_REPLY_LOSS_OF_SIGNAL_LOSS_OF_SIGNAL_FLAG_BYTE_MSB 0
                #define CMD_INPUT_STATUS_REPLY_LOSS_OF_SIGNAL_LOSS_OF_SIGNAL_FLAG_BYTE_LSB 0
                #define CMD_INPUT_STATUS_REPLY_LOSS_OF_SIGNAL_LOSS_OF_SIGNAL_FLAG_BIT 0x01
                #define CMD_INPUT_STATUS_REPLY_LOSS_OF_SIGNAL_LOSS_OF_SIGNAL_FLAG_TRUE_BIT 0x01
                #define CMD_INPUT_STATUS_REPLY_LOSS_OF_SIGNAL_LOSS_OF_SIGNAL_FLAG_FALSE_BIT 0x00
                #define CMD_INPUT_STATUS_REPLY_LOSS_OF_SIGNAL_LOSS_OF_SIGNAL_FLAG_write_bitfield(x) (CMD_INPUT_STATUS_REPLY_LOSS_OF_SIGNAL_var() = ((CMD_INPUT_STATUS_REPLY_LOSS_OF_SIGNAL_var() & ~0x01) | (((x)) & 0x01)))
                #define CMD_INPUT_STATUS_REPLY_LOSS_OF_SIGNAL_LOSS_OF_SIGNAL_FLAG_ENUM_CLEAR 0
                #define CMD_INPUT_STATUS_REPLY_LOSS_OF_SIGNAL_LOSS_OF_SIGNAL_FLAG_ENUM_ASSERT 1

        /* macros for entire REPLY OUT_OF_FREQUENCY access of type uint8_t */
        #define CMD_INPUT_STATUS_REPLY_OUT_OF_FREQUENCY_TYPE uint8_t
        #define CMD_INPUT_STATUS_REPLY_OUT_OF_FREQUENCY_SIZE 8
        #define CMD_INPUT_STATUS_REPLY_OUT_OF_FREQUENCY_MASK 0xff
        #define CMD_INPUT_STATUS_REPLY_OUT_OF_FREQUENCY_MSB 7
        #define CMD_INPUT_STATUS_REPLY_OUT_OF_FREQUENCY_LSB 0
        #define CMD_INPUT_STATUS_REPLY_OUT_OF_FREQUENCY_INDEX 3
        #define CMD_INPUT_STATUS_REPLY_OUT_OF_FREQUENCY_var() ()
        #define CMD_INPUT_STATUS_REPLY_OUT_OF_FREQUENCY_value() ((uint8_t)CMD_INPUT_STATUS_REPLY_OUT_OF_FREQUENCY_var())
        #define CMD_INPUT_STATUS_REPLY_OUT_OF_FREQUENCY_write_u8(x) (CMD_INPUT_STATUS_REPLY_OUT_OF_FREQUENCY_var() = (x))
                /* macros for field OUT_OF_FREQUENCY_FLAG access */
                #define CMD_INPUT_STATUS_REPLY_OUT_OF_FREQUENCY_OUT_OF_FREQUENCY_FLAG_TYPE uint16_t
                #define CMD_INPUT_STATUS_REPLY_OUT_OF_FREQUENCY_OUT_OF_FREQUENCY_FLAG_SIZE 1
                #define CMD_INPUT_STATUS_REPLY_OUT_OF_FREQUENCY_OUT_OF_FREQUENCY_FLAG_INDEX 3
                #define CMD_INPUT_STATUS_REPLY_OUT_OF_FREQUENCY_OUT_OF_FREQUENCY_FLAG_PARAM_MSB 0
                #define CMD_INPUT_STATUS_REPLY_OUT_OF_FREQUENCY_OUT_OF_FREQUENCY_FLAG_PARAM_LSB 0
                #define CMD_INPUT_STATUS_REPLY_OUT_OF_FREQUENCY_OUT_OF_FREQUENCY_FLAG_MASK 0x01
                #define CMD_INPUT_STATUS_REPLY_OUT_OF_FREQUENCY_OUT_OF_FREQUENCY_FLAG_BYTE_MSB 0
                #define CMD_INPUT_STATUS_REPLY_OUT_OF_FREQUENCY_OUT_OF_FREQUENCY_FLAG_BYTE_LSB 0
                #define CMD_INPUT_STATUS_REPLY_OUT_OF_FREQUENCY_OUT_OF_FREQUENCY_FLAG_BIT 0x01
                #define CMD_INPUT_STATUS_REPLY_OUT_OF_FREQUENCY_OUT_OF_FREQUENCY_FLAG_TRUE_BIT 0x01
                #define CMD_INPUT_STATUS_REPLY_OUT_OF_FREQUENCY_OUT_OF_FREQUENCY_FLAG_FALSE_BIT 0x00
                #define CMD_INPUT_STATUS_REPLY_OUT_OF_FREQUENCY_OUT_OF_FREQUENCY_FLAG_write_bitfield(x) (CMD_INPUT_STATUS_REPLY_OUT_OF_FREQUENCY_var() = ((CMD_INPUT_STATUS_REPLY_OUT_OF_FREQUENCY_var() & ~0x01) | (((x)) & 0x01)))
                #define CMD_INPUT_STATUS_REPLY_OUT_OF_FREQUENCY_OUT_OF_FREQUENCY_FLAG_ENUM_CLEAR 0
                #define CMD_INPUT_STATUS_REPLY_OUT_OF_FREQUENCY_OUT_OF_FREQUENCY_FLAG_ENUM_ASSERT 1

        /* macros for entire REPLY PHASE_MONITOR access of type uint8_t */
        #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_TYPE uint8_t
        #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_SIZE 8
        #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_MASK 0xff
        #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_MSB 7
        #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_LSB 0
        #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_INDEX 4
        #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_var() ()
        #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_value() ((uint8_t)CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_var())
        #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_write_u8(x) (CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_var() = (x))
                /* macros for field PHASE_MONITOR_PHASE_ERROR access */
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_PHASE_ERROR_TYPE uint16_t
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_PHASE_ERROR_SIZE 1
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_PHASE_ERROR_INDEX 4
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_PHASE_ERROR_PARAM_MSB 2
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_PHASE_ERROR_PARAM_LSB 2
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_PHASE_ERROR_MASK 0x04
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_PHASE_ERROR_BYTE_MSB 2
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_PHASE_ERROR_BYTE_LSB 2
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_PHASE_ERROR_BIT 0x04
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_PHASE_ERROR_TRUE_BIT 0x04
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_PHASE_ERROR_FALSE_BIT 0x00
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_PHASE_ERROR_write_bitfield(x) (CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_var() = ((CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_var() & ~0x04) | (((x) << 2) & 0x04)))
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_PHASE_ERROR_ENUM_CLEAR 0
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_PHASE_ERROR_ENUM_ASSERT 1

                /* macros for field PHASE_MONITOR_SIGNAL_LATE access */
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_LATE_TYPE uint16_t
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_LATE_SIZE 1
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_LATE_INDEX 4
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_LATE_PARAM_MSB 1
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_LATE_PARAM_LSB 1
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_LATE_MASK 0x02
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_LATE_BYTE_MSB 1
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_LATE_BYTE_LSB 1
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_LATE_BIT 0x02
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_LATE_TRUE_BIT 0x02
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_LATE_FALSE_BIT 0x00
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_LATE_write_bitfield(x) (CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_var() = ((CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_var() & ~0x02) | (((x) << 1) & 0x02)))
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_LATE_ENUM_CLEAR 0
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_LATE_ENUM_ASSERT 1

                /* macros for field PHASE_MONITOR_SIGNAL_EARLY access */
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_EARLY_TYPE uint16_t
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_EARLY_SIZE 1
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_EARLY_INDEX 4
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_EARLY_PARAM_MSB 0
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_EARLY_PARAM_LSB 0
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_EARLY_MASK 0x01
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_EARLY_BYTE_MSB 0
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_EARLY_BYTE_LSB 0
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_EARLY_BIT 0x01
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_EARLY_TRUE_BIT 0x01
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_EARLY_FALSE_BIT 0x00
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_EARLY_write_bitfield(x) (CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_var() = ((CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_var() & ~0x01) | (((x)) & 0x01)))
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_EARLY_ENUM_CLEAR 0
                #define CMD_INPUT_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_EARLY_ENUM_ASSERT 1

#define CMD_PLL_STATUS 0x13
/* PLL_STATUS ARGS */
        /* macros for entire ARG PLL_SELECT access of type uint8_t */
        #define CMD_PLL_STATUS_ARG_PLL_SELECT_TYPE uint8_t
        #define CMD_PLL_STATUS_ARG_PLL_SELECT_SIZE 8
        #define CMD_PLL_STATUS_ARG_PLL_SELECT_MASK 0xff
        #define CMD_PLL_STATUS_ARG_PLL_SELECT_MSB 7
        #define CMD_PLL_STATUS_ARG_PLL_SELECT_LSB 0
        #define CMD_PLL_STATUS_ARG_PLL_SELECT_INDEX 1
        #define CMD_PLL_STATUS_ARG_PLL_SELECT_var() ()
        #define CMD_PLL_STATUS_ARG_PLL_SELECT_value() ((uint8_t)CMD_PLL_STATUS_ARG_PLL_SELECT_var())
                /* macros for field PLL access */
                #define CMD_PLL_STATUS_ARG_PLL_SELECT_PLL_TYPE uint16_t
                #define CMD_PLL_STATUS_ARG_PLL_SELECT_PLL_SIZE 8
                #define CMD_PLL_STATUS_ARG_PLL_SELECT_PLL_INDEX 1
                #define CMD_PLL_STATUS_ARG_PLL_SELECT_PLL_PARAM_MSB 7
                #define CMD_PLL_STATUS_ARG_PLL_SELECT_PLL_PARAM_LSB 0
                #define CMD_PLL_STATUS_ARG_PLL_SELECT_PLL_MASK 0xff
                #define CMD_PLL_STATUS_ARG_PLL_SELECT_PLL_BYTE_MSB 7
                #define CMD_PLL_STATUS_ARG_PLL_SELECT_PLL_BYTE_LSB 0
                #define CMD_PLL_STATUS_ARG_PLL_SELECT_PLL_is_true() (CMD_PLL_STATUS_ARG_PLL_SELECT_var())
                #define CMD_PLL_STATUS_ARG_PLL_SELECT_PLL_value() (((CMD_PLL_STATUS_ARG_PLL_SELECT_var())))
                #define CMD_PLL_STATUS_ARG_PLL_SELECT_PLL_ENUM_PLLR 1
                #define CMD_PLL_STATUS_ARG_PLL_SELECT_PLL_ENUM_PLLA 2
                #define CMD_PLL_STATUS_ARG_PLL_SELECT_PLL_ENUM_PLLB 4
                #define CMD_PLL_STATUS_ARG_PLL_SELECT_PLL_ENUM_PPS_PLL 128

/* PLL_STATUS REPLY */
        /* macros for entire REPLY PLL_LOSS_OF_LOCK_MISC access of type uint8_t */
        #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_TYPE uint8_t
        #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_SIZE 8
        #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_MASK 0xff
        #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_MSB 7
        #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_LSB 0
        #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_INDEX 1
        #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_var() ()
        #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_value() ((uint8_t)CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_var())
        #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_write_u8(x) (CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_var() = (x))
                /* macros for field PLL_INITIAL_LOCK access */
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_INITIAL_LOCK_TYPE uint16_t
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_INITIAL_LOCK_SIZE 1
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_INITIAL_LOCK_INDEX 1
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_INITIAL_LOCK_PARAM_MSB 5
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_INITIAL_LOCK_PARAM_LSB 5
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_INITIAL_LOCK_MASK 0x20
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_INITIAL_LOCK_BYTE_MSB 5
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_INITIAL_LOCK_BYTE_LSB 5
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_INITIAL_LOCK_BIT 0x20
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_INITIAL_LOCK_TRUE_BIT 0x20
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_INITIAL_LOCK_FALSE_BIT 0x00
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_INITIAL_LOCK_write_bitfield(x) (CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_var() = ((CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_var() & ~0x20) | (((x) << 5) & 0x20)))
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_INITIAL_LOCK_ENUM_CLEAR 0
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_INITIAL_LOCK_ENUM_ASSERT 1

                /* macros for field PLL_LOSS_OF_LOCK access */
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_LOSS_OF_LOCK_TYPE uint16_t
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_LOSS_OF_LOCK_SIZE 1
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_LOSS_OF_LOCK_INDEX 1
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_LOSS_OF_LOCK_PARAM_MSB 4
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_LOSS_OF_LOCK_PARAM_LSB 4
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_LOSS_OF_LOCK_MASK 0x10
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_LOSS_OF_LOCK_BYTE_MSB 4
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_LOSS_OF_LOCK_BYTE_LSB 4
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_LOSS_OF_LOCK_BIT 0x10
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_LOSS_OF_LOCK_TRUE_BIT 0x10
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_LOSS_OF_LOCK_FALSE_BIT 0x00
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_LOSS_OF_LOCK_write_bitfield(x) (CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_var() = ((CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_var() & ~0x10) | (((x) << 4) & 0x10)))
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_LOSS_OF_LOCK_ENUM_CLEAR 0
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_LOSS_OF_LOCK_ENUM_ASSERT 1

                /* macros for field PLL_OUT_OF_PHASE access */
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_OUT_OF_PHASE_TYPE uint16_t
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_OUT_OF_PHASE_SIZE 1
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_OUT_OF_PHASE_INDEX 1
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_OUT_OF_PHASE_PARAM_MSB 2
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_OUT_OF_PHASE_PARAM_LSB 2
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_OUT_OF_PHASE_MASK 0x04
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_OUT_OF_PHASE_BYTE_MSB 2
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_OUT_OF_PHASE_BYTE_LSB 2
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_OUT_OF_PHASE_BIT 0x04
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_OUT_OF_PHASE_TRUE_BIT 0x04
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_OUT_OF_PHASE_FALSE_BIT 0x00
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_OUT_OF_PHASE_write_bitfield(x) (CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_var() = ((CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_var() & ~0x04) | (((x) << 2) & 0x04)))
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_OUT_OF_PHASE_ENUM_CLEAR 0
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_OUT_OF_PHASE_ENUM_ASSERT 1

                /* macros for field PLL_OUT_OF_FREQUENCY access */
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_OUT_OF_FREQUENCY_TYPE uint16_t
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_OUT_OF_FREQUENCY_SIZE 1
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_OUT_OF_FREQUENCY_INDEX 1
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_OUT_OF_FREQUENCY_PARAM_MSB 1
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_OUT_OF_FREQUENCY_PARAM_LSB 1
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_OUT_OF_FREQUENCY_MASK 0x02
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_OUT_OF_FREQUENCY_BYTE_MSB 1
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_OUT_OF_FREQUENCY_BYTE_LSB 1
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_OUT_OF_FREQUENCY_BIT 0x02
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_OUT_OF_FREQUENCY_TRUE_BIT 0x02
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_OUT_OF_FREQUENCY_FALSE_BIT 0x00
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_OUT_OF_FREQUENCY_write_bitfield(x) (CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_var() = ((CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_var() & ~0x02) | (((x) << 1) & 0x02)))
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_OUT_OF_FREQUENCY_ENUM_CLEAR 0
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_OUT_OF_FREQUENCY_ENUM_ASSERT 1

                /* macros for field PLL_LOSS_OF_LOCK_FACTORY access */
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_LOSS_OF_LOCK_FACTORY_TYPE uint16_t
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_LOSS_OF_LOCK_FACTORY_SIZE 1
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_LOSS_OF_LOCK_FACTORY_INDEX 1
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_LOSS_OF_LOCK_FACTORY_PARAM_MSB 0
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_LOSS_OF_LOCK_FACTORY_PARAM_LSB 0
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_LOSS_OF_LOCK_FACTORY_MASK 0x01
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_LOSS_OF_LOCK_FACTORY_BYTE_MSB 0
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_LOSS_OF_LOCK_FACTORY_BYTE_LSB 0
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_LOSS_OF_LOCK_FACTORY_BIT 0x01
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_LOSS_OF_LOCK_FACTORY_TRUE_BIT 0x01
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_LOSS_OF_LOCK_FACTORY_FALSE_BIT 0x00
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_LOSS_OF_LOCK_FACTORY_write_bitfield(x) (CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_var() = ((CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_var() & ~0x01) | (((x)) & 0x01)))
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_LOSS_OF_LOCK_FACTORY_ENUM_CLEAR 0
                #define CMD_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_PLL_LOSS_OF_LOCK_FACTORY_ENUM_ASSERT 1

        /* macros for entire REPLY PLL_STATUS access of type uint8_t */
        #define CMD_PLL_STATUS_REPLY_PLL_STATUS_TYPE uint8_t
        #define CMD_PLL_STATUS_REPLY_PLL_STATUS_SIZE 8
        #define CMD_PLL_STATUS_REPLY_PLL_STATUS_MASK 0xff
        #define CMD_PLL_STATUS_REPLY_PLL_STATUS_MSB 7
        #define CMD_PLL_STATUS_REPLY_PLL_STATUS_LSB 0
        #define CMD_PLL_STATUS_REPLY_PLL_STATUS_INDEX 2
        #define CMD_PLL_STATUS_REPLY_PLL_STATUS_var() ()
        #define CMD_PLL_STATUS_REPLY_PLL_STATUS_value() ((uint8_t)CMD_PLL_STATUS_REPLY_PLL_STATUS_var())
        #define CMD_PLL_STATUS_REPLY_PLL_STATUS_write_u8(x) (CMD_PLL_STATUS_REPLY_PLL_STATUS_var() = (x))
                /* macros for field STATUS access */
                #define CMD_PLL_STATUS_REPLY_PLL_STATUS_STATUS_TYPE uint16_t
                #define CMD_PLL_STATUS_REPLY_PLL_STATUS_STATUS_SIZE 8
                #define CMD_PLL_STATUS_REPLY_PLL_STATUS_STATUS_INDEX 2
                #define CMD_PLL_STATUS_REPLY_PLL_STATUS_STATUS_PARAM_MSB 7
                #define CMD_PLL_STATUS_REPLY_PLL_STATUS_STATUS_PARAM_LSB 0
                #define CMD_PLL_STATUS_REPLY_PLL_STATUS_STATUS_MASK 0xff
                #define CMD_PLL_STATUS_REPLY_PLL_STATUS_STATUS_BYTE_MSB 7
                #define CMD_PLL_STATUS_REPLY_PLL_STATUS_STATUS_BYTE_LSB 0
                #define CMD_PLL_STATUS_REPLY_PLL_STATUS_STATUS_write_u8(x) (CMD_PLL_STATUS_REPLY_PLL_STATUS_var() = ((CMD_PLL_STATUS_REPLY_PLL_STATUS_var() & ~0xff) | (((x)) & 0xff)))
                #define CMD_PLL_STATUS_REPLY_PLL_STATUS_STATUS_ENUM_THRESHOLD0 0
                #define CMD_PLL_STATUS_REPLY_PLL_STATUS_STATUS_ENUM_THRESHOLD1 1
                #define CMD_PLL_STATUS_REPLY_PLL_STATUS_STATUS_ENUM_THRESHOLD2 2
                #define CMD_PLL_STATUS_REPLY_PLL_STATUS_STATUS_ENUM_THRESHOLD3 3

        /* macros for entire REPLY PLL_SLIP_COUNT access of type uint8_t */
        #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_TYPE uint8_t
        #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_SIZE 8
        #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_MASK 0xff
        #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_MSB 7
        #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_LSB 0
        #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_INDEX 3
        #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_var() ()
        #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_value() ((uint8_t)CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_var())
        #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_write_u8(x) (CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_var() = (x))
                /* macros for field PLL_SLIP_COUNT_NEG access */
                #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_PLL_SLIP_COUNT_NEG_TYPE uint8_t
                #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_PLL_SLIP_COUNT_NEG_SIZE 4
                #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_PLL_SLIP_COUNT_NEG_INDEX 3
                #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_PLL_SLIP_COUNT_NEG_PARAM_MSB 7
                #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_PLL_SLIP_COUNT_NEG_PARAM_LSB 4
                #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_PLL_SLIP_COUNT_NEG_MASK 0xf0
                #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_PLL_SLIP_COUNT_NEG_BYTE_MSB 7
                #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_PLL_SLIP_COUNT_NEG_BYTE_LSB 4
                #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_PLL_SLIP_COUNT_NEG_write_bitfield(x) (CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_var() = ((CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_var() & ~0xf0) | (((x) << 4) & 0xf0)))

                /* macros for field PLL_SLIP_COUNT_POS access */
                #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_PLL_SLIP_COUNT_POS_TYPE uint8_t
                #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_PLL_SLIP_COUNT_POS_SIZE 4
                #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_PLL_SLIP_COUNT_POS_INDEX 3
                #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_PLL_SLIP_COUNT_POS_PARAM_MSB 3
                #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_PLL_SLIP_COUNT_POS_PARAM_LSB 0
                #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_PLL_SLIP_COUNT_POS_MASK 0x0f
                #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_PLL_SLIP_COUNT_POS_BYTE_MSB 3
                #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_PLL_SLIP_COUNT_POS_BYTE_LSB 0
                #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_PLL_SLIP_COUNT_POS_write_bitfield(x) (CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_var() = ((CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_var() & ~0x0f) | (((x)) & 0x0f)))

        /* macros for entire REPLY PLL_SLIP_COUNT_NET access of type uint8_t */
        #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_NET_TYPE uint8_t
        #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_NET_SIZE 8
        #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_NET_MASK 0xff
        #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_NET_MSB 7
        #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_NET_LSB 0
        #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_NET_INDEX 4
        #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_NET_var() ()
        #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_NET_value() ((uint8_t)CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_NET_var())
        #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_NET_write_u8(x) (CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_NET_var() = (x))
                /* macros for field SLIP_CYCLE_NET access */
                #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_NET_SLIP_CYCLE_NET_TYPE uint8_t
                #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_NET_SLIP_CYCLE_NET_SIZE 5
                #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_NET_SLIP_CYCLE_NET_INDEX 4
                #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_NET_SLIP_CYCLE_NET_PARAM_MSB 4
                #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_NET_SLIP_CYCLE_NET_PARAM_LSB 0
                #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_NET_SLIP_CYCLE_NET_MASK 0x1f
                #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_NET_SLIP_CYCLE_NET_BYTE_MSB 4
                #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_NET_SLIP_CYCLE_NET_BYTE_LSB 0
                #define CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_NET_SLIP_CYCLE_NET_write_bitfield(x) (CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_NET_var() = ((CMD_PLL_STATUS_REPLY_PLL_SLIP_COUNT_NET_var() & ~0x1f) | (((x)) & 0x1f)))

        /* macros for entire REPLY PLL_HOLDOVER_VALID access of type uint8_t */
        #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_VALID_TYPE uint8_t
        #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_VALID_SIZE 8
        #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_VALID_MASK 0xff
        #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_VALID_MSB 7
        #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_VALID_LSB 0
        #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_VALID_INDEX 5
        #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_VALID_var() ()
        #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_VALID_value() ((uint8_t)CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_VALID_var())
        #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_VALID_write_u8(x) (CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_VALID_var() = (x))
                /* macros for field HOLDOVER_VALID access */
                #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_VALID_HOLDOVER_VALID_TYPE uint16_t
                #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_VALID_HOLDOVER_VALID_SIZE 1
                #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_VALID_HOLDOVER_VALID_INDEX 5
                #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_VALID_HOLDOVER_VALID_PARAM_MSB 0
                #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_VALID_HOLDOVER_VALID_PARAM_LSB 0
                #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_VALID_HOLDOVER_VALID_MASK 0x01
                #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_VALID_HOLDOVER_VALID_BYTE_MSB 0
                #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_VALID_HOLDOVER_VALID_BYTE_LSB 0
                #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_VALID_HOLDOVER_VALID_BIT 0x01
                #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_VALID_HOLDOVER_VALID_TRUE_BIT 0x01
                #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_VALID_HOLDOVER_VALID_FALSE_BIT 0x00
                #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_VALID_HOLDOVER_VALID_write_bitfield(x) (CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_VALID_var() = ((CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_VALID_var() & ~0x01) | (((x)) & 0x01)))
                #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_VALID_HOLDOVER_VALID_ENUM_INVALID 0
                #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_VALID_HOLDOVER_VALID_ENUM_VALID 1

        /* macros for entire REPLY PLL_HOLDOVER access of type uint8_t */
        #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_TYPE uint8_t
        #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_SIZE 8
        #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_MASK 0xff
        #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_MSB 7
        #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_LSB 0
        #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_INDEX 6
        #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_var() ()
        #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_value() ((uint8_t)CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_var())
        #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_write_u8(x) (CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_var() = (x))
                /* macros for field HOLDOVER access */
                #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_HOLDOVER_TYPE uint16_t
                #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_HOLDOVER_SIZE 1
                #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_HOLDOVER_INDEX 6
                #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_HOLDOVER_PARAM_MSB 0
                #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_HOLDOVER_PARAM_LSB 0
                #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_HOLDOVER_MASK 0x01
                #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_HOLDOVER_BYTE_MSB 0
                #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_HOLDOVER_BYTE_LSB 0
                #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_HOLDOVER_BIT 0x01
                #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_HOLDOVER_TRUE_BIT 0x01
                #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_HOLDOVER_FALSE_BIT 0x00
                #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_HOLDOVER_write_bitfield(x) (CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_var() = ((CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_var() & ~0x01) | (((x)) & 0x01)))
                #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_HOLDOVER_ENUM_NO_HOLDOVER 0
                #define CMD_PLL_STATUS_REPLY_PLL_HOLDOVER_HOLDOVER_ENUM_HOLDOVER 1

        /* macros for entire REPLY PLL_SHORT_TERM_HOLDOVER access of type uint8_t */
        #define CMD_PLL_STATUS_REPLY_PLL_SHORT_TERM_HOLDOVER_TYPE uint8_t
        #define CMD_PLL_STATUS_REPLY_PLL_SHORT_TERM_HOLDOVER_SIZE 8
        #define CMD_PLL_STATUS_REPLY_PLL_SHORT_TERM_HOLDOVER_MASK 0xff
        #define CMD_PLL_STATUS_REPLY_PLL_SHORT_TERM_HOLDOVER_MSB 7
        #define CMD_PLL_STATUS_REPLY_PLL_SHORT_TERM_HOLDOVER_LSB 0
        #define CMD_PLL_STATUS_REPLY_PLL_SHORT_TERM_HOLDOVER_INDEX 7
        #define CMD_PLL_STATUS_REPLY_PLL_SHORT_TERM_HOLDOVER_var() ()
        #define CMD_PLL_STATUS_REPLY_PLL_SHORT_TERM_HOLDOVER_value() ((uint8_t)CMD_PLL_STATUS_REPLY_PLL_SHORT_TERM_HOLDOVER_var())
        #define CMD_PLL_STATUS_REPLY_PLL_SHORT_TERM_HOLDOVER_write_u8(x) (CMD_PLL_STATUS_REPLY_PLL_SHORT_TERM_HOLDOVER_var() = (x))
                /* macros for field SHORT_TERM_HOLDOVER access */
                #define CMD_PLL_STATUS_REPLY_PLL_SHORT_TERM_HOLDOVER_SHORT_TERM_HOLDOVER_TYPE uint16_t
                #define CMD_PLL_STATUS_REPLY_PLL_SHORT_TERM_HOLDOVER_SHORT_TERM_HOLDOVER_SIZE 1
                #define CMD_PLL_STATUS_REPLY_PLL_SHORT_TERM_HOLDOVER_SHORT_TERM_HOLDOVER_INDEX 7
                #define CMD_PLL_STATUS_REPLY_PLL_SHORT_TERM_HOLDOVER_SHORT_TERM_HOLDOVER_PARAM_MSB 0
                #define CMD_PLL_STATUS_REPLY_PLL_SHORT_TERM_HOLDOVER_SHORT_TERM_HOLDOVER_PARAM_LSB 0
                #define CMD_PLL_STATUS_REPLY_PLL_SHORT_TERM_HOLDOVER_SHORT_TERM_HOLDOVER_MASK 0x01
                #define CMD_PLL_STATUS_REPLY_PLL_SHORT_TERM_HOLDOVER_SHORT_TERM_HOLDOVER_BYTE_MSB 0
                #define CMD_PLL_STATUS_REPLY_PLL_SHORT_TERM_HOLDOVER_SHORT_TERM_HOLDOVER_BYTE_LSB 0
                #define CMD_PLL_STATUS_REPLY_PLL_SHORT_TERM_HOLDOVER_SHORT_TERM_HOLDOVER_BIT 0x01
                #define CMD_PLL_STATUS_REPLY_PLL_SHORT_TERM_HOLDOVER_SHORT_TERM_HOLDOVER_TRUE_BIT 0x01
                #define CMD_PLL_STATUS_REPLY_PLL_SHORT_TERM_HOLDOVER_SHORT_TERM_HOLDOVER_FALSE_BIT 0x00
                #define CMD_PLL_STATUS_REPLY_PLL_SHORT_TERM_HOLDOVER_SHORT_TERM_HOLDOVER_write_bitfield(x) (CMD_PLL_STATUS_REPLY_PLL_SHORT_TERM_HOLDOVER_var() = ((CMD_PLL_STATUS_REPLY_PLL_SHORT_TERM_HOLDOVER_var() & ~0x01) | (((x)) & 0x01)))
                #define CMD_PLL_STATUS_REPLY_PLL_SHORT_TERM_HOLDOVER_SHORT_TERM_HOLDOVER_ENUM_NO_SHORT_TERM_HOLDOVER 0
                #define CMD_PLL_STATUS_REPLY_PLL_SHORT_TERM_HOLDOVER_SHORT_TERM_HOLDOVER_ENUM_SHORT_TERM_HOLDOVER 1

        /* macros for entire REPLY PLL_PHASE_BLEEDOUT access of type uint8_t */
        #define CMD_PLL_STATUS_REPLY_PLL_PHASE_BLEEDOUT_TYPE uint8_t
        #define CMD_PLL_STATUS_REPLY_PLL_PHASE_BLEEDOUT_SIZE 8
        #define CMD_PLL_STATUS_REPLY_PLL_PHASE_BLEEDOUT_MASK 0xff
        #define CMD_PLL_STATUS_REPLY_PLL_PHASE_BLEEDOUT_MSB 7
        #define CMD_PLL_STATUS_REPLY_PLL_PHASE_BLEEDOUT_LSB 0
        #define CMD_PLL_STATUS_REPLY_PLL_PHASE_BLEEDOUT_INDEX 8
        #define CMD_PLL_STATUS_REPLY_PLL_PHASE_BLEEDOUT_var() ()
        #define CMD_PLL_STATUS_REPLY_PLL_PHASE_BLEEDOUT_value() ((uint8_t)CMD_PLL_STATUS_REPLY_PLL_PHASE_BLEEDOUT_var())
        #define CMD_PLL_STATUS_REPLY_PLL_PHASE_BLEEDOUT_write_u8(x) (CMD_PLL_STATUS_REPLY_PLL_PHASE_BLEEDOUT_var() = (x))
                /* macros for field PHASE_BLEEDOUT access */
                #define CMD_PLL_STATUS_REPLY_PLL_PHASE_BLEEDOUT_PHASE_BLEEDOUT_TYPE uint16_t
                #define CMD_PLL_STATUS_REPLY_PLL_PHASE_BLEEDOUT_PHASE_BLEEDOUT_SIZE 1
                #define CMD_PLL_STATUS_REPLY_PLL_PHASE_BLEEDOUT_PHASE_BLEEDOUT_INDEX 8
                #define CMD_PLL_STATUS_REPLY_PLL_PHASE_BLEEDOUT_PHASE_BLEEDOUT_PARAM_MSB 0
                #define CMD_PLL_STATUS_REPLY_PLL_PHASE_BLEEDOUT_PHASE_BLEEDOUT_PARAM_LSB 0
                #define CMD_PLL_STATUS_REPLY_PLL_PHASE_BLEEDOUT_PHASE_BLEEDOUT_MASK 0x01
                #define CMD_PLL_STATUS_REPLY_PLL_PHASE_BLEEDOUT_PHASE_BLEEDOUT_BYTE_MSB 0
                #define CMD_PLL_STATUS_REPLY_PLL_PHASE_BLEEDOUT_PHASE_BLEEDOUT_BYTE_LSB 0
                #define CMD_PLL_STATUS_REPLY_PLL_PHASE_BLEEDOUT_PHASE_BLEEDOUT_BIT 0x01
                #define CMD_PLL_STATUS_REPLY_PLL_PHASE_BLEEDOUT_PHASE_BLEEDOUT_TRUE_BIT 0x01
                #define CMD_PLL_STATUS_REPLY_PLL_PHASE_BLEEDOUT_PHASE_BLEEDOUT_FALSE_BIT 0x00
                #define CMD_PLL_STATUS_REPLY_PLL_PHASE_BLEEDOUT_PHASE_BLEEDOUT_write_bitfield(x) (CMD_PLL_STATUS_REPLY_PLL_PHASE_BLEEDOUT_var() = ((CMD_PLL_STATUS_REPLY_PLL_PHASE_BLEEDOUT_var() & ~0x01) | (((x)) & 0x01)))
                #define CMD_PLL_STATUS_REPLY_PLL_PHASE_BLEEDOUT_PHASE_BLEEDOUT_ENUM_FALSE 0
                #define CMD_PLL_STATUS_REPLY_PLL_PHASE_BLEEDOUT_PHASE_BLEEDOUT_ENUM_TRUE 1

        /* macros for entire REPLY PLL_LOOP_FILTER_STATUS access of type uint8_t */
        #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_TYPE uint8_t
        #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_SIZE 8
        #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_MASK 0xff
        #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_MSB 7
        #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LSB 0
        #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_INDEX 9
        #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_var() ()
        #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_value() ((uint8_t)CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_var())
        #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_write_u8(x) (CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_var() = (x))
                /* macros for field LOOP_FILTER_RAMP_IN_PROGRESS access */
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_RAMP_IN_PROGRESS_TYPE uint16_t
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_RAMP_IN_PROGRESS_SIZE 1
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_RAMP_IN_PROGRESS_INDEX 9
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_RAMP_IN_PROGRESS_PARAM_MSB 6
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_RAMP_IN_PROGRESS_PARAM_LSB 6
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_RAMP_IN_PROGRESS_MASK 0x40
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_RAMP_IN_PROGRESS_BYTE_MSB 6
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_RAMP_IN_PROGRESS_BYTE_LSB 6
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_RAMP_IN_PROGRESS_BIT 0x40
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_RAMP_IN_PROGRESS_TRUE_BIT 0x40
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_RAMP_IN_PROGRESS_FALSE_BIT 0x00
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_RAMP_IN_PROGRESS_write_bitfield(x) (CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_var() = ((CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_var() & ~0x40) | (((x) << 6) & 0x40)))
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_RAMP_IN_PROGRESS_ENUM_NO_FREQUENCY_RAMP 0
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_RAMP_IN_PROGRESS_ENUM_FREQUENCY_RAMP 1

                /* macros for field LOOP_FILTER_FASTLOCK access */
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_FASTLOCK_TYPE uint16_t
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_FASTLOCK_SIZE 1
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_FASTLOCK_INDEX 9
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_FASTLOCK_PARAM_MSB 5
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_FASTLOCK_PARAM_LSB 5
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_FASTLOCK_MASK 0x20
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_FASTLOCK_BYTE_MSB 5
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_FASTLOCK_BYTE_LSB 5
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_FASTLOCK_BIT 0x20
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_FASTLOCK_TRUE_BIT 0x20
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_FASTLOCK_FALSE_BIT 0x00
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_FASTLOCK_write_bitfield(x) (CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_var() = ((CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_var() & ~0x20) | (((x) << 5) & 0x20)))
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_FASTLOCK_ENUM_NO_FAST_LOCK_BW 0
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_FASTLOCK_ENUM_FAST_LOCK_BW 1

                /* macros for field LOOP_FILTER_INITIAL_LOCK access */
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_INITIAL_LOCK_TYPE uint16_t
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_INITIAL_LOCK_SIZE 1
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_INITIAL_LOCK_INDEX 9
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_INITIAL_LOCK_PARAM_MSB 4
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_INITIAL_LOCK_PARAM_LSB 4
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_INITIAL_LOCK_MASK 0x10
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_INITIAL_LOCK_BYTE_MSB 4
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_INITIAL_LOCK_BYTE_LSB 4
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_INITIAL_LOCK_BIT 0x10
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_INITIAL_LOCK_TRUE_BIT 0x10
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_INITIAL_LOCK_FALSE_BIT 0x00
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_INITIAL_LOCK_write_bitfield(x) (CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_var() = ((CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_var() & ~0x10) | (((x) << 4) & 0x10)))
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_INITIAL_LOCK_ENUM_NO_INITIAL_LOCK_BW 0
                #define CMD_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_LOOP_FILTER_INITIAL_LOCK_ENUM_INITIAL_LOCK_BW 1

        /* macros for entire REPLY PPS_PLL access of type uint8_t */
        #define CMD_PLL_STATUS_REPLY_PPS_PLL_TYPE uint8_t
        #define CMD_PLL_STATUS_REPLY_PPS_PLL_SIZE 8
        #define CMD_PLL_STATUS_REPLY_PPS_PLL_MASK 0xff
        #define CMD_PLL_STATUS_REPLY_PPS_PLL_MSB 7
        #define CMD_PLL_STATUS_REPLY_PPS_PLL_LSB 0
        #define CMD_PLL_STATUS_REPLY_PPS_PLL_INDEX 10
        #define CMD_PLL_STATUS_REPLY_PPS_PLL_var() ()
        #define CMD_PLL_STATUS_REPLY_PPS_PLL_value() ((uint8_t)CMD_PLL_STATUS_REPLY_PPS_PLL_var())
        #define CMD_PLL_STATUS_REPLY_PPS_PLL_write_u8(x) (CMD_PLL_STATUS_REPLY_PPS_PLL_var() = (x))
                /* macros for field AUTO_PHASE_JAM access */
                #define CMD_PLL_STATUS_REPLY_PPS_PLL_AUTO_PHASE_JAM_TYPE uint16_t
                #define CMD_PLL_STATUS_REPLY_PPS_PLL_AUTO_PHASE_JAM_SIZE 1
                #define CMD_PLL_STATUS_REPLY_PPS_PLL_AUTO_PHASE_JAM_INDEX 10
                #define CMD_PLL_STATUS_REPLY_PPS_PLL_AUTO_PHASE_JAM_PARAM_MSB 1
                #define CMD_PLL_STATUS_REPLY_PPS_PLL_AUTO_PHASE_JAM_PARAM_LSB 1
                #define CMD_PLL_STATUS_REPLY_PPS_PLL_AUTO_PHASE_JAM_MASK 0x02
                #define CMD_PLL_STATUS_REPLY_PPS_PLL_AUTO_PHASE_JAM_BYTE_MSB 1
                #define CMD_PLL_STATUS_REPLY_PPS_PLL_AUTO_PHASE_JAM_BYTE_LSB 1
                #define CMD_PLL_STATUS_REPLY_PPS_PLL_AUTO_PHASE_JAM_BIT 0x02
                #define CMD_PLL_STATUS_REPLY_PPS_PLL_AUTO_PHASE_JAM_TRUE_BIT 0x02
                #define CMD_PLL_STATUS_REPLY_PPS_PLL_AUTO_PHASE_JAM_FALSE_BIT 0x00
                #define CMD_PLL_STATUS_REPLY_PPS_PLL_AUTO_PHASE_JAM_write_bitfield(x) (CMD_PLL_STATUS_REPLY_PPS_PLL_var() = ((CMD_PLL_STATUS_REPLY_PPS_PLL_var() & ~0x02) | (((x) << 1) & 0x02)))
                #define CMD_PLL_STATUS_REPLY_PPS_PLL_AUTO_PHASE_JAM_ENUM_FALSE 0
                #define CMD_PLL_STATUS_REPLY_PPS_PLL_AUTO_PHASE_JAM_ENUM_TRUE 1

                /* macros for field PSL_ACTIVE access */
                #define CMD_PLL_STATUS_REPLY_PPS_PLL_PSL_ACTIVE_TYPE uint16_t
                #define CMD_PLL_STATUS_REPLY_PPS_PLL_PSL_ACTIVE_SIZE 1
                #define CMD_PLL_STATUS_REPLY_PPS_PLL_PSL_ACTIVE_INDEX 10
                #define CMD_PLL_STATUS_REPLY_PPS_PLL_PSL_ACTIVE_PARAM_MSB 0
                #define CMD_PLL_STATUS_REPLY_PPS_PLL_PSL_ACTIVE_PARAM_LSB 0
                #define CMD_PLL_STATUS_REPLY_PPS_PLL_PSL_ACTIVE_MASK 0x01
                #define CMD_PLL_STATUS_REPLY_PPS_PLL_PSL_ACTIVE_BYTE_MSB 0
                #define CMD_PLL_STATUS_REPLY_PPS_PLL_PSL_ACTIVE_BYTE_LSB 0
                #define CMD_PLL_STATUS_REPLY_PPS_PLL_PSL_ACTIVE_BIT 0x01
                #define CMD_PLL_STATUS_REPLY_PPS_PLL_PSL_ACTIVE_TRUE_BIT 0x01
                #define CMD_PLL_STATUS_REPLY_PPS_PLL_PSL_ACTIVE_FALSE_BIT 0x00
                #define CMD_PLL_STATUS_REPLY_PPS_PLL_PSL_ACTIVE_write_bitfield(x) (CMD_PLL_STATUS_REPLY_PPS_PLL_var() = ((CMD_PLL_STATUS_REPLY_PPS_PLL_var() & ~0x01) | (((x)) & 0x01)))
                #define CMD_PLL_STATUS_REPLY_PPS_PLL_PSL_ACTIVE_ENUM_FALSE 0
                #define CMD_PLL_STATUS_REPLY_PPS_PLL_PSL_ACTIVE_ENUM_TRUE 1

#define CMD_INTERRUPT_STATUS 0x14
/* INTERRUPT_STATUS ARGS */
/* INTERRUPT_STATUS REPLY */
        /* macros for entire REPLY INPUT_CLOCK_INVALID access of type uint8_t */
        #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_TYPE uint8_t
        #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_SIZE 8
        #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_MASK 0xff
        #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_MSB 7
        #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_LSB 0
        #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_INDEX 1
        #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_var() ()
        #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_value() ((uint8_t)CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_var())
        #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_write_u8(x) (CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_var() = (x))
                /* macros for field IN3B_INVALID access */
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN3B_INVALID_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN3B_INVALID_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN3B_INVALID_INDEX 1
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN3B_INVALID_PARAM_MSB 7
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN3B_INVALID_PARAM_LSB 7
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN3B_INVALID_MASK 0x80
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN3B_INVALID_BYTE_MSB 7
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN3B_INVALID_BYTE_LSB 7
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN3B_INVALID_BIT 0x80
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN3B_INVALID_TRUE_BIT 0x80
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN3B_INVALID_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN3B_INVALID_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_var() = ((CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_var() & ~0x80) | (((x) << 7) & 0x80)))
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN3B_INVALID_ENUM_CLEAR 0
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN3B_INVALID_ENUM_ASSERT 1

                /* macros for field IN3_INVALID access */
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN3_INVALID_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN3_INVALID_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN3_INVALID_INDEX 1
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN3_INVALID_PARAM_MSB 6
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN3_INVALID_PARAM_LSB 6
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN3_INVALID_MASK 0x40
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN3_INVALID_BYTE_MSB 6
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN3_INVALID_BYTE_LSB 6
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN3_INVALID_BIT 0x40
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN3_INVALID_TRUE_BIT 0x40
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN3_INVALID_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN3_INVALID_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_var() = ((CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_var() & ~0x40) | (((x) << 6) & 0x40)))
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN3_INVALID_ENUM_CLEAR 0
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN3_INVALID_ENUM_ASSERT 1

                /* macros for field IN2B_INVALID access */
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN2B_INVALID_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN2B_INVALID_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN2B_INVALID_INDEX 1
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN2B_INVALID_PARAM_MSB 5
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN2B_INVALID_PARAM_LSB 5
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN2B_INVALID_MASK 0x20
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN2B_INVALID_BYTE_MSB 5
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN2B_INVALID_BYTE_LSB 5
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN2B_INVALID_BIT 0x20
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN2B_INVALID_TRUE_BIT 0x20
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN2B_INVALID_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN2B_INVALID_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_var() = ((CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_var() & ~0x20) | (((x) << 5) & 0x20)))
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN2B_INVALID_ENUM_CLEAR 0
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN2B_INVALID_ENUM_ASSERT 1

                /* macros for field IN2_INVALID access */
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN2_INVALID_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN2_INVALID_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN2_INVALID_INDEX 1
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN2_INVALID_PARAM_MSB 4
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN2_INVALID_PARAM_LSB 4
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN2_INVALID_MASK 0x10
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN2_INVALID_BYTE_MSB 4
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN2_INVALID_BYTE_LSB 4
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN2_INVALID_BIT 0x10
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN2_INVALID_TRUE_BIT 0x10
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN2_INVALID_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN2_INVALID_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_var() = ((CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_var() & ~0x10) | (((x) << 4) & 0x10)))
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN2_INVALID_ENUM_CLEAR 0
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN2_INVALID_ENUM_ASSERT 1

                /* macros for field IN1_INVALID access */
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN1_INVALID_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN1_INVALID_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN1_INVALID_INDEX 1
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN1_INVALID_PARAM_MSB 2
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN1_INVALID_PARAM_LSB 2
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN1_INVALID_MASK 0x04
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN1_INVALID_BYTE_MSB 2
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN1_INVALID_BYTE_LSB 2
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN1_INVALID_BIT 0x04
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN1_INVALID_TRUE_BIT 0x04
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN1_INVALID_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN1_INVALID_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_var() = ((CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_var() & ~0x04) | (((x) << 2) & 0x04)))
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN1_INVALID_ENUM_CLEAR 0
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN1_INVALID_ENUM_ASSERT 1

                /* macros for field IN0_INVALID access */
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN0_INVALID_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN0_INVALID_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN0_INVALID_INDEX 1
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN0_INVALID_PARAM_MSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN0_INVALID_PARAM_LSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN0_INVALID_MASK 0x01
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN0_INVALID_BYTE_MSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN0_INVALID_BYTE_LSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN0_INVALID_BIT 0x01
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN0_INVALID_TRUE_BIT 0x01
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN0_INVALID_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN0_INVALID_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_var() = ((CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_var() & ~0x01) | (((x)) & 0x01)))
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN0_INVALID_ENUM_CLEAR 0
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_IN0_INVALID_ENUM_ASSERT 1

        /* macros for entire REPLY INPUT_CLOCK_VALID access of type uint8_t */
        #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_TYPE uint8_t
        #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_SIZE 8
        #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_MASK 0xff
        #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_MSB 7
        #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_LSB 0
        #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_INDEX 2
        #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_var() ()
        #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_value() ((uint8_t)CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_var())
        #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_write_u8(x) (CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_var() = (x))
                /* macros for field IN3B_VALID access */
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN3B_VALID_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN3B_VALID_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN3B_VALID_INDEX 2
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN3B_VALID_PARAM_MSB 7
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN3B_VALID_PARAM_LSB 7
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN3B_VALID_MASK 0x80
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN3B_VALID_BYTE_MSB 7
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN3B_VALID_BYTE_LSB 7
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN3B_VALID_BIT 0x80
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN3B_VALID_TRUE_BIT 0x80
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN3B_VALID_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN3B_VALID_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_var() = ((CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_var() & ~0x80) | (((x) << 7) & 0x80)))
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN3B_VALID_ENUM_CLEAR 0
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN3B_VALID_ENUM_ASSERT 1

                /* macros for field IN3_VALID access */
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN3_VALID_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN3_VALID_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN3_VALID_INDEX 2
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN3_VALID_PARAM_MSB 6
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN3_VALID_PARAM_LSB 6
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN3_VALID_MASK 0x40
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN3_VALID_BYTE_MSB 6
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN3_VALID_BYTE_LSB 6
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN3_VALID_BIT 0x40
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN3_VALID_TRUE_BIT 0x40
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN3_VALID_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN3_VALID_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_var() = ((CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_var() & ~0x40) | (((x) << 6) & 0x40)))
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN3_VALID_ENUM_CLEAR 0
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN3_VALID_ENUM_ASSERT 1

                /* macros for field IN2B_VALID access */
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN2B_VALID_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN2B_VALID_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN2B_VALID_INDEX 2
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN2B_VALID_PARAM_MSB 5
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN2B_VALID_PARAM_LSB 5
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN2B_VALID_MASK 0x20
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN2B_VALID_BYTE_MSB 5
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN2B_VALID_BYTE_LSB 5
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN2B_VALID_BIT 0x20
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN2B_VALID_TRUE_BIT 0x20
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN2B_VALID_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN2B_VALID_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_var() = ((CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_var() & ~0x20) | (((x) << 5) & 0x20)))
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN2B_VALID_ENUM_CLEAR 0
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN2B_VALID_ENUM_ASSERT 1

                /* macros for field IN2_VALID access */
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN2_VALID_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN2_VALID_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN2_VALID_INDEX 2
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN2_VALID_PARAM_MSB 4
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN2_VALID_PARAM_LSB 4
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN2_VALID_MASK 0x10
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN2_VALID_BYTE_MSB 4
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN2_VALID_BYTE_LSB 4
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN2_VALID_BIT 0x10
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN2_VALID_TRUE_BIT 0x10
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN2_VALID_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN2_VALID_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_var() = ((CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_var() & ~0x10) | (((x) << 4) & 0x10)))
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN2_VALID_ENUM_CLEAR 0
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN2_VALID_ENUM_ASSERT 1

                /* macros for field IN1_VALID access */
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN1_VALID_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN1_VALID_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN1_VALID_INDEX 2
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN1_VALID_PARAM_MSB 2
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN1_VALID_PARAM_LSB 2
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN1_VALID_MASK 0x04
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN1_VALID_BYTE_MSB 2
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN1_VALID_BYTE_LSB 2
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN1_VALID_BIT 0x04
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN1_VALID_TRUE_BIT 0x04
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN1_VALID_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN1_VALID_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_var() = ((CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_var() & ~0x04) | (((x) << 2) & 0x04)))
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN1_VALID_ENUM_CLEAR 0
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN1_VALID_ENUM_ASSERT 1

                /* macros for field IN0_VALID access */
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN0_VALID_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN0_VALID_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN0_VALID_INDEX 2
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN0_VALID_PARAM_MSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN0_VALID_PARAM_LSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN0_VALID_MASK 0x01
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN0_VALID_BYTE_MSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN0_VALID_BYTE_LSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN0_VALID_BIT 0x01
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN0_VALID_TRUE_BIT 0x01
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN0_VALID_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN0_VALID_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_var() = ((CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_var() & ~0x01) | (((x)) & 0x01)))
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN0_VALID_ENUM_CLEAR 0
                #define CMD_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_IN0_VALID_ENUM_ASSERT 1

        /* macros for entire REPLY PLLR access of type uint8_t */
        #define CMD_INTERRUPT_STATUS_REPLY_PLLR_TYPE uint8_t
        #define CMD_INTERRUPT_STATUS_REPLY_PLLR_SIZE 8
        #define CMD_INTERRUPT_STATUS_REPLY_PLLR_MASK 0xff
        #define CMD_INTERRUPT_STATUS_REPLY_PLLR_MSB 7
        #define CMD_INTERRUPT_STATUS_REPLY_PLLR_LSB 0
        #define CMD_INTERRUPT_STATUS_REPLY_PLLR_INDEX 3
        #define CMD_INTERRUPT_STATUS_REPLY_PLLR_var() ()
        #define CMD_INTERRUPT_STATUS_REPLY_PLLR_value() ((uint8_t)CMD_INTERRUPT_STATUS_REPLY_PLLR_var())
        #define CMD_INTERRUPT_STATUS_REPLY_PLLR_write_u8(x) (CMD_INTERRUPT_STATUS_REPLY_PLLR_var() = (x))
                /* macros for field PLLR_HITLESS_SWITCH access */
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_HITLESS_SWITCH_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_HITLESS_SWITCH_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_HITLESS_SWITCH_INDEX 3
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_HITLESS_SWITCH_PARAM_MSB 4
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_HITLESS_SWITCH_PARAM_LSB 4
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_HITLESS_SWITCH_MASK 0x10
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_HITLESS_SWITCH_BYTE_MSB 4
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_HITLESS_SWITCH_BYTE_LSB 4
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_HITLESS_SWITCH_BIT 0x10
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_HITLESS_SWITCH_TRUE_BIT 0x10
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_HITLESS_SWITCH_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_HITLESS_SWITCH_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_PLLR_var() = ((CMD_INTERRUPT_STATUS_REPLY_PLLR_var() & ~0x10) | (((x) << 4) & 0x10)))
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_HITLESS_SWITCH_ENUM_CLEAR 0
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_HITLESS_SWITCH_ENUM_ASSERT 1

                /* macros for field PLLR_HOLDOVER access */
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_HOLDOVER_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_HOLDOVER_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_HOLDOVER_INDEX 3
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_HOLDOVER_PARAM_MSB 3
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_HOLDOVER_PARAM_LSB 3
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_HOLDOVER_MASK 0x08
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_HOLDOVER_BYTE_MSB 3
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_HOLDOVER_BYTE_LSB 3
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_HOLDOVER_BIT 0x08
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_HOLDOVER_TRUE_BIT 0x08
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_HOLDOVER_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_HOLDOVER_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_PLLR_var() = ((CMD_INTERRUPT_STATUS_REPLY_PLLR_var() & ~0x08) | (((x) << 3) & 0x08)))
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_HOLDOVER_ENUM_CLEAR 0
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_HOLDOVER_ENUM_ASSERT 1

                /* macros for field PLLR_CYCLE_SLIP access */
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_CYCLE_SLIP_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_CYCLE_SLIP_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_CYCLE_SLIP_INDEX 3
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_CYCLE_SLIP_PARAM_MSB 2
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_CYCLE_SLIP_PARAM_LSB 2
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_CYCLE_SLIP_MASK 0x04
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_CYCLE_SLIP_BYTE_MSB 2
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_CYCLE_SLIP_BYTE_LSB 2
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_CYCLE_SLIP_BIT 0x04
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_CYCLE_SLIP_TRUE_BIT 0x04
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_CYCLE_SLIP_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_CYCLE_SLIP_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_PLLR_var() = ((CMD_INTERRUPT_STATUS_REPLY_PLLR_var() & ~0x04) | (((x) << 2) & 0x04)))
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_CYCLE_SLIP_ENUM_CLEAR 0
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_CYCLE_SLIP_ENUM_ASSERT 1

                /* macros for field PLLR_LOCKED access */
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_LOCKED_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_LOCKED_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_LOCKED_INDEX 3
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_LOCKED_PARAM_MSB 1
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_LOCKED_PARAM_LSB 1
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_LOCKED_MASK 0x02
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_LOCKED_BYTE_MSB 1
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_LOCKED_BYTE_LSB 1
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_LOCKED_BIT 0x02
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_LOCKED_TRUE_BIT 0x02
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_LOCKED_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_LOCKED_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_PLLR_var() = ((CMD_INTERRUPT_STATUS_REPLY_PLLR_var() & ~0x02) | (((x) << 1) & 0x02)))
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_LOCKED_ENUM_CLEAR 0
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_LOCKED_ENUM_ASSERT 1

                /* macros for field PLLR_LOSS_OF_LOCK access */
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_LOSS_OF_LOCK_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_LOSS_OF_LOCK_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_LOSS_OF_LOCK_INDEX 3
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_LOSS_OF_LOCK_PARAM_MSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_LOSS_OF_LOCK_PARAM_LSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_LOSS_OF_LOCK_MASK 0x01
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_LOSS_OF_LOCK_BYTE_MSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_LOSS_OF_LOCK_BYTE_LSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_LOSS_OF_LOCK_BIT 0x01
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_LOSS_OF_LOCK_TRUE_BIT 0x01
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_LOSS_OF_LOCK_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_LOSS_OF_LOCK_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_PLLR_var() = ((CMD_INTERRUPT_STATUS_REPLY_PLLR_var() & ~0x01) | (((x)) & 0x01)))
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_LOSS_OF_LOCK_ENUM_CLEAR 0
                #define CMD_INTERRUPT_STATUS_REPLY_PLLR_PLLR_LOSS_OF_LOCK_ENUM_ASSERT 1

        /* macros for entire REPLY PLLA access of type uint8_t */
        #define CMD_INTERRUPT_STATUS_REPLY_PLLA_TYPE uint8_t
        #define CMD_INTERRUPT_STATUS_REPLY_PLLA_SIZE 8
        #define CMD_INTERRUPT_STATUS_REPLY_PLLA_MASK 0xff
        #define CMD_INTERRUPT_STATUS_REPLY_PLLA_MSB 7
        #define CMD_INTERRUPT_STATUS_REPLY_PLLA_LSB 0
        #define CMD_INTERRUPT_STATUS_REPLY_PLLA_INDEX 4
        #define CMD_INTERRUPT_STATUS_REPLY_PLLA_var() ()
        #define CMD_INTERRUPT_STATUS_REPLY_PLLA_value() ((uint8_t)CMD_INTERRUPT_STATUS_REPLY_PLLA_var())
        #define CMD_INTERRUPT_STATUS_REPLY_PLLA_write_u8(x) (CMD_INTERRUPT_STATUS_REPLY_PLLA_var() = (x))
                /* macros for field PLLA_HITLESS_SWITCH access */
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_HITLESS_SWITCH_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_HITLESS_SWITCH_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_HITLESS_SWITCH_INDEX 4
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_HITLESS_SWITCH_PARAM_MSB 4
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_HITLESS_SWITCH_PARAM_LSB 4
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_HITLESS_SWITCH_MASK 0x10
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_HITLESS_SWITCH_BYTE_MSB 4
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_HITLESS_SWITCH_BYTE_LSB 4
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_HITLESS_SWITCH_BIT 0x10
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_HITLESS_SWITCH_TRUE_BIT 0x10
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_HITLESS_SWITCH_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_HITLESS_SWITCH_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_PLLA_var() = ((CMD_INTERRUPT_STATUS_REPLY_PLLA_var() & ~0x10) | (((x) << 4) & 0x10)))
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_HITLESS_SWITCH_ENUM_CLEAR 0
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_HITLESS_SWITCH_ENUM_ASSERT 1

                /* macros for field PLLA_HOLDOVER access */
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_HOLDOVER_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_HOLDOVER_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_HOLDOVER_INDEX 4
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_HOLDOVER_PARAM_MSB 3
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_HOLDOVER_PARAM_LSB 3
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_HOLDOVER_MASK 0x08
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_HOLDOVER_BYTE_MSB 3
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_HOLDOVER_BYTE_LSB 3
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_HOLDOVER_BIT 0x08
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_HOLDOVER_TRUE_BIT 0x08
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_HOLDOVER_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_HOLDOVER_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_PLLA_var() = ((CMD_INTERRUPT_STATUS_REPLY_PLLA_var() & ~0x08) | (((x) << 3) & 0x08)))
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_HOLDOVER_ENUM_CLEAR 0
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_HOLDOVER_ENUM_ASSERT 1

                /* macros for field PLLA_CYCLE_SLIP access */
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_CYCLE_SLIP_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_CYCLE_SLIP_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_CYCLE_SLIP_INDEX 4
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_CYCLE_SLIP_PARAM_MSB 2
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_CYCLE_SLIP_PARAM_LSB 2
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_CYCLE_SLIP_MASK 0x04
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_CYCLE_SLIP_BYTE_MSB 2
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_CYCLE_SLIP_BYTE_LSB 2
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_CYCLE_SLIP_BIT 0x04
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_CYCLE_SLIP_TRUE_BIT 0x04
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_CYCLE_SLIP_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_CYCLE_SLIP_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_PLLA_var() = ((CMD_INTERRUPT_STATUS_REPLY_PLLA_var() & ~0x04) | (((x) << 2) & 0x04)))
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_CYCLE_SLIP_ENUM_CLEAR 0
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_CYCLE_SLIP_ENUM_ASSERT 1

                /* macros for field PLLA_LOCKED access */
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_LOCKED_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_LOCKED_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_LOCKED_INDEX 4
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_LOCKED_PARAM_MSB 1
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_LOCKED_PARAM_LSB 1
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_LOCKED_MASK 0x02
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_LOCKED_BYTE_MSB 1
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_LOCKED_BYTE_LSB 1
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_LOCKED_BIT 0x02
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_LOCKED_TRUE_BIT 0x02
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_LOCKED_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_LOCKED_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_PLLA_var() = ((CMD_INTERRUPT_STATUS_REPLY_PLLA_var() & ~0x02) | (((x) << 1) & 0x02)))
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_LOCKED_ENUM_CLEAR 0
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_LOCKED_ENUM_ASSERT 1

                /* macros for field PLLA_LOSS_OF_LOCK access */
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_LOSS_OF_LOCK_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_LOSS_OF_LOCK_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_LOSS_OF_LOCK_INDEX 4
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_LOSS_OF_LOCK_PARAM_MSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_LOSS_OF_LOCK_PARAM_LSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_LOSS_OF_LOCK_MASK 0x01
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_LOSS_OF_LOCK_BYTE_MSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_LOSS_OF_LOCK_BYTE_LSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_LOSS_OF_LOCK_BIT 0x01
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_LOSS_OF_LOCK_TRUE_BIT 0x01
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_LOSS_OF_LOCK_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_LOSS_OF_LOCK_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_PLLA_var() = ((CMD_INTERRUPT_STATUS_REPLY_PLLA_var() & ~0x01) | (((x)) & 0x01)))
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_LOSS_OF_LOCK_ENUM_CLEAR 0
                #define CMD_INTERRUPT_STATUS_REPLY_PLLA_PLLA_LOSS_OF_LOCK_ENUM_ASSERT 1

        /* macros for entire REPLY PLLB access of type uint8_t */
        #define CMD_INTERRUPT_STATUS_REPLY_PLLB_TYPE uint8_t
        #define CMD_INTERRUPT_STATUS_REPLY_PLLB_SIZE 8
        #define CMD_INTERRUPT_STATUS_REPLY_PLLB_MASK 0xff
        #define CMD_INTERRUPT_STATUS_REPLY_PLLB_MSB 7
        #define CMD_INTERRUPT_STATUS_REPLY_PLLB_LSB 0
        #define CMD_INTERRUPT_STATUS_REPLY_PLLB_INDEX 5
        #define CMD_INTERRUPT_STATUS_REPLY_PLLB_var() ()
        #define CMD_INTERRUPT_STATUS_REPLY_PLLB_value() ((uint8_t)CMD_INTERRUPT_STATUS_REPLY_PLLB_var())
        #define CMD_INTERRUPT_STATUS_REPLY_PLLB_write_u8(x) (CMD_INTERRUPT_STATUS_REPLY_PLLB_var() = (x))
                /* macros for field PLLB_HITLESS_SWITCH access */
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_HITLESS_SWITCH_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_HITLESS_SWITCH_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_HITLESS_SWITCH_INDEX 5
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_HITLESS_SWITCH_PARAM_MSB 4
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_HITLESS_SWITCH_PARAM_LSB 4
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_HITLESS_SWITCH_MASK 0x10
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_HITLESS_SWITCH_BYTE_MSB 4
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_HITLESS_SWITCH_BYTE_LSB 4
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_HITLESS_SWITCH_BIT 0x10
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_HITLESS_SWITCH_TRUE_BIT 0x10
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_HITLESS_SWITCH_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_HITLESS_SWITCH_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_PLLB_var() = ((CMD_INTERRUPT_STATUS_REPLY_PLLB_var() & ~0x10) | (((x) << 4) & 0x10)))
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_HITLESS_SWITCH_ENUM_CLEAR 0
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_HITLESS_SWITCH_ENUM_ASSERT 1

                /* macros for field PLLB_HOLDOVER access */
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_HOLDOVER_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_HOLDOVER_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_HOLDOVER_INDEX 5
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_HOLDOVER_PARAM_MSB 3
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_HOLDOVER_PARAM_LSB 3
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_HOLDOVER_MASK 0x08
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_HOLDOVER_BYTE_MSB 3
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_HOLDOVER_BYTE_LSB 3
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_HOLDOVER_BIT 0x08
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_HOLDOVER_TRUE_BIT 0x08
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_HOLDOVER_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_HOLDOVER_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_PLLB_var() = ((CMD_INTERRUPT_STATUS_REPLY_PLLB_var() & ~0x08) | (((x) << 3) & 0x08)))
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_HOLDOVER_ENUM_CLEAR 0
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_HOLDOVER_ENUM_ASSERT 1

                /* macros for field PLLB_CYCLE_SLIP access */
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_CYCLE_SLIP_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_CYCLE_SLIP_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_CYCLE_SLIP_INDEX 5
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_CYCLE_SLIP_PARAM_MSB 2
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_CYCLE_SLIP_PARAM_LSB 2
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_CYCLE_SLIP_MASK 0x04
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_CYCLE_SLIP_BYTE_MSB 2
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_CYCLE_SLIP_BYTE_LSB 2
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_CYCLE_SLIP_BIT 0x04
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_CYCLE_SLIP_TRUE_BIT 0x04
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_CYCLE_SLIP_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_CYCLE_SLIP_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_PLLB_var() = ((CMD_INTERRUPT_STATUS_REPLY_PLLB_var() & ~0x04) | (((x) << 2) & 0x04)))
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_CYCLE_SLIP_ENUM_CLEAR 0
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_CYCLE_SLIP_ENUM_ASSERT 1

                /* macros for field PLLB_LOCKED access */
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_LOCKED_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_LOCKED_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_LOCKED_INDEX 5
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_LOCKED_PARAM_MSB 1
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_LOCKED_PARAM_LSB 1
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_LOCKED_MASK 0x02
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_LOCKED_BYTE_MSB 1
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_LOCKED_BYTE_LSB 1
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_LOCKED_BIT 0x02
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_LOCKED_TRUE_BIT 0x02
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_LOCKED_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_LOCKED_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_PLLB_var() = ((CMD_INTERRUPT_STATUS_REPLY_PLLB_var() & ~0x02) | (((x) << 1) & 0x02)))
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_LOCKED_ENUM_CLEAR 0
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_LOCKED_ENUM_ASSERT 1

                /* macros for field PLLB_LOSS_OF_LOCK access */
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_LOSS_OF_LOCK_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_LOSS_OF_LOCK_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_LOSS_OF_LOCK_INDEX 5
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_LOSS_OF_LOCK_PARAM_MSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_LOSS_OF_LOCK_PARAM_LSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_LOSS_OF_LOCK_MASK 0x01
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_LOSS_OF_LOCK_BYTE_MSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_LOSS_OF_LOCK_BYTE_LSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_LOSS_OF_LOCK_BIT 0x01
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_LOSS_OF_LOCK_TRUE_BIT 0x01
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_LOSS_OF_LOCK_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_LOSS_OF_LOCK_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_PLLB_var() = ((CMD_INTERRUPT_STATUS_REPLY_PLLB_var() & ~0x01) | (((x)) & 0x01)))
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_LOSS_OF_LOCK_ENUM_CLEAR 0
                #define CMD_INTERRUPT_STATUS_REPLY_PLLB_PLLB_LOSS_OF_LOCK_ENUM_ASSERT 1

        /* macros for entire REPLY GENERAL access of type uint8_t */
        #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_TYPE uint8_t
        #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_SIZE 8
        #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_MASK 0xff
        #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_MSB 7
        #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_LSB 0
        #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_INDEX 6
        #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_var() ()
        #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_value() ((uint8_t)CMD_INTERRUPT_STATUS_REPLY_GENERAL_var())
        #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_write_u8(x) (CMD_INTERRUPT_STATUS_REPLY_GENERAL_var() = (x))
                /* macros for field I2C_SMBUS access */
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_I2C_SMBUS_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_I2C_SMBUS_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_I2C_SMBUS_INDEX 6
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_I2C_SMBUS_PARAM_MSB 5
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_I2C_SMBUS_PARAM_LSB 5
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_I2C_SMBUS_MASK 0x20
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_I2C_SMBUS_BYTE_MSB 5
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_I2C_SMBUS_BYTE_LSB 5
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_I2C_SMBUS_BIT 0x20
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_I2C_SMBUS_TRUE_BIT 0x20
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_I2C_SMBUS_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_I2C_SMBUS_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_GENERAL_var() = ((CMD_INTERRUPT_STATUS_REPLY_GENERAL_var() & ~0x20) | (((x) << 5) & 0x20)))
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_I2C_SMBUS_ENUM_NO_I2C_SMBUS_TIMEOUT 0
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_I2C_SMBUS_ENUM_I2C_SMBUS_TIMEOUT 1

                /* macros for field WATCHDOG_TIMER access */
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_WATCHDOG_TIMER_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_WATCHDOG_TIMER_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_WATCHDOG_TIMER_INDEX 6
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_WATCHDOG_TIMER_PARAM_MSB 4
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_WATCHDOG_TIMER_PARAM_LSB 4
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_WATCHDOG_TIMER_MASK 0x10
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_WATCHDOG_TIMER_BYTE_MSB 4
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_WATCHDOG_TIMER_BYTE_LSB 4
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_WATCHDOG_TIMER_BIT 0x10
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_WATCHDOG_TIMER_TRUE_BIT 0x10
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_WATCHDOG_TIMER_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_WATCHDOG_TIMER_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_GENERAL_var() = ((CMD_INTERRUPT_STATUS_REPLY_GENERAL_var() & ~0x10) | (((x) << 4) & 0x10)))
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_WATCHDOG_TIMER_ENUM_NO_WATCHDOG_TIMEOUT 0
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_WATCHDOG_TIMER_ENUM_WATCHDOG_TIMEOUT 1

                /* macros for field SYSTEM_FAULT access */
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_SYSTEM_FAULT_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_SYSTEM_FAULT_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_SYSTEM_FAULT_INDEX 6
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_SYSTEM_FAULT_PARAM_MSB 3
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_SYSTEM_FAULT_PARAM_LSB 3
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_SYSTEM_FAULT_MASK 0x08
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_SYSTEM_FAULT_BYTE_MSB 3
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_SYSTEM_FAULT_BYTE_LSB 3
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_SYSTEM_FAULT_BIT 0x08
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_SYSTEM_FAULT_TRUE_BIT 0x08
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_SYSTEM_FAULT_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_SYSTEM_FAULT_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_GENERAL_var() = ((CMD_INTERRUPT_STATUS_REPLY_GENERAL_var() & ~0x08) | (((x) << 3) & 0x08)))
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_SYSTEM_FAULT_ENUM_NO_SYSTEM_FAULT 0
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_SYSTEM_FAULT_ENUM_SYSTEM_FAULT 1

                /* macros for field INNERLOOP_LOSS_OF_REFERENCE access */
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_INNERLOOP_LOSS_OF_REFERENCE_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_INNERLOOP_LOSS_OF_REFERENCE_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_INNERLOOP_LOSS_OF_REFERENCE_INDEX 6
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_INNERLOOP_LOSS_OF_REFERENCE_PARAM_MSB 2
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_INNERLOOP_LOSS_OF_REFERENCE_PARAM_LSB 2
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_INNERLOOP_LOSS_OF_REFERENCE_MASK 0x04
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_INNERLOOP_LOSS_OF_REFERENCE_BYTE_MSB 2
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_INNERLOOP_LOSS_OF_REFERENCE_BYTE_LSB 2
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_INNERLOOP_LOSS_OF_REFERENCE_BIT 0x04
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_INNERLOOP_LOSS_OF_REFERENCE_TRUE_BIT 0x04
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_INNERLOOP_LOSS_OF_REFERENCE_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_INNERLOOP_LOSS_OF_REFERENCE_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_GENERAL_var() = ((CMD_INTERRUPT_STATUS_REPLY_GENERAL_var() & ~0x04) | (((x) << 2) & 0x04)))
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_INNERLOOP_LOSS_OF_REFERENCE_ENUM_NO_LOSS_OF_REFERENCE 0
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_INNERLOOP_LOSS_OF_REFERENCE_ENUM_LOSS_OF_REFERENCE 1

                /* macros for field INNERLOOP_LOSS_OF_LOCK access */
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_INNERLOOP_LOSS_OF_LOCK_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_INNERLOOP_LOSS_OF_LOCK_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_INNERLOOP_LOSS_OF_LOCK_INDEX 6
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_INNERLOOP_LOSS_OF_LOCK_PARAM_MSB 1
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_INNERLOOP_LOSS_OF_LOCK_PARAM_LSB 1
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_INNERLOOP_LOSS_OF_LOCK_MASK 0x02
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_INNERLOOP_LOSS_OF_LOCK_BYTE_MSB 1
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_INNERLOOP_LOSS_OF_LOCK_BYTE_LSB 1
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_INNERLOOP_LOSS_OF_LOCK_BIT 0x02
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_INNERLOOP_LOSS_OF_LOCK_TRUE_BIT 0x02
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_INNERLOOP_LOSS_OF_LOCK_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_INNERLOOP_LOSS_OF_LOCK_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_GENERAL_var() = ((CMD_INTERRUPT_STATUS_REPLY_GENERAL_var() & ~0x02) | (((x) << 1) & 0x02)))
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_INNERLOOP_LOSS_OF_LOCK_ENUM_NO_LOSS_OF_LOCK 0
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_INNERLOOP_LOSS_OF_LOCK_ENUM_LOSS_OF_LOCK 1

                /* macros for field SYSTEM_CALIBRATION access */
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_SYSTEM_CALIBRATION_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_SYSTEM_CALIBRATION_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_SYSTEM_CALIBRATION_INDEX 6
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_SYSTEM_CALIBRATION_PARAM_MSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_SYSTEM_CALIBRATION_PARAM_LSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_SYSTEM_CALIBRATION_MASK 0x01
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_SYSTEM_CALIBRATION_BYTE_MSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_SYSTEM_CALIBRATION_BYTE_LSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_SYSTEM_CALIBRATION_BIT 0x01
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_SYSTEM_CALIBRATION_TRUE_BIT 0x01
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_SYSTEM_CALIBRATION_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_SYSTEM_CALIBRATION_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_GENERAL_var() = ((CMD_INTERRUPT_STATUS_REPLY_GENERAL_var() & ~0x01) | (((x)) & 0x01)))
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_SYSTEM_CALIBRATION_ENUM_NO_CALIBRATION 0
                #define CMD_INTERRUPT_STATUS_REPLY_GENERAL_SYSTEM_CALIBRATION_ENUM_RECALIBRATION 1

        /* macros for entire REPLY SOFTWARE access of type uint8_t */
        #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_TYPE uint8_t
        #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_SIZE 8
        #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_MASK 0xff
        #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_MSB 7
        #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_LSB 0
        #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_INDEX 7
        #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_var() ()
        #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_value() ((uint8_t)CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_var())
        #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_write_u8(x) (CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_var() = (x))
                /* macros for field INTERRUPT access */
                #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_INTERRUPT_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_INTERRUPT_SIZE 7
                #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_INTERRUPT_INDEX 7
                #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_INTERRUPT_PARAM_MSB 7
                #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_INTERRUPT_PARAM_LSB 1
                #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_INTERRUPT_MASK 0xfe
                #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_INTERRUPT_BYTE_MSB 7
                #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_INTERRUPT_BYTE_LSB 1
                #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_INTERRUPT_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_var() = ((CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_var() & ~0xfe) | (((x) << 1) & 0xfe)))
                #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_INTERRUPT_ENUM_NO_SOFTWARE_INTERRUPT 0
                #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_INTERRUPT_ENUM_SOFTWARE_INTERRUPT 1

                /* macros for field PPS_CLOCK_REARRANGEMENT_THRESHOLD access */
                #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_PPS_CLOCK_REARRANGEMENT_THRESHOLD_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_PPS_CLOCK_REARRANGEMENT_THRESHOLD_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_PPS_CLOCK_REARRANGEMENT_THRESHOLD_INDEX 7
                #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_PPS_CLOCK_REARRANGEMENT_THRESHOLD_PARAM_MSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_PPS_CLOCK_REARRANGEMENT_THRESHOLD_PARAM_LSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_PPS_CLOCK_REARRANGEMENT_THRESHOLD_MASK 0x01
                #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_PPS_CLOCK_REARRANGEMENT_THRESHOLD_BYTE_MSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_PPS_CLOCK_REARRANGEMENT_THRESHOLD_BYTE_LSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_PPS_CLOCK_REARRANGEMENT_THRESHOLD_BIT 0x01
                #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_PPS_CLOCK_REARRANGEMENT_THRESHOLD_TRUE_BIT 0x01
                #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_PPS_CLOCK_REARRANGEMENT_THRESHOLD_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_PPS_CLOCK_REARRANGEMENT_THRESHOLD_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_var() = ((CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_var() & ~0x01) | (((x)) & 0x01)))
                #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_PPS_CLOCK_REARRANGEMENT_THRESHOLD_ENUM_THRESHOLD_NOT_EXCEEDED 0
                #define CMD_INTERRUPT_STATUS_REPLY_SOFTWARE_PPS_CLOCK_REARRANGEMENT_THRESHOLD_ENUM_THRESHOLD_EXCEEDED 1

        /* macros for entire REPLY PHASE_CONTROL access of type uint8_t */
        #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_TYPE uint8_t
        #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_SIZE 8
        #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_MASK 0xff
        #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_MSB 7
        #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_LSB 0
        #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_INDEX 8
        #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_var() ()
        #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_value() ((uint8_t)CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_var())
        #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_write_u8(x) (CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_var() = (x))
                /* macros for field COMMAND_TOO_CLOSE access */
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_COMMAND_TOO_CLOSE_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_COMMAND_TOO_CLOSE_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_COMMAND_TOO_CLOSE_INDEX 8
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_COMMAND_TOO_CLOSE_PARAM_MSB 3
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_COMMAND_TOO_CLOSE_PARAM_LSB 3
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_COMMAND_TOO_CLOSE_MASK 0x08
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_COMMAND_TOO_CLOSE_BYTE_MSB 3
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_COMMAND_TOO_CLOSE_BYTE_LSB 3
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_COMMAND_TOO_CLOSE_BIT 0x08
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_COMMAND_TOO_CLOSE_TRUE_BIT 0x08
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_COMMAND_TOO_CLOSE_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_COMMAND_TOO_CLOSE_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_var() = ((CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_var() & ~0x08) | (((x) << 3) & 0x08)))
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_COMMAND_TOO_CLOSE_ENUM_COMMAND_NORMAL 0
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_COMMAND_TOO_CLOSE_ENUM_COMMAND_TOO_CLOSE 1

                /* macros for field PIN_TOO_SHORT access */
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_PIN_TOO_SHORT_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_PIN_TOO_SHORT_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_PIN_TOO_SHORT_INDEX 8
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_PIN_TOO_SHORT_PARAM_MSB 2
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_PIN_TOO_SHORT_PARAM_LSB 2
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_PIN_TOO_SHORT_MASK 0x04
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_PIN_TOO_SHORT_BYTE_MSB 2
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_PIN_TOO_SHORT_BYTE_LSB 2
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_PIN_TOO_SHORT_BIT 0x04
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_PIN_TOO_SHORT_TRUE_BIT 0x04
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_PIN_TOO_SHORT_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_PIN_TOO_SHORT_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_var() = ((CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_var() & ~0x04) | (((x) << 2) & 0x04)))
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_PIN_TOO_SHORT_ENUM_PIN_NORMAL 0
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_PIN_TOO_SHORT_ENUM_PIN_TOO_SHORT 1

                /* macros for field PHASE_ADJUST_COMPLETE access */
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_PHASE_ADJUST_COMPLETE_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_PHASE_ADJUST_COMPLETE_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_PHASE_ADJUST_COMPLETE_INDEX 8
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_PHASE_ADJUST_COMPLETE_PARAM_MSB 1
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_PHASE_ADJUST_COMPLETE_PARAM_LSB 1
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_PHASE_ADJUST_COMPLETE_MASK 0x02
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_PHASE_ADJUST_COMPLETE_BYTE_MSB 1
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_PHASE_ADJUST_COMPLETE_BYTE_LSB 1
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_PHASE_ADJUST_COMPLETE_BIT 0x02
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_PHASE_ADJUST_COMPLETE_TRUE_BIT 0x02
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_PHASE_ADJUST_COMPLETE_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_PHASE_ADJUST_COMPLETE_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_var() = ((CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_var() & ~0x02) | (((x) << 1) & 0x02)))
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_PHASE_ADJUST_COMPLETE_ENUM_PHASE_ADJUST_NOT_DONE 0
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_PHASE_ADJUST_COMPLETE_ENUM_PHASE_ADJUST_DONE 1

                /* macros for field SYNC_COMPLETE access */
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_SYNC_COMPLETE_TYPE uint16_t
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_SYNC_COMPLETE_SIZE 1
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_SYNC_COMPLETE_INDEX 8
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_SYNC_COMPLETE_PARAM_MSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_SYNC_COMPLETE_PARAM_LSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_SYNC_COMPLETE_MASK 0x01
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_SYNC_COMPLETE_BYTE_MSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_SYNC_COMPLETE_BYTE_LSB 0
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_SYNC_COMPLETE_BIT 0x01
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_SYNC_COMPLETE_TRUE_BIT 0x01
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_SYNC_COMPLETE_FALSE_BIT 0x00
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_SYNC_COMPLETE_write_bitfield(x) (CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_var() = ((CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_var() & ~0x01) | (((x)) & 0x01)))
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_SYNC_COMPLETE_ENUM_SYNC_NOT_DONE 0
                #define CMD_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_SYNC_COMPLETE_ENUM_SYNC_DONE 1

#define CMD_METADATA 0x15
/* METADATA ARGS */
/* METADATA REPLY */
        /* macros for entire REPLY DCO_MR_STEP_SIZE access of type uint32_t */
        #define CMD_METADATA_REPLY_DCO_MR_STEP_SIZE_TYPE uint32_t
        #define CMD_METADATA_REPLY_DCO_MR_STEP_SIZE_SIZE 32
        #define CMD_METADATA_REPLY_DCO_MR_STEP_SIZE_MASK 0xffffffff
        #define CMD_METADATA_REPLY_DCO_MR_STEP_SIZE_MSB 31
        #define CMD_METADATA_REPLY_DCO_MR_STEP_SIZE_LSB 0
        #define CMD_METADATA_REPLY_DCO_MR_STEP_SIZE_INDEX 1
        #define CMD_METADATA_REPLY_DCO_MR_STEP_SIZE_var() ()
        #define CMD_METADATA_REPLY_DCO_MR_STEP_SIZE_value() ((uint32_t)CMD_METADATA_REPLY_DCO_MR_STEP_SIZE_var())
        #define CMD_METADATA_REPLY_DCO_MR_STEP_SIZE_write_u32(x) (CMD_METADATA_REPLY_DCO_MR_STEP_SIZE_var() = (x))
                /* macros for field MR_STEP_SIZE access */
                #define CMD_METADATA_REPLY_DCO_MR_STEP_SIZE_MR_STEP_SIZE_TYPE uint32_t
                #define CMD_METADATA_REPLY_DCO_MR_STEP_SIZE_MR_STEP_SIZE_SIZE 32
                #define CMD_METADATA_REPLY_DCO_MR_STEP_SIZE_MR_STEP_SIZE_INDEX 1
                #define CMD_METADATA_REPLY_DCO_MR_STEP_SIZE_MR_STEP_SIZE_PARAM_MSB 31
                #define CMD_METADATA_REPLY_DCO_MR_STEP_SIZE_MR_STEP_SIZE_PARAM_LSB 0
                #define CMD_METADATA_REPLY_DCO_MR_STEP_SIZE_MR_STEP_SIZE_MASK 0xffffffff
                #define CMD_METADATA_REPLY_DCO_MR_STEP_SIZE_MR_STEP_SIZE_BYTE_MSB 31
                #define CMD_METADATA_REPLY_DCO_MR_STEP_SIZE_MR_STEP_SIZE_BYTE_LSB 0
                #define CMD_METADATA_REPLY_DCO_MR_STEP_SIZE_MR_STEP_SIZE_write_u32(x) (CMD_METADATA_REPLY_DCO_MR_STEP_SIZE_var() = ((x)))
                #define CMD_METADATA_REPLY_DCO_MR_STEP_SIZE_MR_STEP_SIZE_7_0_MASK 0xff
                #define CMD_METADATA_REPLY_DCO_MR_STEP_SIZE_MR_STEP_SIZE_15_8_MASK 0xff
                #define CMD_METADATA_REPLY_DCO_MR_STEP_SIZE_MR_STEP_SIZE_23_16_MASK 0xff
                #define CMD_METADATA_REPLY_DCO_MR_STEP_SIZE_MR_STEP_SIZE_31_24_MASK 0xff

        /* macros for entire REPLY DCO_NA_STEP_SIZE access of type uint32_t */
        #define CMD_METADATA_REPLY_DCO_NA_STEP_SIZE_TYPE uint32_t
        #define CMD_METADATA_REPLY_DCO_NA_STEP_SIZE_SIZE 32
        #define CMD_METADATA_REPLY_DCO_NA_STEP_SIZE_MASK 0xffffffff
        #define CMD_METADATA_REPLY_DCO_NA_STEP_SIZE_MSB 31
        #define CMD_METADATA_REPLY_DCO_NA_STEP_SIZE_LSB 0
        #define CMD_METADATA_REPLY_DCO_NA_STEP_SIZE_INDEX 5
        #define CMD_METADATA_REPLY_DCO_NA_STEP_SIZE_var() ()
        #define CMD_METADATA_REPLY_DCO_NA_STEP_SIZE_value() ((uint32_t)CMD_METADATA_REPLY_DCO_NA_STEP_SIZE_var())
        #define CMD_METADATA_REPLY_DCO_NA_STEP_SIZE_write_u32(x) (CMD_METADATA_REPLY_DCO_NA_STEP_SIZE_var() = (x))
                /* macros for field NA_STEP_SIZE access */
                #define CMD_METADATA_REPLY_DCO_NA_STEP_SIZE_NA_STEP_SIZE_TYPE uint32_t
                #define CMD_METADATA_REPLY_DCO_NA_STEP_SIZE_NA_STEP_SIZE_SIZE 32
                #define CMD_METADATA_REPLY_DCO_NA_STEP_SIZE_NA_STEP_SIZE_INDEX 5
                #define CMD_METADATA_REPLY_DCO_NA_STEP_SIZE_NA_STEP_SIZE_PARAM_MSB 31
                #define CMD_METADATA_REPLY_DCO_NA_STEP_SIZE_NA_STEP_SIZE_PARAM_LSB 0
                #define CMD_METADATA_REPLY_DCO_NA_STEP_SIZE_NA_STEP_SIZE_MASK 0xffffffff
                #define CMD_METADATA_REPLY_DCO_NA_STEP_SIZE_NA_STEP_SIZE_BYTE_MSB 31
                #define CMD_METADATA_REPLY_DCO_NA_STEP_SIZE_NA_STEP_SIZE_BYTE_LSB 0
                #define CMD_METADATA_REPLY_DCO_NA_STEP_SIZE_NA_STEP_SIZE_write_u32(x) (CMD_METADATA_REPLY_DCO_NA_STEP_SIZE_var() = ((x)))
                #define CMD_METADATA_REPLY_DCO_NA_STEP_SIZE_NA_STEP_SIZE_7_0_MASK 0xff
                #define CMD_METADATA_REPLY_DCO_NA_STEP_SIZE_NA_STEP_SIZE_15_8_MASK 0xff
                #define CMD_METADATA_REPLY_DCO_NA_STEP_SIZE_NA_STEP_SIZE_23_16_MASK 0xff
                #define CMD_METADATA_REPLY_DCO_NA_STEP_SIZE_NA_STEP_SIZE_31_24_MASK 0xff

        /* macros for entire REPLY DCO_MA_STEP_SIZE access of type uint32_t */
        #define CMD_METADATA_REPLY_DCO_MA_STEP_SIZE_TYPE uint32_t
        #define CMD_METADATA_REPLY_DCO_MA_STEP_SIZE_SIZE 32
        #define CMD_METADATA_REPLY_DCO_MA_STEP_SIZE_MASK 0xffffffff
        #define CMD_METADATA_REPLY_DCO_MA_STEP_SIZE_MSB 31
        #define CMD_METADATA_REPLY_DCO_MA_STEP_SIZE_LSB 0
        #define CMD_METADATA_REPLY_DCO_MA_STEP_SIZE_INDEX 9
        #define CMD_METADATA_REPLY_DCO_MA_STEP_SIZE_var() ()
        #define CMD_METADATA_REPLY_DCO_MA_STEP_SIZE_value() ((uint32_t)CMD_METADATA_REPLY_DCO_MA_STEP_SIZE_var())
        #define CMD_METADATA_REPLY_DCO_MA_STEP_SIZE_write_u32(x) (CMD_METADATA_REPLY_DCO_MA_STEP_SIZE_var() = (x))
                /* macros for field MA_STEP_SIZE access */
                #define CMD_METADATA_REPLY_DCO_MA_STEP_SIZE_MA_STEP_SIZE_TYPE uint32_t
                #define CMD_METADATA_REPLY_DCO_MA_STEP_SIZE_MA_STEP_SIZE_SIZE 32
                #define CMD_METADATA_REPLY_DCO_MA_STEP_SIZE_MA_STEP_SIZE_INDEX 9
                #define CMD_METADATA_REPLY_DCO_MA_STEP_SIZE_MA_STEP_SIZE_PARAM_MSB 31
                #define CMD_METADATA_REPLY_DCO_MA_STEP_SIZE_MA_STEP_SIZE_PARAM_LSB 0
                #define CMD_METADATA_REPLY_DCO_MA_STEP_SIZE_MA_STEP_SIZE_MASK 0xffffffff
                #define CMD_METADATA_REPLY_DCO_MA_STEP_SIZE_MA_STEP_SIZE_BYTE_MSB 31
                #define CMD_METADATA_REPLY_DCO_MA_STEP_SIZE_MA_STEP_SIZE_BYTE_LSB 0
                #define CMD_METADATA_REPLY_DCO_MA_STEP_SIZE_MA_STEP_SIZE_write_u32(x) (CMD_METADATA_REPLY_DCO_MA_STEP_SIZE_var() = ((x)))
                #define CMD_METADATA_REPLY_DCO_MA_STEP_SIZE_MA_STEP_SIZE_7_0_MASK 0xff
                #define CMD_METADATA_REPLY_DCO_MA_STEP_SIZE_MA_STEP_SIZE_15_8_MASK 0xff
                #define CMD_METADATA_REPLY_DCO_MA_STEP_SIZE_MA_STEP_SIZE_23_16_MASK 0xff
                #define CMD_METADATA_REPLY_DCO_MA_STEP_SIZE_MA_STEP_SIZE_31_24_MASK 0xff

        /* macros for entire REPLY DCO_NB_STEP_SIZE access of type uint32_t */
        #define CMD_METADATA_REPLY_DCO_NB_STEP_SIZE_TYPE uint32_t
        #define CMD_METADATA_REPLY_DCO_NB_STEP_SIZE_SIZE 32
        #define CMD_METADATA_REPLY_DCO_NB_STEP_SIZE_MASK 0xffffffff
        #define CMD_METADATA_REPLY_DCO_NB_STEP_SIZE_MSB 31
        #define CMD_METADATA_REPLY_DCO_NB_STEP_SIZE_LSB 0
        #define CMD_METADATA_REPLY_DCO_NB_STEP_SIZE_INDEX 13
        #define CMD_METADATA_REPLY_DCO_NB_STEP_SIZE_var() ()
        #define CMD_METADATA_REPLY_DCO_NB_STEP_SIZE_value() ((uint32_t)CMD_METADATA_REPLY_DCO_NB_STEP_SIZE_var())
        #define CMD_METADATA_REPLY_DCO_NB_STEP_SIZE_write_u32(x) (CMD_METADATA_REPLY_DCO_NB_STEP_SIZE_var() = (x))
                /* macros for field NB_STEP_SIZE access */
                #define CMD_METADATA_REPLY_DCO_NB_STEP_SIZE_NB_STEP_SIZE_TYPE uint32_t
                #define CMD_METADATA_REPLY_DCO_NB_STEP_SIZE_NB_STEP_SIZE_SIZE 32
                #define CMD_METADATA_REPLY_DCO_NB_STEP_SIZE_NB_STEP_SIZE_INDEX 13
                #define CMD_METADATA_REPLY_DCO_NB_STEP_SIZE_NB_STEP_SIZE_PARAM_MSB 31
                #define CMD_METADATA_REPLY_DCO_NB_STEP_SIZE_NB_STEP_SIZE_PARAM_LSB 0
                #define CMD_METADATA_REPLY_DCO_NB_STEP_SIZE_NB_STEP_SIZE_MASK 0xffffffff
                #define CMD_METADATA_REPLY_DCO_NB_STEP_SIZE_NB_STEP_SIZE_BYTE_MSB 31
                #define CMD_METADATA_REPLY_DCO_NB_STEP_SIZE_NB_STEP_SIZE_BYTE_LSB 0
                #define CMD_METADATA_REPLY_DCO_NB_STEP_SIZE_NB_STEP_SIZE_write_u32(x) (CMD_METADATA_REPLY_DCO_NB_STEP_SIZE_var() = ((x)))
                #define CMD_METADATA_REPLY_DCO_NB_STEP_SIZE_NB_STEP_SIZE_7_0_MASK 0xff
                #define CMD_METADATA_REPLY_DCO_NB_STEP_SIZE_NB_STEP_SIZE_15_8_MASK 0xff
                #define CMD_METADATA_REPLY_DCO_NB_STEP_SIZE_NB_STEP_SIZE_23_16_MASK 0xff
                #define CMD_METADATA_REPLY_DCO_NB_STEP_SIZE_NB_STEP_SIZE_31_24_MASK 0xff

        /* macros for entire REPLY DCO_MB_STEP_SIZE access of type uint32_t */
        #define CMD_METADATA_REPLY_DCO_MB_STEP_SIZE_TYPE uint32_t
        #define CMD_METADATA_REPLY_DCO_MB_STEP_SIZE_SIZE 32
        #define CMD_METADATA_REPLY_DCO_MB_STEP_SIZE_MASK 0xffffffff
        #define CMD_METADATA_REPLY_DCO_MB_STEP_SIZE_MSB 31
        #define CMD_METADATA_REPLY_DCO_MB_STEP_SIZE_LSB 0
        #define CMD_METADATA_REPLY_DCO_MB_STEP_SIZE_INDEX 17
        #define CMD_METADATA_REPLY_DCO_MB_STEP_SIZE_var() ()
        #define CMD_METADATA_REPLY_DCO_MB_STEP_SIZE_value() ((uint32_t)CMD_METADATA_REPLY_DCO_MB_STEP_SIZE_var())
        #define CMD_METADATA_REPLY_DCO_MB_STEP_SIZE_write_u32(x) (CMD_METADATA_REPLY_DCO_MB_STEP_SIZE_var() = (x))
                /* macros for field MB_STEP_SIZE access */
                #define CMD_METADATA_REPLY_DCO_MB_STEP_SIZE_MB_STEP_SIZE_TYPE uint32_t
                #define CMD_METADATA_REPLY_DCO_MB_STEP_SIZE_MB_STEP_SIZE_SIZE 32
                #define CMD_METADATA_REPLY_DCO_MB_STEP_SIZE_MB_STEP_SIZE_INDEX 17
                #define CMD_METADATA_REPLY_DCO_MB_STEP_SIZE_MB_STEP_SIZE_PARAM_MSB 31
                #define CMD_METADATA_REPLY_DCO_MB_STEP_SIZE_MB_STEP_SIZE_PARAM_LSB 0
                #define CMD_METADATA_REPLY_DCO_MB_STEP_SIZE_MB_STEP_SIZE_MASK 0xffffffff
                #define CMD_METADATA_REPLY_DCO_MB_STEP_SIZE_MB_STEP_SIZE_BYTE_MSB 31
                #define CMD_METADATA_REPLY_DCO_MB_STEP_SIZE_MB_STEP_SIZE_BYTE_LSB 0
                #define CMD_METADATA_REPLY_DCO_MB_STEP_SIZE_MB_STEP_SIZE_write_u32(x) (CMD_METADATA_REPLY_DCO_MB_STEP_SIZE_var() = ((x)))
                #define CMD_METADATA_REPLY_DCO_MB_STEP_SIZE_MB_STEP_SIZE_7_0_MASK 0xff
                #define CMD_METADATA_REPLY_DCO_MB_STEP_SIZE_MB_STEP_SIZE_15_8_MASK 0xff
                #define CMD_METADATA_REPLY_DCO_MB_STEP_SIZE_MB_STEP_SIZE_23_16_MASK 0xff
                #define CMD_METADATA_REPLY_DCO_MB_STEP_SIZE_MB_STEP_SIZE_31_24_MASK 0xff

        /* macros for entire REPLY PLAN_OPTIONS access of type uint8_t */
        #define CMD_METADATA_REPLY_PLAN_OPTIONS_TYPE uint8_t
        #define CMD_METADATA_REPLY_PLAN_OPTIONS_SIZE 8
        #define CMD_METADATA_REPLY_PLAN_OPTIONS_MASK 0xff
        #define CMD_METADATA_REPLY_PLAN_OPTIONS_MSB 7
        #define CMD_METADATA_REPLY_PLAN_OPTIONS_LSB 0
        #define CMD_METADATA_REPLY_PLAN_OPTIONS_INDEX 21
        #define CMD_METADATA_REPLY_PLAN_OPTIONS_var() ()
        #define CMD_METADATA_REPLY_PLAN_OPTIONS_value() ((uint8_t)CMD_METADATA_REPLY_PLAN_OPTIONS_var())
        #define CMD_METADATA_REPLY_PLAN_OPTIONS_write_u8(x) (CMD_METADATA_REPLY_PLAN_OPTIONS_var() = (x))
                /* macros for field PPS_PLL access */
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PPS_PLL_TYPE uint16_t
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PPS_PLL_SIZE 1
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PPS_PLL_INDEX 21
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PPS_PLL_PARAM_MSB 2
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PPS_PLL_PARAM_LSB 2
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PPS_PLL_MASK 0x04
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PPS_PLL_BYTE_MSB 2
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PPS_PLL_BYTE_LSB 2
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PPS_PLL_BIT 0x04
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PPS_PLL_TRUE_BIT 0x04
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PPS_PLL_FALSE_BIT 0x00
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PPS_PLL_write_bitfield(x) (CMD_METADATA_REPLY_PLAN_OPTIONS_var() = ((CMD_METADATA_REPLY_PLAN_OPTIONS_var() & ~0x04) | (((x) << 2) & 0x04)))
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PPS_PLL_ENUM_DISABLED 0
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PPS_PLL_ENUM_ENABLED 1

                /* macros for field PPS_STEERED_RF access */
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PPS_STEERED_RF_TYPE uint16_t
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PPS_STEERED_RF_SIZE 1
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PPS_STEERED_RF_INDEX 21
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PPS_STEERED_RF_PARAM_MSB 1
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PPS_STEERED_RF_PARAM_LSB 1
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PPS_STEERED_RF_MASK 0x02
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PPS_STEERED_RF_BYTE_MSB 1
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PPS_STEERED_RF_BYTE_LSB 1
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PPS_STEERED_RF_BIT 0x02
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PPS_STEERED_RF_TRUE_BIT 0x02
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PPS_STEERED_RF_FALSE_BIT 0x00
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PPS_STEERED_RF_write_bitfield(x) (CMD_METADATA_REPLY_PLAN_OPTIONS_var() = ((CMD_METADATA_REPLY_PLAN_OPTIONS_var() & ~0x02) | (((x) << 1) & 0x02)))
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PPS_STEERED_RF_ENUM_DISABLED 0
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PPS_STEERED_RF_ENUM_ENABLED 1

                /* macros for field PTP_STEERED_RF access */
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PTP_STEERED_RF_TYPE uint16_t
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PTP_STEERED_RF_SIZE 1
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PTP_STEERED_RF_INDEX 21
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PTP_STEERED_RF_PARAM_MSB 0
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PTP_STEERED_RF_PARAM_LSB 0
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PTP_STEERED_RF_MASK 0x01
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PTP_STEERED_RF_BYTE_MSB 0
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PTP_STEERED_RF_BYTE_LSB 0
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PTP_STEERED_RF_BIT 0x01
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PTP_STEERED_RF_TRUE_BIT 0x01
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PTP_STEERED_RF_FALSE_BIT 0x00
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PTP_STEERED_RF_write_bitfield(x) (CMD_METADATA_REPLY_PLAN_OPTIONS_var() = ((CMD_METADATA_REPLY_PLAN_OPTIONS_var() & ~0x01) | (((x)) & 0x01)))
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PTP_STEERED_RF_ENUM_DISABLED 0
                #define CMD_METADATA_REPLY_PLAN_OPTIONS_PTP_STEERED_RF_ENUM_ENABLED 1

        /* macros for entire REPLY PHASE_JAM_PPS_OUT_RANGE_HIGH access of type int32_t */
        #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_HIGH_TYPE int32_t
        #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_HIGH_SIZE 32
        #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_HIGH_MASK 0xffffffff
        #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_HIGH_MSB 31
        #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_HIGH_LSB 0
        #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_HIGH_INDEX 22
        #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_HIGH_var() ()
        #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_HIGH_value() ((int32_t)CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_HIGH_var())
        #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_HIGH_write_s32(x) (CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_HIGH_var() = (x))
                /* macros for field RANGE_HIGH access */
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_HIGH_RANGE_HIGH_TYPE int32_t
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_HIGH_RANGE_HIGH_SIZE 32
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_HIGH_RANGE_HIGH_INDEX 22
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_HIGH_RANGE_HIGH_PARAM_MSB 31
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_HIGH_RANGE_HIGH_PARAM_LSB 0
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_HIGH_RANGE_HIGH_MASK 0xffffffff
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_HIGH_RANGE_HIGH_BYTE_MSB 31
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_HIGH_RANGE_HIGH_BYTE_LSB 0
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_HIGH_RANGE_HIGH_write_s32(x) (CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_HIGH_var() = ((x)))
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_HIGH_RANGE_HIGH_7_0_MASK 0xff
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_HIGH_RANGE_HIGH_15_8_MASK 0xff
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_HIGH_RANGE_HIGH_23_16_MASK 0xff
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_HIGH_RANGE_HIGH_31_24_MASK 0xff

        /* macros for entire REPLY PHASE_JAM_PPS_OUT_RANGE_LOW access of type int32_t */
        #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_LOW_TYPE int32_t
        #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_LOW_SIZE 32
        #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_LOW_MASK 0xffffffff
        #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_LOW_MSB 31
        #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_LOW_LSB 0
        #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_LOW_INDEX 26
        #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_LOW_var() ()
        #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_LOW_value() ((int32_t)CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_LOW_var())
        #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_LOW_write_s32(x) (CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_LOW_var() = (x))
                /* macros for field RANGE_LOW access */
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_LOW_RANGE_LOW_TYPE int32_t
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_LOW_RANGE_LOW_SIZE 32
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_LOW_RANGE_LOW_INDEX 26
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_LOW_RANGE_LOW_PARAM_MSB 31
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_LOW_RANGE_LOW_PARAM_LSB 0
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_LOW_RANGE_LOW_MASK 0xffffffff
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_LOW_RANGE_LOW_BYTE_MSB 31
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_LOW_RANGE_LOW_BYTE_LSB 0
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_LOW_RANGE_LOW_write_s32(x) (CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_LOW_var() = ((x)))
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_LOW_RANGE_LOW_7_0_MASK 0xff
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_LOW_RANGE_LOW_15_8_MASK 0xff
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_LOW_RANGE_LOW_23_16_MASK 0xff
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_LOW_RANGE_LOW_31_24_MASK 0xff

        /* macros for entire REPLY PHASE_JAM_PPS_OUT_STEP_SIZE access of type uint64_t */
        #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_TYPE uint64_t
        #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_SIZE 64
        #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_MASK 0xffffffffffffffff
        #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_MSB 63
        #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_LSB 0
        #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_INDEX 30
        #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_var() ()
        #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_value() ((uint64_t)CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_var())
        #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_write_u64(x) (CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_var() = (x))
                /* macros for field PPS_OUT_STEP_SIZE access */
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_PPS_OUT_STEP_SIZE_TYPE uint64_t
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_PPS_OUT_STEP_SIZE_SIZE 64
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_PPS_OUT_STEP_SIZE_INDEX 30
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_PPS_OUT_STEP_SIZE_PARAM_MSB 63
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_PPS_OUT_STEP_SIZE_PARAM_LSB 0
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_PPS_OUT_STEP_SIZE_MASK 0xffffffffffffffff
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_PPS_OUT_STEP_SIZE_BYTE_MSB 63
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_PPS_OUT_STEP_SIZE_BYTE_LSB 0
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_PPS_OUT_STEP_SIZE_write_u64(x) (CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_var() = ((CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_var() & ~0xffffffffffffffff) | (((x)) & 0xffffffffffffffff)))
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_PPS_OUT_STEP_SIZE_7_0_MASK 0xff
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_PPS_OUT_STEP_SIZE_15_8_MASK 0xff
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_PPS_OUT_STEP_SIZE_23_16_MASK 0xff
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_PPS_OUT_STEP_SIZE_31_24_MASK 0xff
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_PPS_OUT_STEP_SIZE_39_32_MASK 0xff
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_PPS_OUT_STEP_SIZE_47_40_MASK 0xff
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_PPS_OUT_STEP_SIZE_55_48_MASK 0xff
                #define CMD_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_PPS_OUT_STEP_SIZE_63_56_MASK 0xff

#define CMD_REFERENCE_STATUS 0x16
/* REFERENCE_STATUS ARGS */
/* REFERENCE_STATUS REPLY */
        /* macros for entire REPLY REFERENCE_CLOCK_VALIDATION access of type uint8_t */
        #define CMD_REFERENCE_STATUS_REPLY_REFERENCE_CLOCK_VALIDATION_TYPE uint8_t
        #define CMD_REFERENCE_STATUS_REPLY_REFERENCE_CLOCK_VALIDATION_SIZE 8
        #define CMD_REFERENCE_STATUS_REPLY_REFERENCE_CLOCK_VALIDATION_MASK 0xff
        #define CMD_REFERENCE_STATUS_REPLY_REFERENCE_CLOCK_VALIDATION_MSB 7
        #define CMD_REFERENCE_STATUS_REPLY_REFERENCE_CLOCK_VALIDATION_LSB 0
        #define CMD_REFERENCE_STATUS_REPLY_REFERENCE_CLOCK_VALIDATION_INDEX 1
        #define CMD_REFERENCE_STATUS_REPLY_REFERENCE_CLOCK_VALIDATION_var() ()
        #define CMD_REFERENCE_STATUS_REPLY_REFERENCE_CLOCK_VALIDATION_value() ((uint8_t)CMD_REFERENCE_STATUS_REPLY_REFERENCE_CLOCK_VALIDATION_var())
        #define CMD_REFERENCE_STATUS_REPLY_REFERENCE_CLOCK_VALIDATION_write_u8(x) (CMD_REFERENCE_STATUS_REPLY_REFERENCE_CLOCK_VALIDATION_var() = (x))
                /* macros for field REFERENCE_CLOCK_STATUS access */
                #define CMD_REFERENCE_STATUS_REPLY_REFERENCE_CLOCK_VALIDATION_REFERENCE_CLOCK_STATUS_TYPE uint16_t
                #define CMD_REFERENCE_STATUS_REPLY_REFERENCE_CLOCK_VALIDATION_REFERENCE_CLOCK_STATUS_SIZE 2
                #define CMD_REFERENCE_STATUS_REPLY_REFERENCE_CLOCK_VALIDATION_REFERENCE_CLOCK_STATUS_INDEX 1
                #define CMD_REFERENCE_STATUS_REPLY_REFERENCE_CLOCK_VALIDATION_REFERENCE_CLOCK_STATUS_PARAM_MSB 1
                #define CMD_REFERENCE_STATUS_REPLY_REFERENCE_CLOCK_VALIDATION_REFERENCE_CLOCK_STATUS_PARAM_LSB 0
                #define CMD_REFERENCE_STATUS_REPLY_REFERENCE_CLOCK_VALIDATION_REFERENCE_CLOCK_STATUS_MASK 0x03
                #define CMD_REFERENCE_STATUS_REPLY_REFERENCE_CLOCK_VALIDATION_REFERENCE_CLOCK_STATUS_BYTE_MSB 1
                #define CMD_REFERENCE_STATUS_REPLY_REFERENCE_CLOCK_VALIDATION_REFERENCE_CLOCK_STATUS_BYTE_LSB 0
                #define CMD_REFERENCE_STATUS_REPLY_REFERENCE_CLOCK_VALIDATION_REFERENCE_CLOCK_STATUS_write_bitfield(x) (CMD_REFERENCE_STATUS_REPLY_REFERENCE_CLOCK_VALIDATION_var() = ((CMD_REFERENCE_STATUS_REPLY_REFERENCE_CLOCK_VALIDATION_var() & ~0x03) | (((x)) & 0x03)))
                #define CMD_REFERENCE_STATUS_REPLY_REFERENCE_CLOCK_VALIDATION_REFERENCE_CLOCK_STATUS_ENUM_VALID 0
                #define CMD_REFERENCE_STATUS_REPLY_REFERENCE_CLOCK_VALIDATION_REFERENCE_CLOCK_STATUS_ENUM_PENDING_SHORT_TERM_FAULT 1
                #define CMD_REFERENCE_STATUS_REPLY_REFERENCE_CLOCK_VALIDATION_REFERENCE_CLOCK_STATUS_ENUM_UNDER_VALIDATION 2
                #define CMD_REFERENCE_STATUS_REPLY_REFERENCE_CLOCK_VALIDATION_REFERENCE_CLOCK_STATUS_ENUM_INVALID 3

        /* macros for entire REPLY LOSS_OF_SIGNAL access of type uint8_t */
        #define CMD_REFERENCE_STATUS_REPLY_LOSS_OF_SIGNAL_TYPE uint8_t
        #define CMD_REFERENCE_STATUS_REPLY_LOSS_OF_SIGNAL_SIZE 8
        #define CMD_REFERENCE_STATUS_REPLY_LOSS_OF_SIGNAL_MASK 0xff
        #define CMD_REFERENCE_STATUS_REPLY_LOSS_OF_SIGNAL_MSB 7
        #define CMD_REFERENCE_STATUS_REPLY_LOSS_OF_SIGNAL_LSB 0
        #define CMD_REFERENCE_STATUS_REPLY_LOSS_OF_SIGNAL_INDEX 2
        #define CMD_REFERENCE_STATUS_REPLY_LOSS_OF_SIGNAL_var() ()
        #define CMD_REFERENCE_STATUS_REPLY_LOSS_OF_SIGNAL_value() ((uint8_t)CMD_REFERENCE_STATUS_REPLY_LOSS_OF_SIGNAL_var())
        #define CMD_REFERENCE_STATUS_REPLY_LOSS_OF_SIGNAL_write_u8(x) (CMD_REFERENCE_STATUS_REPLY_LOSS_OF_SIGNAL_var() = (x))
                /* macros for field LOSS_OF_SIGNAL_FLAG access */
                #define CMD_REFERENCE_STATUS_REPLY_LOSS_OF_SIGNAL_LOSS_OF_SIGNAL_FLAG_TYPE uint16_t
                #define CMD_REFERENCE_STATUS_REPLY_LOSS_OF_SIGNAL_LOSS_OF_SIGNAL_FLAG_SIZE 1
                #define CMD_REFERENCE_STATUS_REPLY_LOSS_OF_SIGNAL_LOSS_OF_SIGNAL_FLAG_INDEX 2
                #define CMD_REFERENCE_STATUS_REPLY_LOSS_OF_SIGNAL_LOSS_OF_SIGNAL_FLAG_PARAM_MSB 0
                #define CMD_REFERENCE_STATUS_REPLY_LOSS_OF_SIGNAL_LOSS_OF_SIGNAL_FLAG_PARAM_LSB 0
                #define CMD_REFERENCE_STATUS_REPLY_LOSS_OF_SIGNAL_LOSS_OF_SIGNAL_FLAG_MASK 0x01
                #define CMD_REFERENCE_STATUS_REPLY_LOSS_OF_SIGNAL_LOSS_OF_SIGNAL_FLAG_BYTE_MSB 0
                #define CMD_REFERENCE_STATUS_REPLY_LOSS_OF_SIGNAL_LOSS_OF_SIGNAL_FLAG_BYTE_LSB 0
                #define CMD_REFERENCE_STATUS_REPLY_LOSS_OF_SIGNAL_LOSS_OF_SIGNAL_FLAG_BIT 0x01
                #define CMD_REFERENCE_STATUS_REPLY_LOSS_OF_SIGNAL_LOSS_OF_SIGNAL_FLAG_TRUE_BIT 0x01
                #define CMD_REFERENCE_STATUS_REPLY_LOSS_OF_SIGNAL_LOSS_OF_SIGNAL_FLAG_FALSE_BIT 0x00
                #define CMD_REFERENCE_STATUS_REPLY_LOSS_OF_SIGNAL_LOSS_OF_SIGNAL_FLAG_write_bitfield(x) (CMD_REFERENCE_STATUS_REPLY_LOSS_OF_SIGNAL_var() = ((CMD_REFERENCE_STATUS_REPLY_LOSS_OF_SIGNAL_var() & ~0x01) | (((x)) & 0x01)))
                #define CMD_REFERENCE_STATUS_REPLY_LOSS_OF_SIGNAL_LOSS_OF_SIGNAL_FLAG_ENUM_CLEAR 0
                #define CMD_REFERENCE_STATUS_REPLY_LOSS_OF_SIGNAL_LOSS_OF_SIGNAL_FLAG_ENUM_ASSERT 1

        /* macros for entire REPLY OUT_OF_FREQUENCY access of type uint8_t */
        #define CMD_REFERENCE_STATUS_REPLY_OUT_OF_FREQUENCY_TYPE uint8_t
        #define CMD_REFERENCE_STATUS_REPLY_OUT_OF_FREQUENCY_SIZE 8
        #define CMD_REFERENCE_STATUS_REPLY_OUT_OF_FREQUENCY_MASK 0xff
        #define CMD_REFERENCE_STATUS_REPLY_OUT_OF_FREQUENCY_MSB 7
        #define CMD_REFERENCE_STATUS_REPLY_OUT_OF_FREQUENCY_LSB 0
        #define CMD_REFERENCE_STATUS_REPLY_OUT_OF_FREQUENCY_INDEX 3
        #define CMD_REFERENCE_STATUS_REPLY_OUT_OF_FREQUENCY_var() ()
        #define CMD_REFERENCE_STATUS_REPLY_OUT_OF_FREQUENCY_value() ((uint8_t)CMD_REFERENCE_STATUS_REPLY_OUT_OF_FREQUENCY_var())
        #define CMD_REFERENCE_STATUS_REPLY_OUT_OF_FREQUENCY_write_u8(x) (CMD_REFERENCE_STATUS_REPLY_OUT_OF_FREQUENCY_var() = (x))
                /* macros for field OUT_OF_FREQUENCY_FLAG access */
                #define CMD_REFERENCE_STATUS_REPLY_OUT_OF_FREQUENCY_OUT_OF_FREQUENCY_FLAG_TYPE uint16_t
                #define CMD_REFERENCE_STATUS_REPLY_OUT_OF_FREQUENCY_OUT_OF_FREQUENCY_FLAG_SIZE 1
                #define CMD_REFERENCE_STATUS_REPLY_OUT_OF_FREQUENCY_OUT_OF_FREQUENCY_FLAG_INDEX 3
                #define CMD_REFERENCE_STATUS_REPLY_OUT_OF_FREQUENCY_OUT_OF_FREQUENCY_FLAG_PARAM_MSB 0
                #define CMD_REFERENCE_STATUS_REPLY_OUT_OF_FREQUENCY_OUT_OF_FREQUENCY_FLAG_PARAM_LSB 0
                #define CMD_REFERENCE_STATUS_REPLY_OUT_OF_FREQUENCY_OUT_OF_FREQUENCY_FLAG_MASK 0x01
                #define CMD_REFERENCE_STATUS_REPLY_OUT_OF_FREQUENCY_OUT_OF_FREQUENCY_FLAG_BYTE_MSB 0
                #define CMD_REFERENCE_STATUS_REPLY_OUT_OF_FREQUENCY_OUT_OF_FREQUENCY_FLAG_BYTE_LSB 0
                #define CMD_REFERENCE_STATUS_REPLY_OUT_OF_FREQUENCY_OUT_OF_FREQUENCY_FLAG_BIT 0x01
                #define CMD_REFERENCE_STATUS_REPLY_OUT_OF_FREQUENCY_OUT_OF_FREQUENCY_FLAG_TRUE_BIT 0x01
                #define CMD_REFERENCE_STATUS_REPLY_OUT_OF_FREQUENCY_OUT_OF_FREQUENCY_FLAG_FALSE_BIT 0x00
                #define CMD_REFERENCE_STATUS_REPLY_OUT_OF_FREQUENCY_OUT_OF_FREQUENCY_FLAG_write_bitfield(x) (CMD_REFERENCE_STATUS_REPLY_OUT_OF_FREQUENCY_var() = ((CMD_REFERENCE_STATUS_REPLY_OUT_OF_FREQUENCY_var() & ~0x01) | (((x)) & 0x01)))
                #define CMD_REFERENCE_STATUS_REPLY_OUT_OF_FREQUENCY_OUT_OF_FREQUENCY_FLAG_ENUM_CLEAR 0
                #define CMD_REFERENCE_STATUS_REPLY_OUT_OF_FREQUENCY_OUT_OF_FREQUENCY_FLAG_ENUM_ASSERT 1

        /* macros for entire REPLY PHASE_MONITOR access of type uint8_t */
        #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_TYPE uint8_t
        #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_SIZE 8
        #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_MASK 0xff
        #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_MSB 7
        #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_LSB 0
        #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_INDEX 4
        #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_var() ()
        #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_value() ((uint8_t)CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_var())
        #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_write_u8(x) (CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_var() = (x))
                /* macros for field PHASE_MONITOR_PHASE_ERROR access */
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_PHASE_ERROR_TYPE uint16_t
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_PHASE_ERROR_SIZE 1
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_PHASE_ERROR_INDEX 4
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_PHASE_ERROR_PARAM_MSB 2
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_PHASE_ERROR_PARAM_LSB 2
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_PHASE_ERROR_MASK 0x04
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_PHASE_ERROR_BYTE_MSB 2
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_PHASE_ERROR_BYTE_LSB 2
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_PHASE_ERROR_BIT 0x04
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_PHASE_ERROR_TRUE_BIT 0x04
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_PHASE_ERROR_FALSE_BIT 0x00
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_PHASE_ERROR_write_bitfield(x) (CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_var() = ((CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_var() & ~0x04) | (((x) << 2) & 0x04)))
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_PHASE_ERROR_ENUM_CLEAR 0
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_PHASE_ERROR_ENUM_ASSERT 1

                /* macros for field PHASE_MONITOR_SIGNAL_LATE access */
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_LATE_TYPE uint16_t
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_LATE_SIZE 1
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_LATE_INDEX 4
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_LATE_PARAM_MSB 1
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_LATE_PARAM_LSB 1
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_LATE_MASK 0x02
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_LATE_BYTE_MSB 1
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_LATE_BYTE_LSB 1
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_LATE_BIT 0x02
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_LATE_TRUE_BIT 0x02
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_LATE_FALSE_BIT 0x00
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_LATE_write_bitfield(x) (CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_var() = ((CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_var() & ~0x02) | (((x) << 1) & 0x02)))
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_LATE_ENUM_CLEAR 0
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_LATE_ENUM_ASSERT 1

                /* macros for field PHASE_MONITOR_SIGNAL_EARLY access */
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_EARLY_TYPE uint16_t
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_EARLY_SIZE 1
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_EARLY_INDEX 4
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_EARLY_PARAM_MSB 0
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_EARLY_PARAM_LSB 0
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_EARLY_MASK 0x01
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_EARLY_BYTE_MSB 0
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_EARLY_BYTE_LSB 0
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_EARLY_BIT 0x01
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_EARLY_TRUE_BIT 0x01
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_EARLY_FALSE_BIT 0x00
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_EARLY_write_bitfield(x) (CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_var() = ((CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_var() & ~0x01) | (((x)) & 0x01)))
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_EARLY_ENUM_CLEAR 0
                #define CMD_REFERENCE_STATUS_REPLY_PHASE_MONITOR_PHASE_MONITOR_SIGNAL_EARLY_ENUM_ASSERT 1

#define CMD_PHASE_READOUT 0x17
/* PHASE_READOUT ARGS */
        /* macros for entire ARG PHASE_GROUP access of type uint8_t */
        #define CMD_PHASE_READOUT_ARG_PHASE_GROUP_TYPE uint8_t
        #define CMD_PHASE_READOUT_ARG_PHASE_GROUP_SIZE 8
        #define CMD_PHASE_READOUT_ARG_PHASE_GROUP_MASK 0xff
        #define CMD_PHASE_READOUT_ARG_PHASE_GROUP_MSB 7
        #define CMD_PHASE_READOUT_ARG_PHASE_GROUP_LSB 0
        #define CMD_PHASE_READOUT_ARG_PHASE_GROUP_INDEX 1
        #define CMD_PHASE_READOUT_ARG_PHASE_GROUP_var() ()
        #define CMD_PHASE_READOUT_ARG_PHASE_GROUP_value() ((uint8_t)CMD_PHASE_READOUT_ARG_PHASE_GROUP_var())
                /* macros for field GROUP_NUMBER access */
                #define CMD_PHASE_READOUT_ARG_PHASE_GROUP_GROUP_NUMBER_TYPE uint8_t
                #define CMD_PHASE_READOUT_ARG_PHASE_GROUP_GROUP_NUMBER_SIZE 4
                #define CMD_PHASE_READOUT_ARG_PHASE_GROUP_GROUP_NUMBER_INDEX 1
                #define CMD_PHASE_READOUT_ARG_PHASE_GROUP_GROUP_NUMBER_PARAM_MSB 3
                #define CMD_PHASE_READOUT_ARG_PHASE_GROUP_GROUP_NUMBER_PARAM_LSB 0
                #define CMD_PHASE_READOUT_ARG_PHASE_GROUP_GROUP_NUMBER_MASK 0x0f
                #define CMD_PHASE_READOUT_ARG_PHASE_GROUP_GROUP_NUMBER_BYTE_MSB 3
                #define CMD_PHASE_READOUT_ARG_PHASE_GROUP_GROUP_NUMBER_BYTE_LSB 0
                #define CMD_PHASE_READOUT_ARG_PHASE_GROUP_GROUP_NUMBER_is_true() (CMD_PHASE_READOUT_ARG_PHASE_GROUP_var() & 0x0f)
                #define CMD_PHASE_READOUT_ARG_PHASE_GROUP_GROUP_NUMBER_value() ((uint8_t)((CMD_PHASE_READOUT_ARG_PHASE_GROUP_var() & 0x0f)))

/* PHASE_READOUT REPLY */
        /* macros for entire REPLY ERRORS access of type uint8_t */
        #define CMD_PHASE_READOUT_REPLY_ERRORS_TYPE uint8_t
        #define CMD_PHASE_READOUT_REPLY_ERRORS_SIZE 8
        #define CMD_PHASE_READOUT_REPLY_ERRORS_MASK 0xff
        #define CMD_PHASE_READOUT_REPLY_ERRORS_MSB 7
        #define CMD_PHASE_READOUT_REPLY_ERRORS_LSB 0
        #define CMD_PHASE_READOUT_REPLY_ERRORS_INDEX 1
        #define CMD_PHASE_READOUT_REPLY_ERRORS_var() ()
        #define CMD_PHASE_READOUT_REPLY_ERRORS_value() ((uint8_t)CMD_PHASE_READOUT_REPLY_ERRORS_var())
        #define CMD_PHASE_READOUT_REPLY_ERRORS_write_u8(x) (CMD_PHASE_READOUT_REPLY_ERRORS_var() = (x))
                /* macros for field ERR_CYC access */
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_CYC_TYPE uint8_t
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_CYC_SIZE 1
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_CYC_INDEX 1
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_CYC_PARAM_MSB 2
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_CYC_PARAM_LSB 2
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_CYC_MASK 0x04
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_CYC_BYTE_MSB 2
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_CYC_BYTE_LSB 2
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_CYC_BIT 0x04
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_CYC_TRUE_BIT 0x04
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_CYC_FALSE_BIT 0x00
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_CYC_write_bitfield(x) (CMD_PHASE_READOUT_REPLY_ERRORS_var() = ((CMD_PHASE_READOUT_REPLY_ERRORS_var() & ~0x04) | (((x) << 2) & 0x04)))

                /* macros for field ERR_TSP access */
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_TSP_TYPE uint8_t
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_TSP_SIZE 1
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_TSP_INDEX 1
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_TSP_PARAM_MSB 1
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_TSP_PARAM_LSB 1
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_TSP_MASK 0x02
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_TSP_BYTE_MSB 1
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_TSP_BYTE_LSB 1
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_TSP_BIT 0x02
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_TSP_TRUE_BIT 0x02
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_TSP_FALSE_BIT 0x00
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_TSP_write_bitfield(x) (CMD_PHASE_READOUT_REPLY_ERRORS_var() = ((CMD_PHASE_READOUT_REPLY_ERRORS_var() & ~0x02) | (((x) << 1) & 0x02)))

                /* macros for field ERR_LOS access */
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_LOS_TYPE uint8_t
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_LOS_SIZE 1
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_LOS_INDEX 1
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_LOS_PARAM_MSB 0
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_LOS_PARAM_LSB 0
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_LOS_MASK 0x01
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_LOS_BYTE_MSB 0
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_LOS_BYTE_LSB 0
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_LOS_BIT 0x01
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_LOS_TRUE_BIT 0x01
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_LOS_FALSE_BIT 0x00
                #define CMD_PHASE_READOUT_REPLY_ERRORS_ERR_LOS_write_bitfield(x) (CMD_PHASE_READOUT_REPLY_ERRORS_var() = ((CMD_PHASE_READOUT_REPLY_ERRORS_var() & ~0x01) | (((x)) & 0x01)))

        /* macros for entire REPLY PHASE_VALID access of type uint8_t */
        #define CMD_PHASE_READOUT_REPLY_PHASE_VALID_TYPE uint8_t
        #define CMD_PHASE_READOUT_REPLY_PHASE_VALID_SIZE 8
        #define CMD_PHASE_READOUT_REPLY_PHASE_VALID_MASK 0xff
        #define CMD_PHASE_READOUT_REPLY_PHASE_VALID_MSB 7
        #define CMD_PHASE_READOUT_REPLY_PHASE_VALID_LSB 0
        #define CMD_PHASE_READOUT_REPLY_PHASE_VALID_INDEX 2
        #define CMD_PHASE_READOUT_REPLY_PHASE_VALID_var() ()
        #define CMD_PHASE_READOUT_REPLY_PHASE_VALID_value() ((uint8_t)CMD_PHASE_READOUT_REPLY_PHASE_VALID_var())
        #define CMD_PHASE_READOUT_REPLY_PHASE_VALID_write_u8(x) (CMD_PHASE_READOUT_REPLY_PHASE_VALID_var() = (x))
                /* macros for field PHRDG_VALID access */
                #define CMD_PHASE_READOUT_REPLY_PHASE_VALID_PHRDG_VALID_TYPE uint8_t
                #define CMD_PHASE_READOUT_REPLY_PHASE_VALID_PHRDG_VALID_SIZE 1
                #define CMD_PHASE_READOUT_REPLY_PHASE_VALID_PHRDG_VALID_INDEX 2
                #define CMD_PHASE_READOUT_REPLY_PHASE_VALID_PHRDG_VALID_PARAM_MSB 0
                #define CMD_PHASE_READOUT_REPLY_PHASE_VALID_PHRDG_VALID_PARAM_LSB 0
                #define CMD_PHASE_READOUT_REPLY_PHASE_VALID_PHRDG_VALID_MASK 0x01
                #define CMD_PHASE_READOUT_REPLY_PHASE_VALID_PHRDG_VALID_BYTE_MSB 0
                #define CMD_PHASE_READOUT_REPLY_PHASE_VALID_PHRDG_VALID_BYTE_LSB 0
                #define CMD_PHASE_READOUT_REPLY_PHASE_VALID_PHRDG_VALID_BIT 0x01
                #define CMD_PHASE_READOUT_REPLY_PHASE_VALID_PHRDG_VALID_TRUE_BIT 0x01
                #define CMD_PHASE_READOUT_REPLY_PHASE_VALID_PHRDG_VALID_FALSE_BIT 0x00
                #define CMD_PHASE_READOUT_REPLY_PHASE_VALID_PHRDG_VALID_write_bitfield(x) (CMD_PHASE_READOUT_REPLY_PHASE_VALID_var() = ((CMD_PHASE_READOUT_REPLY_PHASE_VALID_var() & ~0x01) | (((x)) & 0x01)))

        /* macros for entire REPLY PHASE_READOUT access of type int64_t */
        #define CMD_PHASE_READOUT_REPLY_PHASE_READOUT_TYPE int64_t
        #define CMD_PHASE_READOUT_REPLY_PHASE_READOUT_SIZE 64
        #define CMD_PHASE_READOUT_REPLY_PHASE_READOUT_MASK 0xffffffffffffffff
        #define CMD_PHASE_READOUT_REPLY_PHASE_READOUT_MSB 63
        #define CMD_PHASE_READOUT_REPLY_PHASE_READOUT_LSB 0
        #define CMD_PHASE_READOUT_REPLY_PHASE_READOUT_INDEX 3
        #define CMD_PHASE_READOUT_REPLY_PHASE_READOUT_var() ()
        #define CMD_PHASE_READOUT_REPLY_PHASE_READOUT_value() ((int64_t)CMD_PHASE_READOUT_REPLY_PHASE_READOUT_var())
        #define CMD_PHASE_READOUT_REPLY_PHASE_READOUT_write_s64(x) (CMD_PHASE_READOUT_REPLY_PHASE_READOUT_var() = (x))
                /* macros for field PHASE_DIFFERENCE access */
                #define CMD_PHASE_READOUT_REPLY_PHASE_READOUT_PHASE_DIFFERENCE_TYPE int64_t
                #define CMD_PHASE_READOUT_REPLY_PHASE_READOUT_PHASE_DIFFERENCE_SIZE 64
                #define CMD_PHASE_READOUT_REPLY_PHASE_READOUT_PHASE_DIFFERENCE_INDEX 3
                #define CMD_PHASE_READOUT_REPLY_PHASE_READOUT_PHASE_DIFFERENCE_PARAM_MSB 63
                #define CMD_PHASE_READOUT_REPLY_PHASE_READOUT_PHASE_DIFFERENCE_PARAM_LSB 0
                #define CMD_PHASE_READOUT_REPLY_PHASE_READOUT_PHASE_DIFFERENCE_MASK 0xffffffffffffffff
                #define CMD_PHASE_READOUT_REPLY_PHASE_READOUT_PHASE_DIFFERENCE_BYTE_MSB 63
                #define CMD_PHASE_READOUT_REPLY_PHASE_READOUT_PHASE_DIFFERENCE_BYTE_LSB 0
                #define CMD_PHASE_READOUT_REPLY_PHASE_READOUT_PHASE_DIFFERENCE_write_s64(x) (CMD_PHASE_READOUT_REPLY_PHASE_READOUT_var() = ((x)))
                #define CMD_PHASE_READOUT_REPLY_PHASE_READOUT_PHASE_DIFFERENCE_7_0_MASK 0xff
                #define CMD_PHASE_READOUT_REPLY_PHASE_READOUT_PHASE_DIFFERENCE_15_8_MASK 0xff
                #define CMD_PHASE_READOUT_REPLY_PHASE_READOUT_PHASE_DIFFERENCE_23_16_MASK 0xff
                #define CMD_PHASE_READOUT_REPLY_PHASE_READOUT_PHASE_DIFFERENCE_31_24_MASK 0xff
                #define CMD_PHASE_READOUT_REPLY_PHASE_READOUT_PHASE_DIFFERENCE_39_32_MASK 0xff
                #define CMD_PHASE_READOUT_REPLY_PHASE_READOUT_PHASE_DIFFERENCE_47_40_MASK 0xff
                #define CMD_PHASE_READOUT_REPLY_PHASE_READOUT_PHASE_DIFFERENCE_55_48_MASK 0xff
                #define CMD_PHASE_READOUT_REPLY_PHASE_READOUT_PHASE_DIFFERENCE_63_56_MASK 0xff

#define CMD_INPUT_PERIOD_READOUT 0x18
/* INPUT_PERIOD_READOUT ARGS */
        /* macros for entire ARG REFERENCE_SELECT_A access of type uint8_t */
        #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_TYPE uint8_t
        #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_SIZE 8
        #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_MASK 0xff
        #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_MSB 7
        #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_LSB 0
        #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_INDEX 1
        #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_var() ()
        #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_value() ((uint8_t)CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_var())
                /* macros for field REFERENCE_A access */
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_REFERENCE_A_TYPE uint16_t
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_REFERENCE_A_SIZE 8
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_REFERENCE_A_INDEX 1
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_REFERENCE_A_PARAM_MSB 7
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_REFERENCE_A_PARAM_LSB 0
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_REFERENCE_A_MASK 0xff
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_REFERENCE_A_BYTE_MSB 7
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_REFERENCE_A_BYTE_LSB 0
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_REFERENCE_A_is_true() (CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_var())
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_REFERENCE_A_value() (((CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_var())))
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_REFERENCE_A_ENUM_IN0 0
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_REFERENCE_A_ENUM_IN1 2
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_REFERENCE_A_ENUM_IN2 4
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_REFERENCE_A_ENUM_IN2B 5
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_REFERENCE_A_ENUM_IN3 6
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_REFERENCE_A_ENUM_IN3B 7
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_REFERENCE_A_ENUM_XO 8

        /* macros for entire ARG REFERENCE_SELECT_B access of type uint8_t */
        #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_TYPE uint8_t
        #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_SIZE 8
        #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_MASK 0xff
        #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_MSB 7
        #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_LSB 0
        #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_INDEX 2
        #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_var() ()
        #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_value() ((uint8_t)CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_var())
                /* macros for field REFERENCE_B access */
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_REFERENCE_B_TYPE uint16_t
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_REFERENCE_B_SIZE 8
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_REFERENCE_B_INDEX 2
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_REFERENCE_B_PARAM_MSB 7
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_REFERENCE_B_PARAM_LSB 0
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_REFERENCE_B_MASK 0xff
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_REFERENCE_B_BYTE_MSB 7
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_REFERENCE_B_BYTE_LSB 0
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_REFERENCE_B_is_true() (CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_var())
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_REFERENCE_B_value() (((CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_var())))
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_REFERENCE_B_ENUM_IN0 0
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_REFERENCE_B_ENUM_IN1 2
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_REFERENCE_B_ENUM_IN2 4
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_REFERENCE_B_ENUM_IN2B 5
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_REFERENCE_B_ENUM_IN3 6
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_REFERENCE_B_ENUM_IN3B 7
                #define CMD_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_REFERENCE_B_ENUM_XO 8

/* INPUT_PERIOD_READOUT REPLY */
        /* macros for entire REPLY PERIOD_READOUT_A access of type uint64_t */
        #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_TYPE uint64_t
        #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_SIZE 64
        #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_MASK 0xffffffffffffffff
        #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_MSB 63
        #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_LSB 0
        #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_INDEX 1
        #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_var() ()
        #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_value() ((uint64_t)CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_var())
        #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_write_u64(x) (CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_var() = (x))
                /* macros for field READOUT_A access */
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_READOUT_A_TYPE uint64_t
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_READOUT_A_SIZE 64
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_READOUT_A_INDEX 1
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_READOUT_A_PARAM_MSB 63
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_READOUT_A_PARAM_LSB 0
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_READOUT_A_MASK 0xffffffffffffffff
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_READOUT_A_BYTE_MSB 63
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_READOUT_A_BYTE_LSB 0
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_READOUT_A_write_u64(x) (CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_var() = ((CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_var() & ~0xffffffffffffffff) | (((x)) & 0xffffffffffffffff)))
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_READOUT_A_7_0_MASK 0xff
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_READOUT_A_15_8_MASK 0xff
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_READOUT_A_23_16_MASK 0xff
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_READOUT_A_31_24_MASK 0xff
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_READOUT_A_39_32_MASK 0xff
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_READOUT_A_47_40_MASK 0xff
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_READOUT_A_55_48_MASK 0xff
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_READOUT_A_63_56_MASK 0xff

        /* macros for entire REPLY PERIOD_READOUT_B access of type uint64_t */
        #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_TYPE uint64_t
        #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_SIZE 64
        #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_MASK 0xffffffffffffffff
        #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_MSB 63
        #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_LSB 0
        #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_INDEX 9
        #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_var() ()
        #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_value() ((uint64_t)CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_var())
        #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_write_u64(x) (CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_var() = (x))
                /* macros for field READOUT_B access */
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_READOUT_B_TYPE uint64_t
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_READOUT_B_SIZE 64
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_READOUT_B_INDEX 9
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_READOUT_B_PARAM_MSB 63
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_READOUT_B_PARAM_LSB 0
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_READOUT_B_MASK 0xffffffffffffffff
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_READOUT_B_BYTE_MSB 63
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_READOUT_B_BYTE_LSB 0
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_READOUT_B_write_u64(x) (CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_var() = ((CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_var() & ~0xffffffffffffffff) | (((x)) & 0xffffffffffffffff)))
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_READOUT_B_7_0_MASK 0xff
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_READOUT_B_15_8_MASK 0xff
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_READOUT_B_23_16_MASK 0xff
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_READOUT_B_31_24_MASK 0xff
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_READOUT_B_39_32_MASK 0xff
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_READOUT_B_47_40_MASK 0xff
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_READOUT_B_55_48_MASK 0xff
                #define CMD_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_READOUT_B_63_56_MASK 0xff

#define CMD_TEMPERATURE_READOUT 0x19
/* TEMPERATURE_READOUT ARGS */
/* TEMPERATURE_READOUT REPLY */
        /* macros for entire REPLY TEMPERATURE_READOUT access of type int32_t */
        #define CMD_TEMPERATURE_READOUT_REPLY_TEMPERATURE_READOUT_TYPE int32_t
        #define CMD_TEMPERATURE_READOUT_REPLY_TEMPERATURE_READOUT_SIZE 32
        #define CMD_TEMPERATURE_READOUT_REPLY_TEMPERATURE_READOUT_MASK 0xffffffff
        #define CMD_TEMPERATURE_READOUT_REPLY_TEMPERATURE_READOUT_MSB 31
        #define CMD_TEMPERATURE_READOUT_REPLY_TEMPERATURE_READOUT_LSB 0
        #define CMD_TEMPERATURE_READOUT_REPLY_TEMPERATURE_READOUT_INDEX 1
        #define CMD_TEMPERATURE_READOUT_REPLY_TEMPERATURE_READOUT_var() ()
        #define CMD_TEMPERATURE_READOUT_REPLY_TEMPERATURE_READOUT_value() ((int32_t)CMD_TEMPERATURE_READOUT_REPLY_TEMPERATURE_READOUT_var())
        #define CMD_TEMPERATURE_READOUT_REPLY_TEMPERATURE_READOUT_write_s32(x) (CMD_TEMPERATURE_READOUT_REPLY_TEMPERATURE_READOUT_var() = (x))
                /* macros for field DIE_TEMPERATURE access */
                #define CMD_TEMPERATURE_READOUT_REPLY_TEMPERATURE_READOUT_DIE_TEMPERATURE_TYPE int32_t
                #define CMD_TEMPERATURE_READOUT_REPLY_TEMPERATURE_READOUT_DIE_TEMPERATURE_SIZE 32
                #define CMD_TEMPERATURE_READOUT_REPLY_TEMPERATURE_READOUT_DIE_TEMPERATURE_INDEX 1
                #define CMD_TEMPERATURE_READOUT_REPLY_TEMPERATURE_READOUT_DIE_TEMPERATURE_PARAM_MSB 31
                #define CMD_TEMPERATURE_READOUT_REPLY_TEMPERATURE_READOUT_DIE_TEMPERATURE_PARAM_LSB 0
                #define CMD_TEMPERATURE_READOUT_REPLY_TEMPERATURE_READOUT_DIE_TEMPERATURE_MASK 0xffffffff
                #define CMD_TEMPERATURE_READOUT_REPLY_TEMPERATURE_READOUT_DIE_TEMPERATURE_BYTE_MSB 31
                #define CMD_TEMPERATURE_READOUT_REPLY_TEMPERATURE_READOUT_DIE_TEMPERATURE_BYTE_LSB 0
                #define CMD_TEMPERATURE_READOUT_REPLY_TEMPERATURE_READOUT_DIE_TEMPERATURE_write_s32(x) (CMD_TEMPERATURE_READOUT_REPLY_TEMPERATURE_READOUT_var() = ((CMD_TEMPERATURE_READOUT_REPLY_TEMPERATURE_READOUT_var() & ~0xffffffff) | (((x)) & 0xffffffff)))
                #define CMD_TEMPERATURE_READOUT_REPLY_TEMPERATURE_READOUT_DIE_TEMPERATURE_7_0_MASK 0xff
                #define CMD_TEMPERATURE_READOUT_REPLY_TEMPERATURE_READOUT_DIE_TEMPERATURE_15_8_MASK 0xff
                #define CMD_TEMPERATURE_READOUT_REPLY_TEMPERATURE_READOUT_DIE_TEMPERATURE_23_16_MASK 0xff
                #define CMD_TEMPERATURE_READOUT_REPLY_TEMPERATURE_READOUT_DIE_TEMPERATURE_31_24_MASK 0xff

/* execute_cmds commands */

#define CMD_FINC_DCO 0x20
/* FINC_DCO ARGS */
/* FINC_DCO REPLY */
#define CMD_FDEC_DCO 0x21
/* FDEC_DCO ARGS */
/* FDEC_DCO REPLY */
#define CMD_JESD_SYSREF_PULSER 0x22
/* JESD_SYSREF_PULSER ARGS */
/* JESD_SYSREF_PULSER REPLY */
        /* macros for entire REPLY JESD_SYSREF_PULSER_STATUS access of type uint8_t */
        #define CMD_JESD_SYSREF_PULSER_REPLY_JESD_SYSREF_PULSER_STATUS_TYPE uint8_t
        #define CMD_JESD_SYSREF_PULSER_REPLY_JESD_SYSREF_PULSER_STATUS_SIZE 8
        #define CMD_JESD_SYSREF_PULSER_REPLY_JESD_SYSREF_PULSER_STATUS_MASK 0xff
        #define CMD_JESD_SYSREF_PULSER_REPLY_JESD_SYSREF_PULSER_STATUS_MSB 7
        #define CMD_JESD_SYSREF_PULSER_REPLY_JESD_SYSREF_PULSER_STATUS_LSB 0
        #define CMD_JESD_SYSREF_PULSER_REPLY_JESD_SYSREF_PULSER_STATUS_INDEX 1
        #define CMD_JESD_SYSREF_PULSER_REPLY_JESD_SYSREF_PULSER_STATUS_var() ()
        #define CMD_JESD_SYSREF_PULSER_REPLY_JESD_SYSREF_PULSER_STATUS_value() ((uint8_t)CMD_JESD_SYSREF_PULSER_REPLY_JESD_SYSREF_PULSER_STATUS_var())
        #define CMD_JESD_SYSREF_PULSER_REPLY_JESD_SYSREF_PULSER_STATUS_write_u8(x) (CMD_JESD_SYSREF_PULSER_REPLY_JESD_SYSREF_PULSER_STATUS_var() = (x))
                /* macros for field OPERATION_BUSY access */
                #define CMD_JESD_SYSREF_PULSER_REPLY_JESD_SYSREF_PULSER_STATUS_OPERATION_BUSY_TYPE uint16_t
                #define CMD_JESD_SYSREF_PULSER_REPLY_JESD_SYSREF_PULSER_STATUS_OPERATION_BUSY_SIZE 1
                #define CMD_JESD_SYSREF_PULSER_REPLY_JESD_SYSREF_PULSER_STATUS_OPERATION_BUSY_INDEX 1
                #define CMD_JESD_SYSREF_PULSER_REPLY_JESD_SYSREF_PULSER_STATUS_OPERATION_BUSY_PARAM_MSB 0
                #define CMD_JESD_SYSREF_PULSER_REPLY_JESD_SYSREF_PULSER_STATUS_OPERATION_BUSY_PARAM_LSB 0
                #define CMD_JESD_SYSREF_PULSER_REPLY_JESD_SYSREF_PULSER_STATUS_OPERATION_BUSY_MASK 0x01
                #define CMD_JESD_SYSREF_PULSER_REPLY_JESD_SYSREF_PULSER_STATUS_OPERATION_BUSY_BYTE_MSB 0
                #define CMD_JESD_SYSREF_PULSER_REPLY_JESD_SYSREF_PULSER_STATUS_OPERATION_BUSY_BYTE_LSB 0
                #define CMD_JESD_SYSREF_PULSER_REPLY_JESD_SYSREF_PULSER_STATUS_OPERATION_BUSY_BIT 0x01
                #define CMD_JESD_SYSREF_PULSER_REPLY_JESD_SYSREF_PULSER_STATUS_OPERATION_BUSY_TRUE_BIT 0x01
                #define CMD_JESD_SYSREF_PULSER_REPLY_JESD_SYSREF_PULSER_STATUS_OPERATION_BUSY_FALSE_BIT 0x00
                #define CMD_JESD_SYSREF_PULSER_REPLY_JESD_SYSREF_PULSER_STATUS_OPERATION_BUSY_write_bitfield(x) (CMD_JESD_SYSREF_PULSER_REPLY_JESD_SYSREF_PULSER_STATUS_var() = ((CMD_JESD_SYSREF_PULSER_REPLY_JESD_SYSREF_PULSER_STATUS_var() & ~0x01) | (((x)) & 0x01)))
                #define CMD_JESD_SYSREF_PULSER_REPLY_JESD_SYSREF_PULSER_STATUS_OPERATION_BUSY_ENUM_REQUEST_VALID 0
                #define CMD_JESD_SYSREF_PULSER_REPLY_JESD_SYSREF_PULSER_STATUS_OPERATION_BUSY_ENUM_REQUEST_BUSY 1

#define CMD_MANUAL_INPUT_CLOCK_SELECT 0x23
/* MANUAL_INPUT_CLOCK_SELECT ARGS */
        /* macros for entire ARG PLLX access of type uint8_t */
        #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_PLLX_TYPE uint8_t
        #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_PLLX_SIZE 8
        #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_PLLX_MASK 0xff
        #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_PLLX_MSB 7
        #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_PLLX_LSB 0
        #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_PLLX_INDEX 1
        #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_PLLX_var() ()
        #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_PLLX_value() ((uint8_t)CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_PLLX_var())
                /* macros for field PLL access */
                #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_PLLX_PLL_TYPE uint16_t
                #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_PLLX_PLL_SIZE 8
                #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_PLLX_PLL_INDEX 1
                #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_PLLX_PLL_PARAM_MSB 7
                #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_PLLX_PLL_PARAM_LSB 0
                #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_PLLX_PLL_MASK 0xff
                #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_PLLX_PLL_BYTE_MSB 7
                #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_PLLX_PLL_BYTE_LSB 0
                #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_PLLX_PLL_is_true() (CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_PLLX_var())
                #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_PLLX_PLL_value() (((CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_PLLX_var())))
                #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_PLLX_PLL_ENUM_PLLR 1
                #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_PLLX_PLL_ENUM_PLLA 2
                #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_PLLX_PLL_ENUM_PLLB 4
                #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_PLLX_PLL_ENUM_PPS_PLL 128

        /* macros for entire ARG CLOCK_SELECT access of type uint8_t */
        #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_CLOCK_SELECT_TYPE uint8_t
        #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_CLOCK_SELECT_SIZE 8
        #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_CLOCK_SELECT_MASK 0xff
        #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_CLOCK_SELECT_MSB 7
        #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_CLOCK_SELECT_LSB 0
        #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_CLOCK_SELECT_INDEX 2
        #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_CLOCK_SELECT_var() ()
        #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_CLOCK_SELECT_value() ((uint8_t)CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_CLOCK_SELECT_var())
                /* macros for field INPUT_CLOCK access */
                #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_CLOCK_SELECT_INPUT_CLOCK_TYPE uint16_t
                #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_CLOCK_SELECT_INPUT_CLOCK_SIZE 8
                #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_CLOCK_SELECT_INPUT_CLOCK_INDEX 2
                #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_CLOCK_SELECT_INPUT_CLOCK_PARAM_MSB 7
                #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_CLOCK_SELECT_INPUT_CLOCK_PARAM_LSB 0
                #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_CLOCK_SELECT_INPUT_CLOCK_MASK 0xff
                #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_CLOCK_SELECT_INPUT_CLOCK_BYTE_MSB 7
                #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_CLOCK_SELECT_INPUT_CLOCK_BYTE_LSB 0
                #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_CLOCK_SELECT_INPUT_CLOCK_is_true() (CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_CLOCK_SELECT_var())
                #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_CLOCK_SELECT_INPUT_CLOCK_value() (((CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_CLOCK_SELECT_var())))
                #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_CLOCK_SELECT_INPUT_CLOCK_ENUM_IN0 0
                #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_CLOCK_SELECT_INPUT_CLOCK_ENUM_IN1 2
                #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_CLOCK_SELECT_INPUT_CLOCK_ENUM_IN2 4
                #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_CLOCK_SELECT_INPUT_CLOCK_ENUM_IN2B 5
                #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_CLOCK_SELECT_INPUT_CLOCK_ENUM_IN3 6
                #define CMD_MANUAL_INPUT_CLOCK_SELECT_ARG_CLOCK_SELECT_INPUT_CLOCK_ENUM_IN3B 7

/* MANUAL_INPUT_CLOCK_SELECT REPLY */
#define CMD_VARIABLE_OFFSET_DCO 0x24
/* VARIABLE_OFFSET_DCO ARGS */
        /* macros for entire ARG DIVIDER_SELECT access of type uint8_t */
        #define CMD_VARIABLE_OFFSET_DCO_ARG_DIVIDER_SELECT_TYPE uint8_t
        #define CMD_VARIABLE_OFFSET_DCO_ARG_DIVIDER_SELECT_SIZE 8
        #define CMD_VARIABLE_OFFSET_DCO_ARG_DIVIDER_SELECT_MASK 0xff
        #define CMD_VARIABLE_OFFSET_DCO_ARG_DIVIDER_SELECT_MSB 7
        #define CMD_VARIABLE_OFFSET_DCO_ARG_DIVIDER_SELECT_LSB 0
        #define CMD_VARIABLE_OFFSET_DCO_ARG_DIVIDER_SELECT_INDEX 1
        #define CMD_VARIABLE_OFFSET_DCO_ARG_DIVIDER_SELECT_var() ()
        #define CMD_VARIABLE_OFFSET_DCO_ARG_DIVIDER_SELECT_value() ((uint8_t)CMD_VARIABLE_OFFSET_DCO_ARG_DIVIDER_SELECT_var())
                /* macros for field DIVIDER access */
                #define CMD_VARIABLE_OFFSET_DCO_ARG_DIVIDER_SELECT_DIVIDER_TYPE uint16_t
                #define CMD_VARIABLE_OFFSET_DCO_ARG_DIVIDER_SELECT_DIVIDER_SIZE 8
                #define CMD_VARIABLE_OFFSET_DCO_ARG_DIVIDER_SELECT_DIVIDER_INDEX 1
                #define CMD_VARIABLE_OFFSET_DCO_ARG_DIVIDER_SELECT_DIVIDER_PARAM_MSB 7
                #define CMD_VARIABLE_OFFSET_DCO_ARG_DIVIDER_SELECT_DIVIDER_PARAM_LSB 0
                #define CMD_VARIABLE_OFFSET_DCO_ARG_DIVIDER_SELECT_DIVIDER_MASK 0xff
                #define CMD_VARIABLE_OFFSET_DCO_ARG_DIVIDER_SELECT_DIVIDER_BYTE_MSB 7
                #define CMD_VARIABLE_OFFSET_DCO_ARG_DIVIDER_SELECT_DIVIDER_BYTE_LSB 0
                #define CMD_VARIABLE_OFFSET_DCO_ARG_DIVIDER_SELECT_DIVIDER_is_true() (CMD_VARIABLE_OFFSET_DCO_ARG_DIVIDER_SELECT_var())
                #define CMD_VARIABLE_OFFSET_DCO_ARG_DIVIDER_SELECT_DIVIDER_value() (((CMD_VARIABLE_OFFSET_DCO_ARG_DIVIDER_SELECT_var())))
                #define CMD_VARIABLE_OFFSET_DCO_ARG_DIVIDER_SELECT_DIVIDER_ENUM_MR 1
                #define CMD_VARIABLE_OFFSET_DCO_ARG_DIVIDER_SELECT_DIVIDER_ENUM_NA 2
                #define CMD_VARIABLE_OFFSET_DCO_ARG_DIVIDER_SELECT_DIVIDER_ENUM_MA 4
                #define CMD_VARIABLE_OFFSET_DCO_ARG_DIVIDER_SELECT_DIVIDER_ENUM_NB 8
                #define CMD_VARIABLE_OFFSET_DCO_ARG_DIVIDER_SELECT_DIVIDER_ENUM_MB 16

        /* macros for entire ARG OFFSET access of type int32_t */
        #define CMD_VARIABLE_OFFSET_DCO_ARG_OFFSET_TYPE int32_t
        #define CMD_VARIABLE_OFFSET_DCO_ARG_OFFSET_SIZE 32
        #define CMD_VARIABLE_OFFSET_DCO_ARG_OFFSET_MASK 0xffffffff
        #define CMD_VARIABLE_OFFSET_DCO_ARG_OFFSET_MSB 31
        #define CMD_VARIABLE_OFFSET_DCO_ARG_OFFSET_LSB 0
        #define CMD_VARIABLE_OFFSET_DCO_ARG_OFFSET_INDEX 2
        #define CMD_VARIABLE_OFFSET_DCO_ARG_OFFSET_var() ()
        #define CMD_VARIABLE_OFFSET_DCO_ARG_OFFSET_value() ((int32_t)CMD_VARIABLE_OFFSET_DCO_ARG_OFFSET_var())
                /* macros for field NUM_STEPS access */
                #define CMD_VARIABLE_OFFSET_DCO_ARG_OFFSET_NUM_STEPS_TYPE int32_t
                #define CMD_VARIABLE_OFFSET_DCO_ARG_OFFSET_NUM_STEPS_SIZE 32
                #define CMD_VARIABLE_OFFSET_DCO_ARG_OFFSET_NUM_STEPS_INDEX 2
                #define CMD_VARIABLE_OFFSET_DCO_ARG_OFFSET_NUM_STEPS_MIN 0x80000000
                #define CMD_VARIABLE_OFFSET_DCO_ARG_OFFSET_NUM_STEPS_MAX 0x7fffffff
                #define CMD_VARIABLE_OFFSET_DCO_ARG_OFFSET_NUM_STEPS_PARAM_MSB 31
                #define CMD_VARIABLE_OFFSET_DCO_ARG_OFFSET_NUM_STEPS_PARAM_LSB 0
                #define CMD_VARIABLE_OFFSET_DCO_ARG_OFFSET_NUM_STEPS_MASK 0xffffffff
                #define CMD_VARIABLE_OFFSET_DCO_ARG_OFFSET_NUM_STEPS_BYTE_MSB 31
                #define CMD_VARIABLE_OFFSET_DCO_ARG_OFFSET_NUM_STEPS_BYTE_LSB 0
                #define CMD_VARIABLE_OFFSET_DCO_ARG_OFFSET_NUM_STEPS_is_true() (CMD_VARIABLE_OFFSET_DCO_ARG_OFFSET_var())
                #define CMD_VARIABLE_OFFSET_DCO_ARG_OFFSET_NUM_STEPS_value() ((int32_t)((CMD_VARIABLE_OFFSET_DCO_ARG_OFFSET_var())))
                #define CMD_VARIABLE_OFFSET_DCO_ARG_OFFSET_NUM_STEPS_7_0_MASK 0xff
                #define CMD_VARIABLE_OFFSET_DCO_ARG_OFFSET_NUM_STEPS_15_8_MASK 0xff
                #define CMD_VARIABLE_OFFSET_DCO_ARG_OFFSET_NUM_STEPS_23_16_MASK 0xff
                #define CMD_VARIABLE_OFFSET_DCO_ARG_OFFSET_NUM_STEPS_31_24_MASK 0xff

/* VARIABLE_OFFSET_DCO REPLY */
        /* macros for entire REPLY DCO_STATUS access of type uint8_t */
        #define CMD_VARIABLE_OFFSET_DCO_REPLY_DCO_STATUS_TYPE uint8_t
        #define CMD_VARIABLE_OFFSET_DCO_REPLY_DCO_STATUS_SIZE 8
        #define CMD_VARIABLE_OFFSET_DCO_REPLY_DCO_STATUS_MASK 0xff
        #define CMD_VARIABLE_OFFSET_DCO_REPLY_DCO_STATUS_MSB 7
        #define CMD_VARIABLE_OFFSET_DCO_REPLY_DCO_STATUS_LSB 0
        #define CMD_VARIABLE_OFFSET_DCO_REPLY_DCO_STATUS_INDEX 1
        #define CMD_VARIABLE_OFFSET_DCO_REPLY_DCO_STATUS_var() ()
        #define CMD_VARIABLE_OFFSET_DCO_REPLY_DCO_STATUS_value() ((uint8_t)CMD_VARIABLE_OFFSET_DCO_REPLY_DCO_STATUS_var())
        #define CMD_VARIABLE_OFFSET_DCO_REPLY_DCO_STATUS_write_u8(x) (CMD_VARIABLE_OFFSET_DCO_REPLY_DCO_STATUS_var() = (x))
                /* macros for field OUT_OF_RANGE access */
                #define CMD_VARIABLE_OFFSET_DCO_REPLY_DCO_STATUS_OUT_OF_RANGE_TYPE uint16_t
                #define CMD_VARIABLE_OFFSET_DCO_REPLY_DCO_STATUS_OUT_OF_RANGE_SIZE 1
                #define CMD_VARIABLE_OFFSET_DCO_REPLY_DCO_STATUS_OUT_OF_RANGE_INDEX 1
                #define CMD_VARIABLE_OFFSET_DCO_REPLY_DCO_STATUS_OUT_OF_RANGE_PARAM_MSB 0
                #define CMD_VARIABLE_OFFSET_DCO_REPLY_DCO_STATUS_OUT_OF_RANGE_PARAM_LSB 0
                #define CMD_VARIABLE_OFFSET_DCO_REPLY_DCO_STATUS_OUT_OF_RANGE_MASK 0x01
                #define CMD_VARIABLE_OFFSET_DCO_REPLY_DCO_STATUS_OUT_OF_RANGE_BYTE_MSB 0
                #define CMD_VARIABLE_OFFSET_DCO_REPLY_DCO_STATUS_OUT_OF_RANGE_BYTE_LSB 0
                #define CMD_VARIABLE_OFFSET_DCO_REPLY_DCO_STATUS_OUT_OF_RANGE_BIT 0x01
                #define CMD_VARIABLE_OFFSET_DCO_REPLY_DCO_STATUS_OUT_OF_RANGE_TRUE_BIT 0x01
                #define CMD_VARIABLE_OFFSET_DCO_REPLY_DCO_STATUS_OUT_OF_RANGE_FALSE_BIT 0x00
                #define CMD_VARIABLE_OFFSET_DCO_REPLY_DCO_STATUS_OUT_OF_RANGE_write_bitfield(x) (CMD_VARIABLE_OFFSET_DCO_REPLY_DCO_STATUS_var() = ((CMD_VARIABLE_OFFSET_DCO_REPLY_DCO_STATUS_var() & ~0x01) | (((x)) & 0x01)))
                #define CMD_VARIABLE_OFFSET_DCO_REPLY_DCO_STATUS_OUT_OF_RANGE_ENUM_NOT_OUT_OF_RANGE 0
                #define CMD_VARIABLE_OFFSET_DCO_REPLY_DCO_STATUS_OUT_OF_RANGE_ENUM_OUT_OF_RANGE 1

#define CMD_FORCE_HOLDOVER 0x25
/* FORCE_HOLDOVER ARGS */
        /* macros for entire ARG PLLX access of type uint8_t */
        #define CMD_FORCE_HOLDOVER_ARG_PLLX_TYPE uint8_t
        #define CMD_FORCE_HOLDOVER_ARG_PLLX_SIZE 8
        #define CMD_FORCE_HOLDOVER_ARG_PLLX_MASK 0xff
        #define CMD_FORCE_HOLDOVER_ARG_PLLX_MSB 7
        #define CMD_FORCE_HOLDOVER_ARG_PLLX_LSB 0
        #define CMD_FORCE_HOLDOVER_ARG_PLLX_INDEX 1
        #define CMD_FORCE_HOLDOVER_ARG_PLLX_var() ()
        #define CMD_FORCE_HOLDOVER_ARG_PLLX_value() ((uint8_t)CMD_FORCE_HOLDOVER_ARG_PLLX_var())
                /* macros for field PLL access */
                #define CMD_FORCE_HOLDOVER_ARG_PLLX_PLL_TYPE uint16_t
                #define CMD_FORCE_HOLDOVER_ARG_PLLX_PLL_SIZE 8
                #define CMD_FORCE_HOLDOVER_ARG_PLLX_PLL_INDEX 1
                #define CMD_FORCE_HOLDOVER_ARG_PLLX_PLL_PARAM_MSB 7
                #define CMD_FORCE_HOLDOVER_ARG_PLLX_PLL_PARAM_LSB 0
                #define CMD_FORCE_HOLDOVER_ARG_PLLX_PLL_MASK 0xff
                #define CMD_FORCE_HOLDOVER_ARG_PLLX_PLL_BYTE_MSB 7
                #define CMD_FORCE_HOLDOVER_ARG_PLLX_PLL_BYTE_LSB 0
                #define CMD_FORCE_HOLDOVER_ARG_PLLX_PLL_is_true() (CMD_FORCE_HOLDOVER_ARG_PLLX_var())
                #define CMD_FORCE_HOLDOVER_ARG_PLLX_PLL_value() (((CMD_FORCE_HOLDOVER_ARG_PLLX_var())))
                #define CMD_FORCE_HOLDOVER_ARG_PLLX_PLL_ENUM_PLLR 1
                #define CMD_FORCE_HOLDOVER_ARG_PLLX_PLL_ENUM_PLLA 2
                #define CMD_FORCE_HOLDOVER_ARG_PLLX_PLL_ENUM_PLLB 4
                #define CMD_FORCE_HOLDOVER_ARG_PLLX_PLL_ENUM_PPS_PLL 128

        /* macros for entire ARG HOLDOVER access of type uint8_t */
        #define CMD_FORCE_HOLDOVER_ARG_HOLDOVER_TYPE uint8_t
        #define CMD_FORCE_HOLDOVER_ARG_HOLDOVER_SIZE 8
        #define CMD_FORCE_HOLDOVER_ARG_HOLDOVER_MASK 0xff
        #define CMD_FORCE_HOLDOVER_ARG_HOLDOVER_MSB 7
        #define CMD_FORCE_HOLDOVER_ARG_HOLDOVER_LSB 0
        #define CMD_FORCE_HOLDOVER_ARG_HOLDOVER_INDEX 2
        #define CMD_FORCE_HOLDOVER_ARG_HOLDOVER_var() ()
        #define CMD_FORCE_HOLDOVER_ARG_HOLDOVER_value() ((uint8_t)CMD_FORCE_HOLDOVER_ARG_HOLDOVER_var())
                /* macros for field FORCE_HOLDOVER access */
                #define CMD_FORCE_HOLDOVER_ARG_HOLDOVER_FORCE_HOLDOVER_TYPE uint16_t
                #define CMD_FORCE_HOLDOVER_ARG_HOLDOVER_FORCE_HOLDOVER_SIZE 8
                #define CMD_FORCE_HOLDOVER_ARG_HOLDOVER_FORCE_HOLDOVER_INDEX 2
                #define CMD_FORCE_HOLDOVER_ARG_HOLDOVER_FORCE_HOLDOVER_PARAM_MSB 7
                #define CMD_FORCE_HOLDOVER_ARG_HOLDOVER_FORCE_HOLDOVER_PARAM_LSB 0
                #define CMD_FORCE_HOLDOVER_ARG_HOLDOVER_FORCE_HOLDOVER_MASK 0xff
                #define CMD_FORCE_HOLDOVER_ARG_HOLDOVER_FORCE_HOLDOVER_BYTE_MSB 7
                #define CMD_FORCE_HOLDOVER_ARG_HOLDOVER_FORCE_HOLDOVER_BYTE_LSB 0
                #define CMD_FORCE_HOLDOVER_ARG_HOLDOVER_FORCE_HOLDOVER_is_true() (CMD_FORCE_HOLDOVER_ARG_HOLDOVER_var())
                #define CMD_FORCE_HOLDOVER_ARG_HOLDOVER_FORCE_HOLDOVER_value() (((CMD_FORCE_HOLDOVER_ARG_HOLDOVER_var())))
                #define CMD_FORCE_HOLDOVER_ARG_HOLDOVER_FORCE_HOLDOVER_ENUM_NO_HOLDOVER 0
                #define CMD_FORCE_HOLDOVER_ARG_HOLDOVER_FORCE_HOLDOVER_ENUM_FORCE_HOLDOVER 1

/* FORCE_HOLDOVER REPLY */
#define CMD_PHASE_JAM_PPS_OUT 0x26
/* PHASE_JAM_PPS_OUT ARGS */
        /* macros for entire ARG GROUP_SELECT access of type uint8_t */
        #define CMD_PHASE_JAM_PPS_OUT_ARG_GROUP_SELECT_TYPE uint8_t
        #define CMD_PHASE_JAM_PPS_OUT_ARG_GROUP_SELECT_SIZE 8
        #define CMD_PHASE_JAM_PPS_OUT_ARG_GROUP_SELECT_MASK 0xff
        #define CMD_PHASE_JAM_PPS_OUT_ARG_GROUP_SELECT_MSB 7
        #define CMD_PHASE_JAM_PPS_OUT_ARG_GROUP_SELECT_LSB 0
        #define CMD_PHASE_JAM_PPS_OUT_ARG_GROUP_SELECT_INDEX 1
        #define CMD_PHASE_JAM_PPS_OUT_ARG_GROUP_SELECT_var() ()
        #define CMD_PHASE_JAM_PPS_OUT_ARG_GROUP_SELECT_value() ((uint8_t)CMD_PHASE_JAM_PPS_OUT_ARG_GROUP_SELECT_var())
                /* macros for field GROUP access */
                #define CMD_PHASE_JAM_PPS_OUT_ARG_GROUP_SELECT_GROUP_TYPE uint16_t
                #define CMD_PHASE_JAM_PPS_OUT_ARG_GROUP_SELECT_GROUP_SIZE 8
                #define CMD_PHASE_JAM_PPS_OUT_ARG_GROUP_SELECT_GROUP_INDEX 1
                #define CMD_PHASE_JAM_PPS_OUT_ARG_GROUP_SELECT_GROUP_PARAM_MSB 7
                #define CMD_PHASE_JAM_PPS_OUT_ARG_GROUP_SELECT_GROUP_PARAM_LSB 0
                #define CMD_PHASE_JAM_PPS_OUT_ARG_GROUP_SELECT_GROUP_MASK 0xff
                #define CMD_PHASE_JAM_PPS_OUT_ARG_GROUP_SELECT_GROUP_BYTE_MSB 7
                #define CMD_PHASE_JAM_PPS_OUT_ARG_GROUP_SELECT_GROUP_BYTE_LSB 0
                #define CMD_PHASE_JAM_PPS_OUT_ARG_GROUP_SELECT_GROUP_is_true() (CMD_PHASE_JAM_PPS_OUT_ARG_GROUP_SELECT_var())
                #define CMD_PHASE_JAM_PPS_OUT_ARG_GROUP_SELECT_GROUP_value() (((CMD_PHASE_JAM_PPS_OUT_ARG_GROUP_SELECT_var())))
                #define CMD_PHASE_JAM_PPS_OUT_ARG_GROUP_SELECT_GROUP_ENUM_GROUP0 0

        /* macros for entire ARG OFFSET access of type int32_t */
        #define CMD_PHASE_JAM_PPS_OUT_ARG_OFFSET_TYPE int32_t
        #define CMD_PHASE_JAM_PPS_OUT_ARG_OFFSET_SIZE 32
        #define CMD_PHASE_JAM_PPS_OUT_ARG_OFFSET_MASK 0xffffffff
        #define CMD_PHASE_JAM_PPS_OUT_ARG_OFFSET_MSB 31
        #define CMD_PHASE_JAM_PPS_OUT_ARG_OFFSET_LSB 0
        #define CMD_PHASE_JAM_PPS_OUT_ARG_OFFSET_INDEX 2
        #define CMD_PHASE_JAM_PPS_OUT_ARG_OFFSET_var() ()
        #define CMD_PHASE_JAM_PPS_OUT_ARG_OFFSET_value() ((int32_t)CMD_PHASE_JAM_PPS_OUT_ARG_OFFSET_var())
                /* macros for field NUM_STEPS access */
                #define CMD_PHASE_JAM_PPS_OUT_ARG_OFFSET_NUM_STEPS_TYPE int32_t
                #define CMD_PHASE_JAM_PPS_OUT_ARG_OFFSET_NUM_STEPS_SIZE 32
                #define CMD_PHASE_JAM_PPS_OUT_ARG_OFFSET_NUM_STEPS_INDEX 2
                #define CMD_PHASE_JAM_PPS_OUT_ARG_OFFSET_NUM_STEPS_PARAM_MSB 31
                #define CMD_PHASE_JAM_PPS_OUT_ARG_OFFSET_NUM_STEPS_PARAM_LSB 0
                #define CMD_PHASE_JAM_PPS_OUT_ARG_OFFSET_NUM_STEPS_MASK 0xffffffff
                #define CMD_PHASE_JAM_PPS_OUT_ARG_OFFSET_NUM_STEPS_BYTE_MSB 31
                #define CMD_PHASE_JAM_PPS_OUT_ARG_OFFSET_NUM_STEPS_BYTE_LSB 0
                #define CMD_PHASE_JAM_PPS_OUT_ARG_OFFSET_NUM_STEPS_is_true() (CMD_PHASE_JAM_PPS_OUT_ARG_OFFSET_var())
                #define CMD_PHASE_JAM_PPS_OUT_ARG_OFFSET_NUM_STEPS_value() ((int32_t)((CMD_PHASE_JAM_PPS_OUT_ARG_OFFSET_var())))
                #define CMD_PHASE_JAM_PPS_OUT_ARG_OFFSET_NUM_STEPS_7_0_MASK 0xff
                #define CMD_PHASE_JAM_PPS_OUT_ARG_OFFSET_NUM_STEPS_15_8_MASK 0xff
                #define CMD_PHASE_JAM_PPS_OUT_ARG_OFFSET_NUM_STEPS_23_16_MASK 0xff
                #define CMD_PHASE_JAM_PPS_OUT_ARG_OFFSET_NUM_STEPS_31_24_MASK 0xff

/* PHASE_JAM_PPS_OUT REPLY */
        /* macros for entire REPLY PHASE_JAM_STATUS access of type uint8_t */
        #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_TYPE uint8_t
        #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_SIZE 8
        #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_MASK 0xff
        #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_MSB 7
        #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_LSB 0
        #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_INDEX 1
        #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_var() ()
        #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_value() ((uint8_t)CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_var())
        #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_write_u8(x) (CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_var() = (x))
                /* macros for field OUT_OF_RANGE access */
                #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_OUT_OF_RANGE_TYPE uint16_t
                #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_OUT_OF_RANGE_SIZE 1
                #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_OUT_OF_RANGE_INDEX 1
                #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_OUT_OF_RANGE_PARAM_MSB 1
                #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_OUT_OF_RANGE_PARAM_LSB 1
                #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_OUT_OF_RANGE_MASK 0x02
                #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_OUT_OF_RANGE_BYTE_MSB 1
                #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_OUT_OF_RANGE_BYTE_LSB 1
                #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_OUT_OF_RANGE_BIT 0x02
                #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_OUT_OF_RANGE_TRUE_BIT 0x02
                #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_OUT_OF_RANGE_FALSE_BIT 0x00
                #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_OUT_OF_RANGE_write_bitfield(x) (CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_var() = ((CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_var() & ~0x02) | (((x) << 1) & 0x02)))
                #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_OUT_OF_RANGE_ENUM_NOT_OUT_OF_RANGE 0
                #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_OUT_OF_RANGE_ENUM_OUT_OF_RANGE 1

                /* macros for field PHASE_JAM_BUSY access */
                #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_PHASE_JAM_BUSY_TYPE uint16_t
                #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_PHASE_JAM_BUSY_SIZE 1
                #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_PHASE_JAM_BUSY_INDEX 1
                #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_PHASE_JAM_BUSY_PARAM_MSB 0
                #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_PHASE_JAM_BUSY_PARAM_LSB 0
                #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_PHASE_JAM_BUSY_MASK 0x01
                #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_PHASE_JAM_BUSY_BYTE_MSB 0
                #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_PHASE_JAM_BUSY_BYTE_LSB 0
                #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_PHASE_JAM_BUSY_BIT 0x01
                #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_PHASE_JAM_BUSY_TRUE_BIT 0x01
                #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_PHASE_JAM_BUSY_FALSE_BIT 0x00
                #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_PHASE_JAM_BUSY_write_bitfield(x) (CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_var() = ((CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_var() & ~0x01) | (((x)) & 0x01)))
                #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_PHASE_JAM_BUSY_ENUM_NOT_BUSY 0
                #define CMD_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_PHASE_JAM_BUSY_ENUM_BUSY 1

#define CMD_PPS_RELOCK 0x27
/* PPS_RELOCK ARGS */
/* PPS_RELOCK REPLY */
#define CMD_PPS_FORCE_BLEEDOUT 0x28
/* PPS_FORCE_BLEEDOUT ARGS */
/* PPS_FORCE_BLEEDOUT REPLY */
#define CMD_OUTPUT_ENABLE 0x29
/* OUTPUT_ENABLE ARGS */
        /* macros for entire ARG OUTX access of type uint32_t */
        #define CMD_OUTPUT_ENABLE_ARG_OUTX_TYPE uint32_t
        #define CMD_OUTPUT_ENABLE_ARG_OUTX_SIZE 32
        #define CMD_OUTPUT_ENABLE_ARG_OUTX_MASK 0xffffffff
        #define CMD_OUTPUT_ENABLE_ARG_OUTX_MSB 31
        #define CMD_OUTPUT_ENABLE_ARG_OUTX_LSB 0
        #define CMD_OUTPUT_ENABLE_ARG_OUTX_INDEX 1
        #define CMD_OUTPUT_ENABLE_ARG_OUTX_var() ()
        #define CMD_OUTPUT_ENABLE_ARG_OUTX_value() ((uint32_t)CMD_OUTPUT_ENABLE_ARG_OUTX_var())
                /* macros for field OE7 access */
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE7_TYPE uint16_t
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE7_SIZE 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE7_INDEX 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE7_PARAM_MSB 7
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE7_PARAM_LSB 7
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE7_MASK 0x00000080
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE7_BYTE_MSB 7
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE7_BYTE_LSB 7
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE7_BIT 0x00000080
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE7_TRUE_BIT 0x00000080
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE7_FALSE_BIT 0x00
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE7_is_true() (CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00000080)
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE7_value() (((CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00000080) >> 7))
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE7_ENUM_IGNORE 0
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE7_ENUM_APPLY 1

                /* macros for field OE6 access */
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE6_TYPE uint16_t
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE6_SIZE 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE6_INDEX 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE6_PARAM_MSB 6
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE6_PARAM_LSB 6
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE6_MASK 0x00000040
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE6_BYTE_MSB 6
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE6_BYTE_LSB 6
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE6_BIT 0x00000040
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE6_TRUE_BIT 0x00000040
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE6_FALSE_BIT 0x00
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE6_is_true() (CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00000040)
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE6_value() (((CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00000040) >> 6))
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE6_ENUM_IGNORE 0
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE6_ENUM_APPLY 1

                /* macros for field OE5 access */
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE5_TYPE uint16_t
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE5_SIZE 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE5_INDEX 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE5_PARAM_MSB 5
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE5_PARAM_LSB 5
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE5_MASK 0x00000020
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE5_BYTE_MSB 5
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE5_BYTE_LSB 5
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE5_BIT 0x00000020
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE5_TRUE_BIT 0x00000020
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE5_FALSE_BIT 0x00
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE5_is_true() (CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00000020)
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE5_value() (((CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00000020) >> 5))
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE5_ENUM_IGNORE 0
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE5_ENUM_APPLY 1

                /* macros for field OE4 access */
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE4_TYPE uint16_t
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE4_SIZE 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE4_INDEX 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE4_PARAM_MSB 4
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE4_PARAM_LSB 4
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE4_MASK 0x00000010
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE4_BYTE_MSB 4
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE4_BYTE_LSB 4
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE4_BIT 0x00000010
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE4_TRUE_BIT 0x00000010
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE4_FALSE_BIT 0x00
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE4_is_true() (CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00000010)
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE4_value() (((CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00000010) >> 4))
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE4_ENUM_IGNORE 0
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE4_ENUM_APPLY 1

                /* macros for field OE3 access */
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE3_TYPE uint16_t
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE3_SIZE 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE3_INDEX 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE3_PARAM_MSB 3
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE3_PARAM_LSB 3
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE3_MASK 0x00000008
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE3_BYTE_MSB 3
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE3_BYTE_LSB 3
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE3_BIT 0x00000008
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE3_TRUE_BIT 0x00000008
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE3_FALSE_BIT 0x00
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE3_is_true() (CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00000008)
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE3_value() (((CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00000008) >> 3))
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE3_ENUM_IGNORE 0
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE3_ENUM_APPLY 1

                /* macros for field OE2 access */
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE2_TYPE uint16_t
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE2_SIZE 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE2_INDEX 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE2_PARAM_MSB 2
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE2_PARAM_LSB 2
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE2_MASK 0x00000004
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE2_BYTE_MSB 2
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE2_BYTE_LSB 2
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE2_BIT 0x00000004
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE2_TRUE_BIT 0x00000004
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE2_FALSE_BIT 0x00
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE2_is_true() (CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00000004)
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE2_value() (((CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00000004) >> 2))
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE2_ENUM_IGNORE 0
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE2_ENUM_APPLY 1

                /* macros for field OE1 access */
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE1_TYPE uint16_t
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE1_SIZE 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE1_INDEX 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE1_PARAM_MSB 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE1_PARAM_LSB 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE1_MASK 0x00000002
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE1_BYTE_MSB 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE1_BYTE_LSB 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE1_BIT 0x00000002
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE1_TRUE_BIT 0x00000002
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE1_FALSE_BIT 0x00
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE1_is_true() (CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00000002)
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE1_value() (((CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00000002) >> 1))
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE1_ENUM_IGNORE 0
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE1_ENUM_APPLY 1

                /* macros for field OE0 access */
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE0_TYPE uint16_t
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE0_SIZE 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE0_INDEX 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE0_PARAM_MSB 0
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE0_PARAM_LSB 0
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE0_MASK 0x00000001
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE0_BYTE_MSB 0
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE0_BYTE_LSB 0
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE0_BIT 0x00000001
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE0_TRUE_BIT 0x00000001
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE0_FALSE_BIT 0x00
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE0_is_true() (CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00000001)
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE0_value() (((CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00000001)))
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE0_ENUM_IGNORE 0
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE0_ENUM_APPLY 1

                /* macros for field OE15 access */
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE15_TYPE uint16_t
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE15_SIZE 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE15_INDEX 2
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE15_PARAM_MSB 15
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE15_PARAM_LSB 15
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE15_MASK 0x00008000
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE15_BYTE_MSB 7
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE15_BYTE_LSB 7
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE15_BIT 0x00008000
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE15_TRUE_BIT 0x00008000
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE15_FALSE_BIT 0x00
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE15_is_true() (CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00008000)
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE15_value() (((CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00008000) >> 15))
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE15_ENUM_IGNORE 0
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE15_ENUM_APPLY 1

                /* macros for field OE14 access */
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE14_TYPE uint16_t
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE14_SIZE 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE14_INDEX 2
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE14_PARAM_MSB 14
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE14_PARAM_LSB 14
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE14_MASK 0x00004000
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE14_BYTE_MSB 6
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE14_BYTE_LSB 6
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE14_BIT 0x00004000
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE14_TRUE_BIT 0x00004000
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE14_FALSE_BIT 0x00
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE14_is_true() (CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00004000)
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE14_value() (((CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00004000) >> 14))
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE14_ENUM_IGNORE 0
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE14_ENUM_APPLY 1

                /* macros for field OE13 access */
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE13_TYPE uint16_t
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE13_SIZE 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE13_INDEX 2
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE13_PARAM_MSB 13
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE13_PARAM_LSB 13
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE13_MASK 0x00002000
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE13_BYTE_MSB 5
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE13_BYTE_LSB 5
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE13_BIT 0x00002000
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE13_TRUE_BIT 0x00002000
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE13_FALSE_BIT 0x00
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE13_is_true() (CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00002000)
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE13_value() (((CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00002000) >> 13))
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE13_ENUM_IGNORE 0
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE13_ENUM_APPLY 1

                /* macros for field OE12 access */
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE12_TYPE uint16_t
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE12_SIZE 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE12_INDEX 2
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE12_PARAM_MSB 12
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE12_PARAM_LSB 12
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE12_MASK 0x00001000
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE12_BYTE_MSB 4
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE12_BYTE_LSB 4
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE12_BIT 0x00001000
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE12_TRUE_BIT 0x00001000
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE12_FALSE_BIT 0x00
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE12_is_true() (CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00001000)
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE12_value() (((CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00001000) >> 12))
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE12_ENUM_IGNORE 0
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE12_ENUM_APPLY 1

                /* macros for field OE11 access */
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE11_TYPE uint16_t
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE11_SIZE 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE11_INDEX 2
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE11_PARAM_MSB 11
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE11_PARAM_LSB 11
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE11_MASK 0x00000800
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE11_BYTE_MSB 3
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE11_BYTE_LSB 3
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE11_BIT 0x00000800
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE11_TRUE_BIT 0x00000800
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE11_FALSE_BIT 0x00
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE11_is_true() (CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00000800)
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE11_value() (((CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00000800) >> 11))
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE11_ENUM_IGNORE 0
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE11_ENUM_APPLY 1

                /* macros for field OE10 access */
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE10_TYPE uint16_t
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE10_SIZE 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE10_INDEX 2
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE10_PARAM_MSB 10
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE10_PARAM_LSB 10
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE10_MASK 0x00000400
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE10_BYTE_MSB 2
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE10_BYTE_LSB 2
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE10_BIT 0x00000400
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE10_TRUE_BIT 0x00000400
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE10_FALSE_BIT 0x00
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE10_is_true() (CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00000400)
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE10_value() (((CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00000400) >> 10))
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE10_ENUM_IGNORE 0
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE10_ENUM_APPLY 1

                /* macros for field OE9 access */
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE9_TYPE uint16_t
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE9_SIZE 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE9_INDEX 2
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE9_PARAM_MSB 9
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE9_PARAM_LSB 9
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE9_MASK 0x00000200
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE9_BYTE_MSB 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE9_BYTE_LSB 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE9_BIT 0x00000200
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE9_TRUE_BIT 0x00000200
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE9_FALSE_BIT 0x00
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE9_is_true() (CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00000200)
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE9_value() (((CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00000200) >> 9))
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE9_ENUM_IGNORE 0
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE9_ENUM_APPLY 1

                /* macros for field OE8 access */
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE8_TYPE uint16_t
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE8_SIZE 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE8_INDEX 2
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE8_PARAM_MSB 8
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE8_PARAM_LSB 8
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE8_MASK 0x00000100
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE8_BYTE_MSB 0
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE8_BYTE_LSB 0
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE8_BIT 0x00000100
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE8_TRUE_BIT 0x00000100
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE8_FALSE_BIT 0x00
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE8_is_true() (CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00000100)
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE8_value() (((CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00000100) >> 8))
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE8_ENUM_IGNORE 0
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE8_ENUM_APPLY 1

                /* macros for field OE17 access */
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE17_TYPE uint16_t
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE17_SIZE 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE17_INDEX 3
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE17_PARAM_MSB 17
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE17_PARAM_LSB 17
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE17_MASK 0x00020000
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE17_BYTE_MSB 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE17_BYTE_LSB 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE17_BIT 0x00020000
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE17_TRUE_BIT 0x00020000
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE17_FALSE_BIT 0x00
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE17_is_true() (CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00020000)
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE17_value() (((CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00020000) >> 17))
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE17_ENUM_IGNORE 0
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE17_ENUM_APPLY 1

                /* macros for field OE16 access */
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE16_TYPE uint16_t
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE16_SIZE 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE16_INDEX 3
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE16_PARAM_MSB 16
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE16_PARAM_LSB 16
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE16_MASK 0x00010000
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE16_BYTE_MSB 0
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE16_BYTE_LSB 0
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE16_BIT 0x00010000
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE16_TRUE_BIT 0x00010000
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE16_FALSE_BIT 0x00
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE16_is_true() (CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00010000)
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE16_value() (((CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x00010000) >> 16))
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE16_ENUM_IGNORE 0
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE16_ENUM_APPLY 1

                /* macros for field OE31 access */
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE31_TYPE uint16_t
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE31_SIZE 1
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE31_INDEX 4
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE31_PARAM_MSB 31
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE31_PARAM_LSB 31
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE31_MASK 0x80000000
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE31_BYTE_MSB 7
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE31_BYTE_LSB 7
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE31_BIT 0x80000000
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE31_TRUE_BIT 0x80000000
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE31_FALSE_BIT 0x00
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE31_is_true() (CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x80000000)
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE31_value() (((CMD_OUTPUT_ENABLE_ARG_OUTX_var() & 0x80000000) >> 31))
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE31_ENUM_IGNORE 0
                #define CMD_OUTPUT_ENABLE_ARG_OUTX_OE31_ENUM_APPLY 1

        /* macros for entire ARG ACTION access of type uint8_t */
        #define CMD_OUTPUT_ENABLE_ARG_ACTION_TYPE uint8_t
        #define CMD_OUTPUT_ENABLE_ARG_ACTION_SIZE 8
        #define CMD_OUTPUT_ENABLE_ARG_ACTION_MASK 0xff
        #define CMD_OUTPUT_ENABLE_ARG_ACTION_MSB 7
        #define CMD_OUTPUT_ENABLE_ARG_ACTION_LSB 0
        #define CMD_OUTPUT_ENABLE_ARG_ACTION_INDEX 5
        #define CMD_OUTPUT_ENABLE_ARG_ACTION_var() ()
        #define CMD_OUTPUT_ENABLE_ARG_ACTION_value() ((uint8_t)CMD_OUTPUT_ENABLE_ARG_ACTION_var())
                /* macros for field ENABLE access */
                #define CMD_OUTPUT_ENABLE_ARG_ACTION_ENABLE_TYPE uint16_t
                #define CMD_OUTPUT_ENABLE_ARG_ACTION_ENABLE_SIZE 1
                #define CMD_OUTPUT_ENABLE_ARG_ACTION_ENABLE_INDEX 5
                #define CMD_OUTPUT_ENABLE_ARG_ACTION_ENABLE_PARAM_MSB 0
                #define CMD_OUTPUT_ENABLE_ARG_ACTION_ENABLE_PARAM_LSB 0
                #define CMD_OUTPUT_ENABLE_ARG_ACTION_ENABLE_MASK 0x01
                #define CMD_OUTPUT_ENABLE_ARG_ACTION_ENABLE_BYTE_MSB 0
                #define CMD_OUTPUT_ENABLE_ARG_ACTION_ENABLE_BYTE_LSB 0
                #define CMD_OUTPUT_ENABLE_ARG_ACTION_ENABLE_BIT 0x01
                #define CMD_OUTPUT_ENABLE_ARG_ACTION_ENABLE_TRUE_BIT 0x01
                #define CMD_OUTPUT_ENABLE_ARG_ACTION_ENABLE_FALSE_BIT 0x00
                #define CMD_OUTPUT_ENABLE_ARG_ACTION_ENABLE_is_true() (CMD_OUTPUT_ENABLE_ARG_ACTION_var() & 0x01)
                #define CMD_OUTPUT_ENABLE_ARG_ACTION_ENABLE_value() (((CMD_OUTPUT_ENABLE_ARG_ACTION_var() & 0x01)))
                #define CMD_OUTPUT_ENABLE_ARG_ACTION_ENABLE_ENUM_DISABLE 0
                #define CMD_OUTPUT_ENABLE_ARG_ACTION_ENABLE_ENUM_ENABLE 1

/* OUTPUT_ENABLE REPLY */
#define CMD_CLEAR_STATUS_FLAGS 0x2a
/* CLEAR_STATUS_FLAGS ARGS */
/* CLEAR_STATUS_FLAGS REPLY */

#endif  /* _SYNC_TIMING_ARUBA_CMD_H_ */
