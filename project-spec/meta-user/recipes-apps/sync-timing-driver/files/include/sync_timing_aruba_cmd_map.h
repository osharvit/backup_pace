
/****************************************************************************************/
/**                  Copyright (c) 2018, 2021 Skyworks Solution Inc.                   **/
/****************************************************************************************/
/** This software is provided 'as-is', without any express or implied warranty.        **/
/** In no event will the authors be held liable for any damages arising from the use   **/
/** of this software.                                                                  **/
/** Permission is granted to anyone to use this software for any purpose, including    **/
/** commercial applications, and to alter it and redistribute it freely, subject to    **/
/** the following restrictions:                                                        **/
/** 1. The origin of this software must not be misrepresented; you must not claim that **/
/**    you wrote the original software. If you use this software in a product,         **/
/**    an acknowledgment in the product documentation would be appreciated but is not  **/
/**    required.                                                                       **/
/** 2. Altered source versions must be plainly marked as such, and must not be         **/
/**    misrepresented as being the original software.                                  **/
/** 3. This notice may not be removed or altered from any source distribution.         **/
/****************************************************************************************/

/*
 * THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT!
 */


#ifndef _SYNC_TIMING_ARUBA_CMD_MAP_H_
#define _SYNC_TIMING_ARUBA_CMD_MAP_H_


#ifdef __CC_ARM
/* Allow nameless unions in Keil compiler */
#pragma anon_unions
#endif

/* This section contains command map declarations */
struct cmd_GENERIC_map {
        uint8_t  CMD;
} __attribute__((packed, aligned(1)));

typedef struct cmd_READ_REPLY_map {
        uint8_t  CMD;
} __attribute__((packed, aligned(1))) cmd_READ_REPLY_map_t;

typedef struct cmd_READ_REPLY_REPLY_ERR_map {
        uint16_t  error : 16;
} __attribute__((packed, aligned(1))) cmd_READ_REPLY_REPLY_ERR_map_t;

typedef struct reply_READ_REPLY_map {
        union {
                uint16_t  ERR;
                cmd_READ_REPLY_REPLY_ERR_map_t  sERR;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_READ_REPLY_map_t;

typedef struct cmd_SIO_TEST_ARG_DATA_IN_map {
        uint8_t  data_in : 8;
} __attribute__((packed, aligned(1))) cmd_SIO_TEST_ARG_DATA_IN_map_t;

typedef struct cmd_SIO_TEST_map {
        uint8_t  CMD;
        union {
                uint8_t  DATA_IN[255];
                cmd_SIO_TEST_ARG_DATA_IN_map_t  sDATA_IN[255];
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) cmd_SIO_TEST_map_t;

typedef struct cmd_SIO_TEST_REPLY_CMD_ECHO_map {
        uint8_t  cmd_echo : 8;
} __attribute__((packed, aligned(1))) cmd_SIO_TEST_REPLY_CMD_ECHO_map_t;

typedef struct cmd_SIO_TEST_REPLY_DATA_OUT_map {
        uint8_t  data_out : 8;
} __attribute__((packed, aligned(1))) cmd_SIO_TEST_REPLY_DATA_OUT_map_t;

typedef struct reply_SIO_TEST_map {
        union {
                uint8_t  CMD_ECHO;
                cmd_SIO_TEST_REPLY_CMD_ECHO_map_t  sCMD_ECHO;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  DATA_OUT[255];
                cmd_SIO_TEST_REPLY_DATA_OUT_map_t  sDATA_OUT[255];
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_SIO_TEST_map_t;

typedef struct cmd_SIO_INFO_map {
        uint8_t  CMD;
} __attribute__((packed, aligned(1))) cmd_SIO_INFO_map_t;

typedef struct cmd_SIO_INFO_REPLY_CBS_map {
        uint16_t  cmd_buffer_size : 16;
} __attribute__((packed, aligned(1))) cmd_SIO_INFO_REPLY_CBS_map_t;

typedef struct cmd_SIO_INFO_REPLY_RBS_map {
        uint16_t  reply_buffer_size : 16;
} __attribute__((packed, aligned(1))) cmd_SIO_INFO_REPLY_RBS_map_t;

typedef struct reply_SIO_INFO_map {
        union {
                uint16_t  CBS;
                cmd_SIO_INFO_REPLY_CBS_map_t  sCBS;
        }__attribute__((packed, aligned(1)));
        union {
                uint16_t  RBS;
                cmd_SIO_INFO_REPLY_RBS_map_t  sRBS;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_SIO_INFO_map_t;

typedef struct cmd_APPS_AVAILABLE_map {
        uint8_t  CMD;
} __attribute__((packed, aligned(1))) cmd_APPS_AVAILABLE_map_t;

typedef struct cmd_APPS_AVAILABLE_REPLY_CNT_map {
        uint8_t  count : 8;
} __attribute__((packed, aligned(1))) cmd_APPS_AVAILABLE_REPLY_CNT_map_t;

typedef struct cmd_APPS_AVAILABLE_REPLY_APP_map {
        uint8_t  app_sig : 8;
} __attribute__((packed, aligned(1))) cmd_APPS_AVAILABLE_REPLY_APP_map_t;

typedef struct reply_APPS_AVAILABLE_map {
        union {
                uint8_t  CNT;
                cmd_APPS_AVAILABLE_REPLY_CNT_map_t  sCNT;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  APP[8];
                cmd_APPS_AVAILABLE_REPLY_APP_map_t  sAPP[8];
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_APPS_AVAILABLE_map_t;

typedef struct cmd_APP_SELECT_ARG_APP_map {
        uint8_t  app_sig : 8;
} __attribute__((packed, aligned(1))) cmd_APP_SELECT_ARG_APP_map_t;

typedef struct cmd_APP_SELECT_map {
        uint8_t  CMD;
        union {
                uint8_t  APP;
                cmd_APP_SELECT_ARG_APP_map_t  sAPP;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) cmd_APP_SELECT_map_t;

typedef struct cmd_HOST_LOAD_ARG_DATA_map {
        uint8_t  data : 8;
} __attribute__((packed, aligned(1))) cmd_HOST_LOAD_ARG_DATA_map_t;

typedef struct cmd_HOST_LOAD_map {
        uint8_t  CMD;
        union {
                uint8_t  DATA[1024];
                cmd_HOST_LOAD_ARG_DATA_map_t  sDATA[1024];
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) cmd_HOST_LOAD_map_t;

typedef struct cmd_BOOT_map {
        uint8_t  CMD;
} __attribute__((packed, aligned(1))) cmd_BOOT_map_t;

typedef struct cmd_DEVICE_INFO_map {
        uint8_t  CMD;
} __attribute__((packed, aligned(1))) cmd_DEVICE_INFO_map_t;

typedef struct cmd_DEVICE_INFO_REPLY_PN_map {
        uint16_t  part_number : 16;
} __attribute__((packed, aligned(1))) cmd_DEVICE_INFO_REPLY_PN_map_t;

typedef struct cmd_DEVICE_INFO_REPLY_DG_map {
        uint8_t  device_grade : 8;
} __attribute__((packed, aligned(1))) cmd_DEVICE_INFO_REPLY_DG_map_t;

typedef struct cmd_DEVICE_INFO_REPLY_REV_map {
        uint8_t  device_rev : 8;
} __attribute__((packed, aligned(1))) cmd_DEVICE_INFO_REPLY_REV_map_t;

typedef struct cmd_DEVICE_INFO_REPLY_OPNID_map {
        uint32_t  opnid : 32;
} __attribute__((packed, aligned(1))) cmd_DEVICE_INFO_REPLY_OPNID_map_t;

typedef struct cmd_DEVICE_INFO_REPLY_OPNREV_map {
        uint8_t  opn_revision : 8;
} __attribute__((packed, aligned(1))) cmd_DEVICE_INFO_REPLY_OPNREV_map_t;

typedef struct cmd_DEVICE_INFO_REPLY_TG_map {
        uint16_t  temp_grade : 8;
} __attribute__((packed, aligned(1))) cmd_DEVICE_INFO_REPLY_TG_map_t;

typedef struct cmd_DEVICE_INFO_REPLY_PKG_map {
        uint16_t  package : 8;
} __attribute__((packed, aligned(1))) cmd_DEVICE_INFO_REPLY_PKG_map_t;

typedef struct cmd_DEVICE_INFO_REPLY_MISC_map {
        uint16_t  cevb : 1;
        uint16_t  accutime : 2;
        uint16_t  rsvd_bit3 : 1;
        uint16_t  rsvd_bit4 : 1;
        uint16_t  rsvd_bit5 : 1;
        uint16_t  rsvd_bit6 : 1;
        uint16_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_DEVICE_INFO_REPLY_MISC_map_t;

typedef struct cmd_DEVICE_INFO_REPLY_ROM_map {
        uint8_t  romrev : 8;
} __attribute__((packed, aligned(1))) cmd_DEVICE_INFO_REPLY_ROM_map_t;

typedef struct cmd_DEVICE_INFO_REPLY_MROM_map {
        uint8_t  minorrev : 8;
} __attribute__((packed, aligned(1))) cmd_DEVICE_INFO_REPLY_MROM_map_t;

typedef struct cmd_DEVICE_INFO_REPLY_BROM_map {
        uint8_t  branchrev : 8;
} __attribute__((packed, aligned(1))) cmd_DEVICE_INFO_REPLY_BROM_map_t;

typedef struct cmd_DEVICE_INFO_REPLY_SFLAGS_map {
        uint16_t  build : 2;
        uint16_t  tagged : 1;
        uint16_t  unver : 1;
        uint16_t  mixed : 1;
        uint16_t  externals : 1;
        uint16_t  local : 1;
        uint16_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_DEVICE_INFO_REPLY_SFLAGS_map_t;

typedef struct cmd_DEVICE_INFO_REPLY_M0_map {
        uint8_t  hwsubrev : 4;
        uint8_t  hwrev : 4;
} __attribute__((packed, aligned(1))) cmd_DEVICE_INFO_REPLY_M0_map_t;

typedef struct cmd_DEVICE_INFO_REPLY_M1_map {
        uint8_t  hwvariant : 4;
        uint8_t  bankstructure : 4;
} __attribute__((packed, aligned(1))) cmd_DEVICE_INFO_REPLY_M1_map_t;

typedef struct cmd_DEVICE_INFO_REPLY_SVN_map {
        uint32_t  svn_number : 32;
} __attribute__((packed, aligned(1))) cmd_DEVICE_INFO_REPLY_SVN_map_t;

typedef struct reply_DEVICE_INFO_map {
        union {
                uint16_t  PN;
                cmd_DEVICE_INFO_REPLY_PN_map_t  sPN;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  DG;
                cmd_DEVICE_INFO_REPLY_DG_map_t  sDG;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  REV;
                cmd_DEVICE_INFO_REPLY_REV_map_t  sREV;
        }__attribute__((packed, aligned(1)));
        union {
                uint32_t  OPNID;
                cmd_DEVICE_INFO_REPLY_OPNID_map_t  sOPNID;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  OPNREV;
                cmd_DEVICE_INFO_REPLY_OPNREV_map_t  sOPNREV;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  TG;
                cmd_DEVICE_INFO_REPLY_TG_map_t  sTG;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PKG;
                cmd_DEVICE_INFO_REPLY_PKG_map_t  sPKG;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  MISC;
                cmd_DEVICE_INFO_REPLY_MISC_map_t  sMISC;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  ROM;
                cmd_DEVICE_INFO_REPLY_ROM_map_t  sROM;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  MROM;
                cmd_DEVICE_INFO_REPLY_MROM_map_t  sMROM;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  BROM;
                cmd_DEVICE_INFO_REPLY_BROM_map_t  sBROM;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  SFLAGS;
                cmd_DEVICE_INFO_REPLY_SFLAGS_map_t  sSFLAGS;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  M0;
                cmd_DEVICE_INFO_REPLY_M0_map_t  sM0;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  M1;
                cmd_DEVICE_INFO_REPLY_M1_map_t  sM1;
        }__attribute__((packed, aligned(1)));
        uint8_t  PAD0;
        union {
                uint32_t  SVN;
                cmd_DEVICE_INFO_REPLY_SVN_map_t  sSVN;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_DEVICE_INFO_map_t;

typedef struct cmd_NVM_READ_map {
        uint8_t  CMD;
} __attribute__((packed, aligned(1))) cmd_NVM_READ_map_t;

typedef struct cmd_NVM_STATUS_map {
        uint8_t  CMD;
} __attribute__((packed, aligned(1))) cmd_NVM_STATUS_map_t;

typedef struct cmd_NVM_STATUS_REPLY_ERROR2CNT_map {
        uint8_t  error2cnt : 8;
} __attribute__((packed, aligned(1))) cmd_NVM_STATUS_REPLY_ERROR2CNT_map_t;

typedef struct cmd_NVM_STATUS_REPLY_ERROR1CNT_map {
        uint8_t  error1cnt : 8;
} __attribute__((packed, aligned(1))) cmd_NVM_STATUS_REPLY_ERROR1CNT_map_t;

typedef struct cmd_NVM_STATUS_REPLY_MISC_map {
        uint16_t  noecc : 1;
        uint16_t  crc_error : 1;
        uint16_t  dbp_error : 1;
        uint16_t  unprogrammed : 1;
        uint16_t  rsvd_bit4 : 1;
        uint16_t  rsvd_bit5 : 1;
        uint16_t  rsvd_bit6 : 1;
        uint16_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_NVM_STATUS_REPLY_MISC_map_t;

typedef struct cmd_NVM_STATUS_REPLY_DESCRIPTORS_map {
        uint8_t  descriptors : 8;
} __attribute__((packed, aligned(1))) cmd_NVM_STATUS_REPLY_DESCRIPTORS_map_t;

typedef struct cmd_NVM_STATUS_REPLY_INVALIDATED_map {
        uint8_t  invalidated : 8;
} __attribute__((packed, aligned(1))) cmd_NVM_STATUS_REPLY_INVALIDATED_map_t;

typedef struct reply_NVM_STATUS_map {
        union {
                uint8_t  ERROR2CNT;
                cmd_NVM_STATUS_REPLY_ERROR2CNT_map_t  sERROR2CNT;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  ERROR1CNT;
                cmd_NVM_STATUS_REPLY_ERROR1CNT_map_t  sERROR1CNT;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  MISC;
                cmd_NVM_STATUS_REPLY_MISC_map_t  sMISC;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  DESCRIPTORS;
                cmd_NVM_STATUS_REPLY_DESCRIPTORS_map_t  sDESCRIPTORS;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  INVALIDATED;
                cmd_NVM_STATUS_REPLY_INVALIDATED_map_t  sINVALIDATED;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_NVM_STATUS_map_t;

typedef struct cmd_BOOT_LOG_map {
        uint8_t  CMD;
} __attribute__((packed, aligned(1))) cmd_BOOT_LOG_map_t;

typedef struct cmd_BOOT_LOG_REPLY_ROVER_map {
        uint8_t  rollover : 8;
} __attribute__((packed, aligned(1))) cmd_BOOT_LOG_REPLY_ROVER_map_t;

typedef struct cmd_BOOT_LOG_REPLY_COLL_map {
        uint16_t  collected : 16;
} __attribute__((packed, aligned(1))) cmd_BOOT_LOG_REPLY_COLL_map_t;

typedef struct cmd_BOOT_LOG_REPLY_CNT_map {
        uint16_t  count : 16;
} __attribute__((packed, aligned(1))) cmd_BOOT_LOG_REPLY_CNT_map_t;

typedef struct cmd_BOOT_LOG_REPLY_DATA_map {
        uint8_t  data : 8;
} __attribute__((packed, aligned(1))) cmd_BOOT_LOG_REPLY_DATA_map_t;

typedef struct reply_BOOT_LOG_map {
        union {
                uint8_t  ROVER;
                cmd_BOOT_LOG_REPLY_ROVER_map_t  sROVER;
        }__attribute__((packed, aligned(1)));
        union {
                uint16_t  COLL;
                cmd_BOOT_LOG_REPLY_COLL_map_t  sCOLL;
        }__attribute__((packed, aligned(1)));
        union {
                uint16_t  CNT;
                cmd_BOOT_LOG_REPLY_CNT_map_t  sCNT;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  DATA[255];
                cmd_BOOT_LOG_REPLY_DATA_map_t  sDATA[255];
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_BOOT_LOG_map_t;

typedef struct cmd_CRC_CHECK_ARG_ADDR_map {
        uint16_t  address : 16;
} __attribute__((packed, aligned(1))) cmd_CRC_CHECK_ARG_ADDR_map_t;

typedef struct cmd_CRC_CHECK_ARG_NB_map {
        uint16_t  numbytes : 16;
} __attribute__((packed, aligned(1))) cmd_CRC_CHECK_ARG_NB_map_t;

typedef struct cmd_CRC_CHECK_ARG_CRC_map {
        uint32_t  crc : 32;
} __attribute__((packed, aligned(1))) cmd_CRC_CHECK_ARG_CRC_map_t;

typedef struct cmd_CRC_CHECK_map {
        uint8_t  CMD;
        union {
                uint16_t  ADDR;
                cmd_CRC_CHECK_ARG_ADDR_map_t  sADDR;
        }__attribute__((packed, aligned(1)));
        union {
                uint16_t  NB;
                cmd_CRC_CHECK_ARG_NB_map_t  sNB;
        }__attribute__((packed, aligned(1)));
        union {
                uint32_t  CRC;
                cmd_CRC_CHECK_ARG_CRC_map_t  sCRC;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) cmd_CRC_CHECK_map_t;

typedef struct cmd_CRC_CHECK_REPLY_RESULT_map {
        uint16_t  rsvd_bit0 : 1;
        uint16_t  rsvd_bit1 : 1;
        uint16_t  rsvd_bit2 : 1;
        uint16_t  rsvd_bit3 : 1;
        uint16_t  rsvd_bit4 : 1;
        uint16_t  rsvd_bit5 : 1;
        uint16_t  rsvd_bit6 : 1;
        uint16_t  result : 1;
} __attribute__((packed, aligned(1))) cmd_CRC_CHECK_REPLY_RESULT_map_t;

typedef struct cmd_CRC_CHECK_REPLY_CALC_map {
        uint32_t  calc : 32;
} __attribute__((packed, aligned(1))) cmd_CRC_CHECK_REPLY_CALC_map_t;

typedef struct reply_CRC_CHECK_map {
        union {
                uint8_t  RESULT;
                cmd_CRC_CHECK_REPLY_RESULT_map_t  sRESULT;
        }__attribute__((packed, aligned(1)));
        uint8_t  PAD0;
        uint8_t  PAD1;
        union {
                uint32_t  CALC;
                cmd_CRC_CHECK_REPLY_CALC_map_t  sCALC;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_CRC_CHECK_map_t;

typedef struct cmd_RESTART_ARG_OPTIONS_map {
        uint16_t  wait : 1;
        uint16_t  clks : 2;
        uint16_t  rsvd_bit3 : 1;
        uint16_t  rsvd_bit4 : 1;
        uint16_t  rsvd_bit5 : 1;
        uint16_t  ram : 1;
        uint16_t  por : 1;
} __attribute__((packed, aligned(1))) cmd_RESTART_ARG_OPTIONS_map_t;

typedef struct cmd_RESTART_map {
        uint8_t  CMD;
        union {
                uint8_t  OPTIONS;
                cmd_RESTART_ARG_OPTIONS_map_t  sOPTIONS;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) cmd_RESTART_map_t;

typedef struct cmd_APP_INFO_map {
        uint8_t  CMD;
} __attribute__((packed, aligned(1))) cmd_APP_INFO_map_t;

typedef struct cmd_APP_INFO_REPLY_A_MAJOR_map {
        uint8_t  app_major : 8;
} __attribute__((packed, aligned(1))) cmd_APP_INFO_REPLY_A_MAJOR_map_t;

typedef struct cmd_APP_INFO_REPLY_A_MINOR_map {
        uint8_t  app_minor : 8;
} __attribute__((packed, aligned(1))) cmd_APP_INFO_REPLY_A_MINOR_map_t;

typedef struct cmd_APP_INFO_REPLY_A_BRANCH_map {
        uint8_t  app_branch : 8;
} __attribute__((packed, aligned(1))) cmd_APP_INFO_REPLY_A_BRANCH_map_t;

typedef struct cmd_APP_INFO_REPLY_A_BUILD_map {
        uint16_t  app_build : 16;
} __attribute__((packed, aligned(1))) cmd_APP_INFO_REPLY_A_BUILD_map_t;

typedef struct cmd_APP_INFO_REPLY_P_MAJOR_map {
        uint8_t  planner_major : 8;
} __attribute__((packed, aligned(1))) cmd_APP_INFO_REPLY_P_MAJOR_map_t;

typedef struct cmd_APP_INFO_REPLY_P_MINOR_map {
        uint8_t  planner_minor : 8;
} __attribute__((packed, aligned(1))) cmd_APP_INFO_REPLY_P_MINOR_map_t;

typedef struct cmd_APP_INFO_REPLY_P_BRANCH_map {
        uint8_t  planner_branch : 8;
} __attribute__((packed, aligned(1))) cmd_APP_INFO_REPLY_P_BRANCH_map_t;

typedef struct cmd_APP_INFO_REPLY_P_BUILD_map {
        uint16_t  planner_build : 16;
} __attribute__((packed, aligned(1))) cmd_APP_INFO_REPLY_P_BUILD_map_t;

typedef struct cmd_APP_INFO_REPLY_DESIGN_ID_map {
        uint8_t  design_id : 8;
} __attribute__((packed, aligned(1))) cmd_APP_INFO_REPLY_DESIGN_ID_map_t;

typedef struct cmd_APP_INFO_REPLY_CBPRO_map {
        uint8_t  cbpro_rev_major : 8;
        uint8_t  cbpro_rev_minor : 8;
        uint8_t  cbpro_rev_revision : 8;
        uint8_t  cbpro_rev_special : 8;
} __attribute__((packed, aligned(1))) cmd_APP_INFO_REPLY_CBPRO_map_t;

typedef struct reply_APP_INFO_map {
        union {
                uint8_t  A_MAJOR;
                cmd_APP_INFO_REPLY_A_MAJOR_map_t  sA_MAJOR;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  A_MINOR;
                cmd_APP_INFO_REPLY_A_MINOR_map_t  sA_MINOR;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  A_BRANCH;
                cmd_APP_INFO_REPLY_A_BRANCH_map_t  sA_BRANCH;
        }__attribute__((packed, aligned(1)));
        union {
                uint16_t  A_BUILD;
                cmd_APP_INFO_REPLY_A_BUILD_map_t  sA_BUILD;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  P_MAJOR;
                cmd_APP_INFO_REPLY_P_MAJOR_map_t  sP_MAJOR;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  P_MINOR;
                cmd_APP_INFO_REPLY_P_MINOR_map_t  sP_MINOR;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  P_BRANCH;
                cmd_APP_INFO_REPLY_P_BRANCH_map_t  sP_BRANCH;
        }__attribute__((packed, aligned(1)));
        union {
                uint16_t  P_BUILD;
                cmd_APP_INFO_REPLY_P_BUILD_map_t  sP_BUILD;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  DESIGN_ID[8];
                cmd_APP_INFO_REPLY_DESIGN_ID_map_t  sDESIGN_ID[8];
        }__attribute__((packed, aligned(1)));
        union {
                uint32_t  CBPRO;
                cmd_APP_INFO_REPLY_CBPRO_map_t  sCBPRO;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_APP_INFO_map_t;

typedef struct cmd_PLL_ACTIVE_REFCLOCK_ARG_PLLX_map {
        uint16_t  pll : 8;
} __attribute__((packed, aligned(1))) cmd_PLL_ACTIVE_REFCLOCK_ARG_PLLX_map_t;

typedef struct cmd_PLL_ACTIVE_REFCLOCK_map {
        uint8_t  CMD;
        union {
                uint8_t  PLLX;
                cmd_PLL_ACTIVE_REFCLOCK_ARG_PLLX_map_t  sPLLX;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) cmd_PLL_ACTIVE_REFCLOCK_map_t;

typedef struct cmd_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_map {
        uint16_t  active_refclock : 8;
} __attribute__((packed, aligned(1))) cmd_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_map_t;

typedef struct reply_PLL_ACTIVE_REFCLOCK_map {
        union {
                uint8_t  REFCLOCK;
                cmd_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_map_t  sREFCLOCK;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_PLL_ACTIVE_REFCLOCK_map_t;

typedef struct cmd_INPUT_STATUS_ARG_INPUT_SELECT_map {
        uint16_t  input : 8;
} __attribute__((packed, aligned(1))) cmd_INPUT_STATUS_ARG_INPUT_SELECT_map_t;

typedef struct cmd_INPUT_STATUS_map {
        uint8_t  CMD;
        union {
                uint8_t  INPUT_SELECT;
                cmd_INPUT_STATUS_ARG_INPUT_SELECT_map_t  sINPUT_SELECT;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) cmd_INPUT_STATUS_map_t;

typedef struct cmd_INPUT_STATUS_REPLY_INPUT_CLOCK_VALIDATION_map {
        uint16_t  input_clock_status : 2;
        uint16_t  rsvd_bit2 : 1;
        uint16_t  rsvd_bit3 : 1;
        uint16_t  rsvd_bit4 : 1;
        uint16_t  rsvd_bit5 : 1;
        uint16_t  rsvd_bit6 : 1;
        uint16_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_INPUT_STATUS_REPLY_INPUT_CLOCK_VALIDATION_map_t;

typedef struct cmd_INPUT_STATUS_REPLY_LOSS_OF_SIGNAL_map {
        uint16_t  loss_of_signal_flag : 1;
        uint16_t  rsvd_bit1 : 1;
        uint16_t  rsvd_bit2 : 1;
        uint16_t  rsvd_bit3 : 1;
        uint16_t  rsvd_bit4 : 1;
        uint16_t  rsvd_bit5 : 1;
        uint16_t  rsvd_bit6 : 1;
        uint16_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_INPUT_STATUS_REPLY_LOSS_OF_SIGNAL_map_t;

typedef struct cmd_INPUT_STATUS_REPLY_OUT_OF_FREQUENCY_map {
        uint16_t  out_of_frequency_flag : 1;
        uint16_t  rsvd_bit1 : 1;
        uint16_t  rsvd_bit2 : 1;
        uint16_t  rsvd_bit3 : 1;
        uint16_t  rsvd_bit4 : 1;
        uint16_t  rsvd_bit5 : 1;
        uint16_t  rsvd_bit6 : 1;
        uint16_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_INPUT_STATUS_REPLY_OUT_OF_FREQUENCY_map_t;

typedef struct cmd_INPUT_STATUS_REPLY_PHASE_MONITOR_map {
        uint16_t  phase_monitor_signal_early : 1;
        uint16_t  phase_monitor_signal_late : 1;
        uint16_t  phase_monitor_phase_error : 1;
        uint16_t  rsvd_bit3 : 1;
        uint16_t  rsvd_bit4 : 1;
        uint16_t  rsvd_bit5 : 1;
        uint16_t  rsvd_bit6 : 1;
        uint16_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_INPUT_STATUS_REPLY_PHASE_MONITOR_map_t;

typedef struct reply_INPUT_STATUS_map {
        union {
                uint8_t  INPUT_CLOCK_VALIDATION;
                cmd_INPUT_STATUS_REPLY_INPUT_CLOCK_VALIDATION_map_t  sINPUT_CLOCK_VALIDATION;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  LOSS_OF_SIGNAL;
                cmd_INPUT_STATUS_REPLY_LOSS_OF_SIGNAL_map_t  sLOSS_OF_SIGNAL;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  OUT_OF_FREQUENCY;
                cmd_INPUT_STATUS_REPLY_OUT_OF_FREQUENCY_map_t  sOUT_OF_FREQUENCY;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PHASE_MONITOR;
                cmd_INPUT_STATUS_REPLY_PHASE_MONITOR_map_t  sPHASE_MONITOR;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_INPUT_STATUS_map_t;

typedef struct cmd_PLL_STATUS_ARG_PLL_SELECT_map {
        uint16_t  pll : 8;
} __attribute__((packed, aligned(1))) cmd_PLL_STATUS_ARG_PLL_SELECT_map_t;

typedef struct cmd_PLL_STATUS_map {
        uint8_t  CMD;
        union {
                uint8_t  PLL_SELECT;
                cmd_PLL_STATUS_ARG_PLL_SELECT_map_t  sPLL_SELECT;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) cmd_PLL_STATUS_map_t;

typedef struct cmd_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_map {
        uint16_t  pll_loss_of_lock_factory : 1;
        uint16_t  pll_out_of_frequency : 1;
        uint16_t  pll_out_of_phase : 1;
        uint16_t  rsvd_bit3 : 1;
        uint16_t  pll_loss_of_lock : 1;
        uint16_t  pll_initial_lock : 1;
        uint16_t  rsvd_bit6 : 1;
        uint16_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_map_t;

typedef struct cmd_PLL_STATUS_REPLY_PLL_STATUS_map {
        uint16_t  status : 8;
} __attribute__((packed, aligned(1))) cmd_PLL_STATUS_REPLY_PLL_STATUS_map_t;

typedef struct cmd_PLL_STATUS_REPLY_PLL_SLIP_COUNT_map {
        uint8_t  pll_slip_count_pos : 4;
        uint8_t  pll_slip_count_neg : 4;
} __attribute__((packed, aligned(1))) cmd_PLL_STATUS_REPLY_PLL_SLIP_COUNT_map_t;

typedef struct cmd_PLL_STATUS_REPLY_PLL_SLIP_COUNT_NET_map {
        uint8_t  slip_cycle_net : 5;
        uint8_t  rsvd_bit5 : 1;
        uint8_t  rsvd_bit6 : 1;
        uint8_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_PLL_STATUS_REPLY_PLL_SLIP_COUNT_NET_map_t;

typedef struct cmd_PLL_STATUS_REPLY_PLL_HOLDOVER_VALID_map {
        uint16_t  holdover_valid : 1;
        uint16_t  rsvd_bit1 : 1;
        uint16_t  rsvd_bit2 : 1;
        uint16_t  rsvd_bit3 : 1;
        uint16_t  rsvd_bit4 : 1;
        uint16_t  rsvd_bit5 : 1;
        uint16_t  rsvd_bit6 : 1;
        uint16_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_PLL_STATUS_REPLY_PLL_HOLDOVER_VALID_map_t;

typedef struct cmd_PLL_STATUS_REPLY_PLL_HOLDOVER_map {
        uint16_t  holdover : 1;
        uint16_t  rsvd_bit1 : 1;
        uint16_t  rsvd_bit2 : 1;
        uint16_t  rsvd_bit3 : 1;
        uint16_t  rsvd_bit4 : 1;
        uint16_t  rsvd_bit5 : 1;
        uint16_t  rsvd_bit6 : 1;
        uint16_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_PLL_STATUS_REPLY_PLL_HOLDOVER_map_t;

typedef struct cmd_PLL_STATUS_REPLY_PLL_SHORT_TERM_HOLDOVER_map {
        uint16_t  short_term_holdover : 1;
        uint16_t  rsvd_bit1 : 1;
        uint16_t  rsvd_bit2 : 1;
        uint16_t  rsvd_bit3 : 1;
        uint16_t  rsvd_bit4 : 1;
        uint16_t  rsvd_bit5 : 1;
        uint16_t  rsvd_bit6 : 1;
        uint16_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_PLL_STATUS_REPLY_PLL_SHORT_TERM_HOLDOVER_map_t;

typedef struct cmd_PLL_STATUS_REPLY_PLL_PHASE_BLEEDOUT_map {
        uint16_t  phase_bleedout : 1;
        uint16_t  rsvd_bit1 : 1;
        uint16_t  rsvd_bit2 : 1;
        uint16_t  rsvd_bit3 : 1;
        uint16_t  rsvd_bit4 : 1;
        uint16_t  rsvd_bit5 : 1;
        uint16_t  rsvd_bit6 : 1;
        uint16_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_PLL_STATUS_REPLY_PLL_PHASE_BLEEDOUT_map_t;

typedef struct cmd_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_map {
        uint16_t  rsvd_bit0 : 1;
        uint16_t  rsvd_bit1 : 1;
        uint16_t  rsvd_bit2 : 1;
        uint16_t  rsvd_bit3 : 1;
        uint16_t  loop_filter_initial_lock : 1;
        uint16_t  loop_filter_fastlock : 1;
        uint16_t  loop_filter_ramp_in_progress : 1;
        uint16_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_map_t;

typedef struct cmd_PLL_STATUS_REPLY_PPS_PLL_map {
        uint16_t  psl_active : 1;
        uint16_t  auto_phase_jam : 1;
        uint16_t  rsvd_bit2 : 1;
        uint16_t  rsvd_bit3 : 1;
        uint16_t  rsvd_bit4 : 1;
        uint16_t  rsvd_bit5 : 1;
        uint16_t  rsvd_bit6 : 1;
        uint16_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_PLL_STATUS_REPLY_PPS_PLL_map_t;

typedef struct reply_PLL_STATUS_map {
        union {
                uint8_t  PLL_LOSS_OF_LOCK_MISC;
                cmd_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_map_t  sPLL_LOSS_OF_LOCK_MISC;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PLL_STATUS;
                cmd_PLL_STATUS_REPLY_PLL_STATUS_map_t  sPLL_STATUS;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PLL_SLIP_COUNT;
                cmd_PLL_STATUS_REPLY_PLL_SLIP_COUNT_map_t  sPLL_SLIP_COUNT;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PLL_SLIP_COUNT_NET;
                cmd_PLL_STATUS_REPLY_PLL_SLIP_COUNT_NET_map_t  sPLL_SLIP_COUNT_NET;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PLL_HOLDOVER_VALID;
                cmd_PLL_STATUS_REPLY_PLL_HOLDOVER_VALID_map_t  sPLL_HOLDOVER_VALID;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PLL_HOLDOVER;
                cmd_PLL_STATUS_REPLY_PLL_HOLDOVER_map_t  sPLL_HOLDOVER;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PLL_SHORT_TERM_HOLDOVER;
                cmd_PLL_STATUS_REPLY_PLL_SHORT_TERM_HOLDOVER_map_t  sPLL_SHORT_TERM_HOLDOVER;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PLL_PHASE_BLEEDOUT;
                cmd_PLL_STATUS_REPLY_PLL_PHASE_BLEEDOUT_map_t  sPLL_PHASE_BLEEDOUT;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PLL_LOOP_FILTER_STATUS;
                cmd_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_map_t  sPLL_LOOP_FILTER_STATUS;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PPS_PLL;
                cmd_PLL_STATUS_REPLY_PPS_PLL_map_t  sPPS_PLL;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_PLL_STATUS_map_t;

typedef struct cmd_INTERRUPT_STATUS_map {
        uint8_t  CMD;
} __attribute__((packed, aligned(1))) cmd_INTERRUPT_STATUS_map_t;

typedef struct cmd_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_map {
        uint16_t  in0_invalid : 1;
        uint16_t  rsvd_bit1 : 1;
        uint16_t  in1_invalid : 1;
        uint16_t  rsvd_bit3 : 1;
        uint16_t  in2_invalid : 1;
        uint16_t  in2b_invalid : 1;
        uint16_t  in3_invalid : 1;
        uint16_t  in3b_invalid : 1;
} __attribute__((packed, aligned(1))) cmd_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_map_t;

typedef struct cmd_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_map {
        uint16_t  in0_valid : 1;
        uint16_t  rsvd_bit1 : 1;
        uint16_t  in1_valid : 1;
        uint16_t  rsvd_bit3 : 1;
        uint16_t  in2_valid : 1;
        uint16_t  in2b_valid : 1;
        uint16_t  in3_valid : 1;
        uint16_t  in3b_valid : 1;
} __attribute__((packed, aligned(1))) cmd_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_map_t;

typedef struct cmd_INTERRUPT_STATUS_REPLY_PLLR_map {
        uint16_t  pllr_loss_of_lock : 1;
        uint16_t  pllr_locked : 1;
        uint16_t  pllr_cycle_slip : 1;
        uint16_t  pllr_holdover : 1;
        uint16_t  pllr_hitless_switch : 1;
        uint16_t  rsvd_bit5 : 1;
        uint16_t  rsvd_bit6 : 1;
        uint16_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_INTERRUPT_STATUS_REPLY_PLLR_map_t;

typedef struct cmd_INTERRUPT_STATUS_REPLY_PLLA_map {
        uint16_t  plla_loss_of_lock : 1;
        uint16_t  plla_locked : 1;
        uint16_t  plla_cycle_slip : 1;
        uint16_t  plla_holdover : 1;
        uint16_t  plla_hitless_switch : 1;
        uint16_t  rsvd_bit5 : 1;
        uint16_t  rsvd_bit6 : 1;
        uint16_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_INTERRUPT_STATUS_REPLY_PLLA_map_t;

typedef struct cmd_INTERRUPT_STATUS_REPLY_PLLB_map {
        uint16_t  pllb_loss_of_lock : 1;
        uint16_t  pllb_locked : 1;
        uint16_t  pllb_cycle_slip : 1;
        uint16_t  pllb_holdover : 1;
        uint16_t  pllb_hitless_switch : 1;
        uint16_t  rsvd_bit5 : 1;
        uint16_t  rsvd_bit6 : 1;
        uint16_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_INTERRUPT_STATUS_REPLY_PLLB_map_t;

typedef struct cmd_INTERRUPT_STATUS_REPLY_GENERAL_map {
        uint16_t  system_calibration : 1;
        uint16_t  innerloop_loss_of_lock : 1;
        uint16_t  innerloop_loss_of_reference : 1;
        uint16_t  system_fault : 1;
        uint16_t  watchdog_timer : 1;
        uint16_t  i2c_smbus : 1;
        uint16_t  rsvd_bit6 : 1;
        uint16_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_INTERRUPT_STATUS_REPLY_GENERAL_map_t;

typedef struct cmd_INTERRUPT_STATUS_REPLY_SOFTWARE_map {
        uint16_t  pps_clock_rearrangement_threshold : 1;
        uint16_t  interrupt : 7;
} __attribute__((packed, aligned(1))) cmd_INTERRUPT_STATUS_REPLY_SOFTWARE_map_t;

typedef struct cmd_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_map {
        uint16_t  sync_complete : 1;
        uint16_t  phase_adjust_complete : 1;
        uint16_t  pin_too_short : 1;
        uint16_t  command_too_close : 1;
        uint16_t  rsvd_bit4 : 1;
        uint16_t  rsvd_bit5 : 1;
        uint16_t  rsvd_bit6 : 1;
        uint16_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_map_t;

typedef struct reply_INTERRUPT_STATUS_map {
        union {
                uint8_t  INPUT_CLOCK_INVALID;
                cmd_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_map_t  sINPUT_CLOCK_INVALID;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  INPUT_CLOCK_VALID;
                cmd_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_map_t  sINPUT_CLOCK_VALID;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PLLR;
                cmd_INTERRUPT_STATUS_REPLY_PLLR_map_t  sPLLR;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PLLA;
                cmd_INTERRUPT_STATUS_REPLY_PLLA_map_t  sPLLA;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PLLB;
                cmd_INTERRUPT_STATUS_REPLY_PLLB_map_t  sPLLB;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  GENERAL;
                cmd_INTERRUPT_STATUS_REPLY_GENERAL_map_t  sGENERAL;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  SOFTWARE;
                cmd_INTERRUPT_STATUS_REPLY_SOFTWARE_map_t  sSOFTWARE;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PHASE_CONTROL;
                cmd_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_map_t  sPHASE_CONTROL;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_INTERRUPT_STATUS_map_t;

typedef struct cmd_METADATA_map {
        uint8_t  CMD;
} __attribute__((packed, aligned(1))) cmd_METADATA_map_t;

typedef struct cmd_METADATA_REPLY_DCO_MR_STEP_SIZE_map {
        uint32_t  mr_step_size : 32;
} __attribute__((packed, aligned(1))) cmd_METADATA_REPLY_DCO_MR_STEP_SIZE_map_t;

typedef struct cmd_METADATA_REPLY_DCO_NA_STEP_SIZE_map {
        uint32_t  na_step_size : 32;
} __attribute__((packed, aligned(1))) cmd_METADATA_REPLY_DCO_NA_STEP_SIZE_map_t;

typedef struct cmd_METADATA_REPLY_DCO_MA_STEP_SIZE_map {
        uint32_t  ma_step_size : 32;
} __attribute__((packed, aligned(1))) cmd_METADATA_REPLY_DCO_MA_STEP_SIZE_map_t;

typedef struct cmd_METADATA_REPLY_DCO_NB_STEP_SIZE_map {
        uint32_t  nb_step_size : 32;
} __attribute__((packed, aligned(1))) cmd_METADATA_REPLY_DCO_NB_STEP_SIZE_map_t;

typedef struct cmd_METADATA_REPLY_DCO_MB_STEP_SIZE_map {
        uint32_t  mb_step_size : 32;
} __attribute__((packed, aligned(1))) cmd_METADATA_REPLY_DCO_MB_STEP_SIZE_map_t;

typedef struct cmd_METADATA_REPLY_PLAN_OPTIONS_map {
        uint16_t  ptp_steered_rf : 1;
        uint16_t  pps_steered_rf : 1;
        uint16_t  pps_pll : 1;
        uint16_t  rsvd_bit3 : 1;
        uint16_t  rsvd_bit4 : 1;
        uint16_t  rsvd_bit5 : 1;
        uint16_t  rsvd_bit6 : 1;
        uint16_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_METADATA_REPLY_PLAN_OPTIONS_map_t;

typedef struct cmd_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_HIGH_map {
        int32_t  range_high : 32;
} __attribute__((packed, aligned(1))) cmd_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_HIGH_map_t;

typedef struct cmd_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_LOW_map {
        int32_t  range_low : 32;
} __attribute__((packed, aligned(1))) cmd_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_LOW_map_t;

typedef struct cmd_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_map {
        uint64_t  pps_out_step_size : 64;
} __attribute__((packed, aligned(1))) cmd_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_map_t;

typedef struct reply_METADATA_map {
        union {
                uint32_t  DCO_MR_STEP_SIZE;
                cmd_METADATA_REPLY_DCO_MR_STEP_SIZE_map_t  sDCO_MR_STEP_SIZE;
        }__attribute__((packed, aligned(1)));
        union {
                uint32_t  DCO_NA_STEP_SIZE;
                cmd_METADATA_REPLY_DCO_NA_STEP_SIZE_map_t  sDCO_NA_STEP_SIZE;
        }__attribute__((packed, aligned(1)));
        union {
                uint32_t  DCO_MA_STEP_SIZE;
                cmd_METADATA_REPLY_DCO_MA_STEP_SIZE_map_t  sDCO_MA_STEP_SIZE;
        }__attribute__((packed, aligned(1)));
        union {
                uint32_t  DCO_NB_STEP_SIZE;
                cmd_METADATA_REPLY_DCO_NB_STEP_SIZE_map_t  sDCO_NB_STEP_SIZE;
        }__attribute__((packed, aligned(1)));
        union {
                uint32_t  DCO_MB_STEP_SIZE;
                cmd_METADATA_REPLY_DCO_MB_STEP_SIZE_map_t  sDCO_MB_STEP_SIZE;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PLAN_OPTIONS;
                cmd_METADATA_REPLY_PLAN_OPTIONS_map_t  sPLAN_OPTIONS;
        }__attribute__((packed, aligned(1)));
        union {
                int32_t  PHASE_JAM_PPS_OUT_RANGE_HIGH;
                cmd_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_HIGH_map_t  sPHASE_JAM_PPS_OUT_RANGE_HIGH;
        }__attribute__((packed, aligned(1)));
        union {
                int32_t  PHASE_JAM_PPS_OUT_RANGE_LOW;
                cmd_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_LOW_map_t  sPHASE_JAM_PPS_OUT_RANGE_LOW;
        }__attribute__((packed, aligned(1)));
        union {
                uint64_t  PHASE_JAM_PPS_OUT_STEP_SIZE;
                cmd_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_map_t  sPHASE_JAM_PPS_OUT_STEP_SIZE;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_METADATA_map_t;

typedef struct cmd_REFERENCE_STATUS_map {
        uint8_t  CMD;
} __attribute__((packed, aligned(1))) cmd_REFERENCE_STATUS_map_t;

typedef struct cmd_REFERENCE_STATUS_REPLY_REFERENCE_CLOCK_VALIDATION_map {
        uint16_t  reference_clock_status : 2;
        uint16_t  rsvd_bit2 : 1;
        uint16_t  rsvd_bit3 : 1;
        uint16_t  rsvd_bit4 : 1;
        uint16_t  rsvd_bit5 : 1;
        uint16_t  rsvd_bit6 : 1;
        uint16_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_REFERENCE_STATUS_REPLY_REFERENCE_CLOCK_VALIDATION_map_t;

typedef struct cmd_REFERENCE_STATUS_REPLY_LOSS_OF_SIGNAL_map {
        uint16_t  loss_of_signal_flag : 1;
        uint16_t  rsvd_bit1 : 1;
        uint16_t  rsvd_bit2 : 1;
        uint16_t  rsvd_bit3 : 1;
        uint16_t  rsvd_bit4 : 1;
        uint16_t  rsvd_bit5 : 1;
        uint16_t  rsvd_bit6 : 1;
        uint16_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_REFERENCE_STATUS_REPLY_LOSS_OF_SIGNAL_map_t;

typedef struct cmd_REFERENCE_STATUS_REPLY_OUT_OF_FREQUENCY_map {
        uint16_t  out_of_frequency_flag : 1;
        uint16_t  rsvd_bit1 : 1;
        uint16_t  rsvd_bit2 : 1;
        uint16_t  rsvd_bit3 : 1;
        uint16_t  rsvd_bit4 : 1;
        uint16_t  rsvd_bit5 : 1;
        uint16_t  rsvd_bit6 : 1;
        uint16_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_REFERENCE_STATUS_REPLY_OUT_OF_FREQUENCY_map_t;

typedef struct cmd_REFERENCE_STATUS_REPLY_PHASE_MONITOR_map {
        uint16_t  phase_monitor_signal_early : 1;
        uint16_t  phase_monitor_signal_late : 1;
        uint16_t  phase_monitor_phase_error : 1;
        uint16_t  rsvd_bit3 : 1;
        uint16_t  rsvd_bit4 : 1;
        uint16_t  rsvd_bit5 : 1;
        uint16_t  rsvd_bit6 : 1;
        uint16_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_REFERENCE_STATUS_REPLY_PHASE_MONITOR_map_t;

typedef struct reply_REFERENCE_STATUS_map {
        union {
                uint8_t  REFERENCE_CLOCK_VALIDATION;
                cmd_REFERENCE_STATUS_REPLY_REFERENCE_CLOCK_VALIDATION_map_t  sREFERENCE_CLOCK_VALIDATION;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  LOSS_OF_SIGNAL;
                cmd_REFERENCE_STATUS_REPLY_LOSS_OF_SIGNAL_map_t  sLOSS_OF_SIGNAL;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  OUT_OF_FREQUENCY;
                cmd_REFERENCE_STATUS_REPLY_OUT_OF_FREQUENCY_map_t  sOUT_OF_FREQUENCY;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PHASE_MONITOR;
                cmd_REFERENCE_STATUS_REPLY_PHASE_MONITOR_map_t  sPHASE_MONITOR;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_REFERENCE_STATUS_map_t;

typedef struct cmd_PHASE_READOUT_ARG_PHASE_GROUP_map {
        uint8_t  group_number : 4;
        uint8_t  rsvd_bit4 : 1;
        uint8_t  rsvd_bit5 : 1;
        uint8_t  rsvd_bit6 : 1;
        uint8_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_PHASE_READOUT_ARG_PHASE_GROUP_map_t;

typedef struct cmd_PHASE_READOUT_map {
        uint8_t  CMD;
        union {
                uint8_t  PHASE_GROUP;
                cmd_PHASE_READOUT_ARG_PHASE_GROUP_map_t  sPHASE_GROUP;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) cmd_PHASE_READOUT_map_t;

typedef struct cmd_PHASE_READOUT_REPLY_ERRORS_map {
        uint8_t  err_los : 1;
        uint8_t  err_tsp : 1;
        uint8_t  err_cyc : 1;
        uint8_t  rsvd_bit3 : 1;
        uint8_t  rsvd_bit4 : 1;
        uint8_t  rsvd_bit5 : 1;
        uint8_t  rsvd_bit6 : 1;
        uint8_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_PHASE_READOUT_REPLY_ERRORS_map_t;

typedef struct cmd_PHASE_READOUT_REPLY_PHASE_VALID_map {
        uint8_t  phrdg_valid : 1;
        uint8_t  rsvd_bit1 : 1;
        uint8_t  rsvd_bit2 : 1;
        uint8_t  rsvd_bit3 : 1;
        uint8_t  rsvd_bit4 : 1;
        uint8_t  rsvd_bit5 : 1;
        uint8_t  rsvd_bit6 : 1;
        uint8_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_PHASE_READOUT_REPLY_PHASE_VALID_map_t;

typedef struct cmd_PHASE_READOUT_REPLY_PHASE_READOUT_map {
        int64_t  phase_difference : 64;
} __attribute__((packed, aligned(1))) cmd_PHASE_READOUT_REPLY_PHASE_READOUT_map_t;

typedef struct reply_PHASE_READOUT_map {
        union {
                uint8_t  ERRORS;
                cmd_PHASE_READOUT_REPLY_ERRORS_map_t  sERRORS;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PHASE_VALID;
                cmd_PHASE_READOUT_REPLY_PHASE_VALID_map_t  sPHASE_VALID;
        }__attribute__((packed, aligned(1)));
        union {
                int64_t  PHASE_READOUT;
                cmd_PHASE_READOUT_REPLY_PHASE_READOUT_map_t  sPHASE_READOUT;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_PHASE_READOUT_map_t;

typedef struct cmd_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_map {
        uint16_t  reference_a : 8;
} __attribute__((packed, aligned(1))) cmd_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_map_t;

typedef struct cmd_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_map {
        uint16_t  reference_b : 8;
} __attribute__((packed, aligned(1))) cmd_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_map_t;

typedef struct cmd_INPUT_PERIOD_READOUT_map {
        uint8_t  CMD;
        union {
                uint8_t  REFERENCE_SELECT_A;
                cmd_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_map_t  sREFERENCE_SELECT_A;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  REFERENCE_SELECT_B;
                cmd_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_map_t  sREFERENCE_SELECT_B;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) cmd_INPUT_PERIOD_READOUT_map_t;

typedef struct cmd_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_map {
        uint64_t  readout_a : 64;
} __attribute__((packed, aligned(1))) cmd_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_map_t;

typedef struct cmd_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_map {
        uint64_t  readout_b : 64;
} __attribute__((packed, aligned(1))) cmd_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_map_t;

typedef struct reply_INPUT_PERIOD_READOUT_map {
        union {
                uint64_t  PERIOD_READOUT_A;
                cmd_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_map_t  sPERIOD_READOUT_A;
        }__attribute__((packed, aligned(1)));
        union {
                uint64_t  PERIOD_READOUT_B;
                cmd_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_map_t  sPERIOD_READOUT_B;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_INPUT_PERIOD_READOUT_map_t;

typedef struct cmd_TEMPERATURE_READOUT_map {
        uint8_t  CMD;
} __attribute__((packed, aligned(1))) cmd_TEMPERATURE_READOUT_map_t;

typedef struct cmd_TEMPERATURE_READOUT_REPLY_TEMPERATURE_READOUT_map {
        int32_t  die_temperature : 32;
} __attribute__((packed, aligned(1))) cmd_TEMPERATURE_READOUT_REPLY_TEMPERATURE_READOUT_map_t;

typedef struct reply_TEMPERATURE_READOUT_map {
        union {
                int32_t  TEMPERATURE_READOUT;
                cmd_TEMPERATURE_READOUT_REPLY_TEMPERATURE_READOUT_map_t  sTEMPERATURE_READOUT;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_TEMPERATURE_READOUT_map_t;

typedef struct cmd_FINC_DCO_map {
        uint8_t  CMD;
} __attribute__((packed, aligned(1))) cmd_FINC_DCO_map_t;

typedef struct cmd_FDEC_DCO_map {
        uint8_t  CMD;
} __attribute__((packed, aligned(1))) cmd_FDEC_DCO_map_t;

typedef struct cmd_JESD_SYSREF_PULSER_map {
        uint8_t  CMD;
} __attribute__((packed, aligned(1))) cmd_JESD_SYSREF_PULSER_map_t;

typedef struct cmd_JESD_SYSREF_PULSER_REPLY_JESD_SYSREF_PULSER_STATUS_map {
        uint16_t  operation_busy : 1;
        uint16_t  rsvd_bit1 : 1;
        uint16_t  rsvd_bit2 : 1;
        uint16_t  rsvd_bit3 : 1;
        uint16_t  rsvd_bit4 : 1;
        uint16_t  rsvd_bit5 : 1;
        uint16_t  rsvd_bit6 : 1;
        uint16_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_JESD_SYSREF_PULSER_REPLY_JESD_SYSREF_PULSER_STATUS_map_t;

typedef struct reply_JESD_SYSREF_PULSER_map {
        union {
                uint8_t  JESD_SYSREF_PULSER_STATUS;
                cmd_JESD_SYSREF_PULSER_REPLY_JESD_SYSREF_PULSER_STATUS_map_t  sJESD_SYSREF_PULSER_STATUS;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_JESD_SYSREF_PULSER_map_t;

typedef struct cmd_MANUAL_INPUT_CLOCK_SELECT_ARG_PLLX_map {
        uint16_t  pll : 8;
} __attribute__((packed, aligned(1))) cmd_MANUAL_INPUT_CLOCK_SELECT_ARG_PLLX_map_t;

typedef struct cmd_MANUAL_INPUT_CLOCK_SELECT_ARG_CLOCK_SELECT_map {
        uint16_t  input_clock : 8;
} __attribute__((packed, aligned(1))) cmd_MANUAL_INPUT_CLOCK_SELECT_ARG_CLOCK_SELECT_map_t;

typedef struct cmd_MANUAL_INPUT_CLOCK_SELECT_map {
        uint8_t  CMD;
        union {
                uint8_t  PLLX;
                cmd_MANUAL_INPUT_CLOCK_SELECT_ARG_PLLX_map_t  sPLLX;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  CLOCK_SELECT;
                cmd_MANUAL_INPUT_CLOCK_SELECT_ARG_CLOCK_SELECT_map_t  sCLOCK_SELECT;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) cmd_MANUAL_INPUT_CLOCK_SELECT_map_t;

typedef struct cmd_VARIABLE_OFFSET_DCO_ARG_DIVIDER_SELECT_map {
        uint16_t  divider : 8;
} __attribute__((packed, aligned(1))) cmd_VARIABLE_OFFSET_DCO_ARG_DIVIDER_SELECT_map_t;

typedef struct cmd_VARIABLE_OFFSET_DCO_ARG_OFFSET_map {
        int32_t  num_steps : 32;
} __attribute__((packed, aligned(1))) cmd_VARIABLE_OFFSET_DCO_ARG_OFFSET_map_t;

typedef struct cmd_VARIABLE_OFFSET_DCO_map {
        uint8_t  CMD;
        union {
                uint8_t  DIVIDER_SELECT;
                cmd_VARIABLE_OFFSET_DCO_ARG_DIVIDER_SELECT_map_t  sDIVIDER_SELECT;
        }__attribute__((packed, aligned(1)));
        union {
                int32_t  OFFSET;
                cmd_VARIABLE_OFFSET_DCO_ARG_OFFSET_map_t  sOFFSET;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) cmd_VARIABLE_OFFSET_DCO_map_t;

typedef struct cmd_VARIABLE_OFFSET_DCO_REPLY_DCO_STATUS_map {
        uint16_t  out_of_range : 1;
        uint16_t  rsvd_bit1 : 1;
        uint16_t  rsvd_bit2 : 1;
        uint16_t  rsvd_bit3 : 1;
        uint16_t  rsvd_bit4 : 1;
        uint16_t  rsvd_bit5 : 1;
        uint16_t  rsvd_bit6 : 1;
        uint16_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_VARIABLE_OFFSET_DCO_REPLY_DCO_STATUS_map_t;

typedef struct reply_VARIABLE_OFFSET_DCO_map {
        union {
                uint8_t  DCO_STATUS;
                cmd_VARIABLE_OFFSET_DCO_REPLY_DCO_STATUS_map_t  sDCO_STATUS;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_VARIABLE_OFFSET_DCO_map_t;

typedef struct cmd_FORCE_HOLDOVER_ARG_PLLX_map {
        uint16_t  pll : 8;
} __attribute__((packed, aligned(1))) cmd_FORCE_HOLDOVER_ARG_PLLX_map_t;

typedef struct cmd_FORCE_HOLDOVER_ARG_HOLDOVER_map {
        uint16_t  force_holdover : 8;
} __attribute__((packed, aligned(1))) cmd_FORCE_HOLDOVER_ARG_HOLDOVER_map_t;

typedef struct cmd_FORCE_HOLDOVER_map {
        uint8_t  CMD;
        union {
                uint8_t  PLLX;
                cmd_FORCE_HOLDOVER_ARG_PLLX_map_t  sPLLX;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  HOLDOVER;
                cmd_FORCE_HOLDOVER_ARG_HOLDOVER_map_t  sHOLDOVER;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) cmd_FORCE_HOLDOVER_map_t;

typedef struct cmd_PHASE_JAM_PPS_OUT_ARG_GROUP_SELECT_map {
        uint16_t  group : 8;
} __attribute__((packed, aligned(1))) cmd_PHASE_JAM_PPS_OUT_ARG_GROUP_SELECT_map_t;

typedef struct cmd_PHASE_JAM_PPS_OUT_ARG_OFFSET_map {
        int32_t  num_steps : 32;
} __attribute__((packed, aligned(1))) cmd_PHASE_JAM_PPS_OUT_ARG_OFFSET_map_t;

typedef struct cmd_PHASE_JAM_PPS_OUT_map {
        uint8_t  CMD;
        union {
                uint8_t  GROUP_SELECT;
                cmd_PHASE_JAM_PPS_OUT_ARG_GROUP_SELECT_map_t  sGROUP_SELECT;
        }__attribute__((packed, aligned(1)));
        union {
                int32_t  OFFSET;
                cmd_PHASE_JAM_PPS_OUT_ARG_OFFSET_map_t  sOFFSET;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) cmd_PHASE_JAM_PPS_OUT_map_t;

typedef struct cmd_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_map {
        uint16_t  phase_jam_busy : 1;
        uint16_t  out_of_range : 1;
        uint16_t  rsvd_bit2 : 1;
        uint16_t  rsvd_bit3 : 1;
        uint16_t  rsvd_bit4 : 1;
        uint16_t  rsvd_bit5 : 1;
        uint16_t  rsvd_bit6 : 1;
        uint16_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_map_t;

typedef struct reply_PHASE_JAM_PPS_OUT_map {
        union {
                uint8_t  PHASE_JAM_STATUS;
                cmd_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_map_t  sPHASE_JAM_STATUS;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_PHASE_JAM_PPS_OUT_map_t;

typedef struct cmd_PPS_RELOCK_map {
        uint8_t  CMD;
} __attribute__((packed, aligned(1))) cmd_PPS_RELOCK_map_t;

typedef struct cmd_PPS_FORCE_BLEEDOUT_map {
        uint8_t  CMD;
} __attribute__((packed, aligned(1))) cmd_PPS_FORCE_BLEEDOUT_map_t;

typedef struct cmd_OUTPUT_ENABLE_ARG_OUTX_map {
        uint16_t  oe0 : 1;
        uint16_t  oe1 : 1;
        uint16_t  oe2 : 1;
        uint16_t  oe3 : 1;
        uint16_t  oe4 : 1;
        uint16_t  oe5 : 1;
        uint16_t  oe6 : 1;
        uint16_t  oe7 : 1;
        uint16_t  oe8 : 1;
        uint16_t  oe9 : 1;
        uint16_t  oe10 : 1;
        uint16_t  oe11 : 1;
        uint16_t  oe12 : 1;
        uint16_t  oe13 : 1;
        uint16_t  oe14 : 1;
        uint16_t  oe15 : 1;
        uint16_t  oe16 : 1;
        uint16_t  oe17 : 1;
        uint16_t  rsvd_bit18 : 1;
        uint16_t  rsvd_bit19 : 1;
        uint16_t  rsvd_bit20 : 1;
        uint16_t  rsvd_bit21 : 1;
        uint16_t  rsvd_bit22 : 1;
        uint16_t  rsvd_bit23 : 1;
        uint16_t  rsvd_bit24 : 1;
        uint16_t  rsvd_bit25 : 1;
        uint16_t  rsvd_bit26 : 1;
        uint16_t  rsvd_bit27 : 1;
        uint16_t  rsvd_bit28 : 1;
        uint16_t  rsvd_bit29 : 1;
        uint16_t  rsvd_bit30 : 1;
        uint16_t  oe31 : 1;
} __attribute__((packed, aligned(1))) cmd_OUTPUT_ENABLE_ARG_OUTX_map_t;

typedef struct cmd_OUTPUT_ENABLE_ARG_ACTION_map {
        uint16_t  enable : 1;
        uint16_t  rsvd_bit1 : 1;
        uint16_t  rsvd_bit2 : 1;
        uint16_t  rsvd_bit3 : 1;
        uint16_t  rsvd_bit4 : 1;
        uint16_t  rsvd_bit5 : 1;
        uint16_t  rsvd_bit6 : 1;
        uint16_t  rsvd_bit7 : 1;
} __attribute__((packed, aligned(1))) cmd_OUTPUT_ENABLE_ARG_ACTION_map_t;

typedef struct cmd_OUTPUT_ENABLE_map {
        uint8_t  CMD;
        union {
                uint32_t  OUTX;
                cmd_OUTPUT_ENABLE_ARG_OUTX_map_t  sOUTX;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  ACTION;
                cmd_OUTPUT_ENABLE_ARG_ACTION_map_t  sACTION;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) cmd_OUTPUT_ENABLE_map_t;

typedef struct cmd_CLEAR_STATUS_FLAGS_map {
        uint8_t  CMD;
} __attribute__((packed, aligned(1))) cmd_CLEAR_STATUS_FLAGS_map_t;

union cmd_arg_union_mode_APP1 {

/* Note that the RAW arrays are not the proper size, but can still access all */
        uint8_t                                 RAW[1];
        uint16_t                                RAW_uint16_t[1];
        int16_t                                 RAW_int16_t[1];
        uint32_t                                RAW_uint32_t[1];
        int32_t                                 RAW_int32_t[1];
        struct cmd_READ_REPLY_map               READ_REPLY;
        struct cmd_SIO_TEST_map                 SIO_TEST;
        struct cmd_SIO_INFO_map                 SIO_INFO;
        struct cmd_APPS_AVAILABLE_map           APPS_AVAILABLE;
        struct cmd_APP_SELECT_map               APP_SELECT;
        struct cmd_HOST_LOAD_map                HOST_LOAD;
        struct cmd_BOOT_map                     BOOT;
        struct cmd_DEVICE_INFO_map              DEVICE_INFO;
        struct cmd_NVM_READ_map                 NVM_READ;
        struct cmd_NVM_STATUS_map               NVM_STATUS;
        struct cmd_BOOT_LOG_map                 BOOT_LOG;
        struct cmd_CRC_CHECK_map                CRC_CHECK;
        struct cmd_RESTART_map                  RESTART;
        struct cmd_APP_INFO_map                 APP_INFO;
        struct cmd_PLL_ACTIVE_REFCLOCK_map      PLL_ACTIVE_REFCLOCK;
        struct cmd_INPUT_STATUS_map             INPUT_STATUS;
        struct cmd_PLL_STATUS_map               PLL_STATUS;
        struct cmd_INTERRUPT_STATUS_map         INTERRUPT_STATUS;
        struct cmd_METADATA_map                 METADATA;
        struct cmd_REFERENCE_STATUS_map         REFERENCE_STATUS;
        struct cmd_PHASE_READOUT_map            PHASE_READOUT;
        struct cmd_INPUT_PERIOD_READOUT_map     INPUT_PERIOD_READOUT;
        struct cmd_TEMPERATURE_READOUT_map      TEMPERATURE_READOUT;
        struct cmd_FINC_DCO_map                 FINC_DCO;
        struct cmd_FDEC_DCO_map                 FDEC_DCO;
        struct cmd_MANUAL_INPUT_CLOCK_SELECT_map MANUAL_INPUT_CLOCK_SELECT;
        struct cmd_VARIABLE_OFFSET_DCO_map      VARIABLE_OFFSET_DCO;
        struct cmd_FORCE_HOLDOVER_map           FORCE_HOLDOVER;
        struct cmd_OUTPUT_ENABLE_map            OUTPUT_ENABLE;
        struct cmd_CLEAR_STATUS_FLAGS_map       CLEAR_STATUS_FLAGS;
} __attribute__((packed, aligned(1)));

union cmd_arg_union_mode_BOOT {

/* Note that the RAW arrays are not the proper size, but can still access all */
        uint8_t                                 RAW[1];
        uint16_t                                RAW_uint16_t[1];
        int16_t                                 RAW_int16_t[1];
        uint32_t                                RAW_uint32_t[1];
        int32_t                                 RAW_int32_t[1];
        struct cmd_READ_REPLY_map               READ_REPLY;
        struct cmd_SIO_TEST_map                 SIO_TEST;
        struct cmd_SIO_INFO_map                 SIO_INFO;
        struct cmd_APPS_AVAILABLE_map           APPS_AVAILABLE;
        struct cmd_APP_SELECT_map               APP_SELECT;
        struct cmd_HOST_LOAD_map                HOST_LOAD;
        struct cmd_BOOT_map                     BOOT;
        struct cmd_DEVICE_INFO_map              DEVICE_INFO;
        struct cmd_NVM_READ_map                 NVM_READ;
        struct cmd_NVM_STATUS_map               NVM_STATUS;
        struct cmd_BOOT_LOG_map                 BOOT_LOG;
        struct cmd_CRC_CHECK_map                CRC_CHECK;
        struct cmd_RESTART_map                  RESTART;
        struct cmd_APP_INFO_map                 APP_INFO;
        struct cmd_PLL_ACTIVE_REFCLOCK_map      PLL_ACTIVE_REFCLOCK;
        struct cmd_INPUT_STATUS_map             INPUT_STATUS;
        struct cmd_PLL_STATUS_map               PLL_STATUS;
        struct cmd_INTERRUPT_STATUS_map         INTERRUPT_STATUS;
        struct cmd_METADATA_map                 METADATA;
        struct cmd_REFERENCE_STATUS_map         REFERENCE_STATUS;
        struct cmd_PHASE_READOUT_map            PHASE_READOUT;
        struct cmd_INPUT_PERIOD_READOUT_map     INPUT_PERIOD_READOUT;
        struct cmd_TEMPERATURE_READOUT_map      TEMPERATURE_READOUT;
        struct cmd_FINC_DCO_map                 FINC_DCO;
        struct cmd_FDEC_DCO_map                 FDEC_DCO;
        struct cmd_MANUAL_INPUT_CLOCK_SELECT_map MANUAL_INPUT_CLOCK_SELECT;
        struct cmd_VARIABLE_OFFSET_DCO_map      VARIABLE_OFFSET_DCO;
        struct cmd_FORCE_HOLDOVER_map           FORCE_HOLDOVER;
        struct cmd_OUTPUT_ENABLE_map            OUTPUT_ENABLE;
        struct cmd_CLEAR_STATUS_FLAGS_map       CLEAR_STATUS_FLAGS;
} __attribute__((packed, aligned(1)));


/* The union that stores the cmd arg read from the host registers */
union cmd_arg_union {
        struct cmd_GENERIC_map                  GENERIC;

/* Note that the RAW arrays are not the proper size, but can still access all */
        uint8_t                                 RAW[1];
        uint16_t                                RAW_uint16_t[1];
        int16_t                                 RAW_int16_t[1];
        uint32_t                                RAW_uint32_t[1];
        int32_t                                 RAW_int32_t[1];
        struct cmd_READ_REPLY_map               READ_REPLY;
        struct cmd_SIO_TEST_map                 SIO_TEST;
        struct cmd_SIO_INFO_map                 SIO_INFO;
        struct cmd_APPS_AVAILABLE_map           APPS_AVAILABLE;
        struct cmd_APP_SELECT_map               APP_SELECT;
        struct cmd_HOST_LOAD_map                HOST_LOAD;
        struct cmd_BOOT_map                     BOOT;
        struct cmd_DEVICE_INFO_map              DEVICE_INFO;
        struct cmd_NVM_READ_map                 NVM_READ;
        struct cmd_NVM_STATUS_map               NVM_STATUS;
        struct cmd_BOOT_LOG_map                 BOOT_LOG;
        struct cmd_CRC_CHECK_map                CRC_CHECK;
        struct cmd_RESTART_map                  RESTART;
        struct cmd_APP_INFO_map                 APP_INFO;
        struct cmd_PLL_ACTIVE_REFCLOCK_map      PLL_ACTIVE_REFCLOCK;
        struct cmd_INPUT_STATUS_map             INPUT_STATUS;
        struct cmd_PLL_STATUS_map               PLL_STATUS;
        struct cmd_INTERRUPT_STATUS_map         INTERRUPT_STATUS;
        struct cmd_METADATA_map                 METADATA;
        struct cmd_REFERENCE_STATUS_map         REFERENCE_STATUS;
        struct cmd_PHASE_READOUT_map            PHASE_READOUT;
        struct cmd_INPUT_PERIOD_READOUT_map     INPUT_PERIOD_READOUT;
        struct cmd_TEMPERATURE_READOUT_map      TEMPERATURE_READOUT;
        struct cmd_FINC_DCO_map                 FINC_DCO;
        struct cmd_FDEC_DCO_map                 FDEC_DCO;
        struct cmd_MANUAL_INPUT_CLOCK_SELECT_map MANUAL_INPUT_CLOCK_SELECT;
        struct cmd_VARIABLE_OFFSET_DCO_map      VARIABLE_OFFSET_DCO;
        struct cmd_FORCE_HOLDOVER_map           FORCE_HOLDOVER;
        struct cmd_OUTPUT_ENABLE_map            OUTPUT_ENABLE;
        struct cmd_CLEAR_STATUS_FLAGS_map       CLEAR_STATUS_FLAGS;
} __attribute__((packed, aligned(1)));

union cmd_reply_union_mode_APP1 {

/* Note that the RAW arrays are not the proper size, but can still access all */
        uint8_t                                 RAW[1];
        uint16_t                                RAW_uint16_t[1];
        int16_t                                 RAW_int16_t[1];
        uint32_t                                RAW_uint32_t[1];
        int32_t                                 RAW_int32_t[1];
        struct reply_READ_REPLY_map             READ_REPLY;
        struct reply_SIO_TEST_map               SIO_TEST;
        struct reply_SIO_INFO_map               SIO_INFO;
        struct reply_APPS_AVAILABLE_map         APPS_AVAILABLE;
        struct reply_DEVICE_INFO_map            DEVICE_INFO;
        struct reply_NVM_STATUS_map             NVM_STATUS;
        struct reply_BOOT_LOG_map               BOOT_LOG;
        struct reply_CRC_CHECK_map              CRC_CHECK;
        struct reply_APP_INFO_map               APP_INFO;
        struct reply_PLL_ACTIVE_REFCLOCK_map    PLL_ACTIVE_REFCLOCK;
        struct reply_INPUT_STATUS_map           INPUT_STATUS;
        struct reply_PLL_STATUS_map             PLL_STATUS;
        struct reply_INTERRUPT_STATUS_map       INTERRUPT_STATUS;
        struct reply_METADATA_map               METADATA;
        struct reply_REFERENCE_STATUS_map       REFERENCE_STATUS;
        struct reply_PHASE_READOUT_map          PHASE_READOUT;
        struct reply_INPUT_PERIOD_READOUT_map   INPUT_PERIOD_READOUT;
        struct reply_TEMPERATURE_READOUT_map    TEMPERATURE_READOUT;
        struct reply_VARIABLE_OFFSET_DCO_map    VARIABLE_OFFSET_DCO;
} __attribute__((packed, aligned(1)));

union cmd_reply_union_mode_BOOT {

/* Note that the RAW arrays are not the proper size, but can still access all */
        uint8_t                                 RAW[1];
        uint16_t                                RAW_uint16_t[1];
        int16_t                                 RAW_int16_t[1];
        uint32_t                                RAW_uint32_t[1];
        int32_t                                 RAW_int32_t[1];
        struct reply_READ_REPLY_map             READ_REPLY;
        struct reply_SIO_TEST_map               SIO_TEST;
        struct reply_SIO_INFO_map               SIO_INFO;
        struct reply_APPS_AVAILABLE_map         APPS_AVAILABLE;
        struct reply_DEVICE_INFO_map            DEVICE_INFO;
        struct reply_NVM_STATUS_map             NVM_STATUS;
        struct reply_BOOT_LOG_map               BOOT_LOG;
        struct reply_CRC_CHECK_map              CRC_CHECK;
        struct reply_APP_INFO_map               APP_INFO;
        struct reply_PLL_ACTIVE_REFCLOCK_map    PLL_ACTIVE_REFCLOCK;
        struct reply_INPUT_STATUS_map           INPUT_STATUS;
        struct reply_PLL_STATUS_map             PLL_STATUS;
        struct reply_INTERRUPT_STATUS_map       INTERRUPT_STATUS;
        struct reply_METADATA_map               METADATA;
        struct reply_REFERENCE_STATUS_map       REFERENCE_STATUS;
        struct reply_PHASE_READOUT_map          PHASE_READOUT;
        struct reply_INPUT_PERIOD_READOUT_map   INPUT_PERIOD_READOUT;
        struct reply_TEMPERATURE_READOUT_map    TEMPERATURE_READOUT;
        struct reply_VARIABLE_OFFSET_DCO_map    VARIABLE_OFFSET_DCO;
} __attribute__((packed, aligned(1)));


/* The union that stores the reply written back to the host registers */
union cmd_reply_union {

/* Note that the RAW arrays are not the proper size, but can still access all */
        uint8_t                                 RAW[1];
        uint16_t                                RAW_uint16_t[1];
        int16_t                                 RAW_int16_t[1];
        uint32_t                                RAW_uint32_t[1];
        int32_t                                 RAW_int32_t[1];
        struct reply_READ_REPLY_map             READ_REPLY;
        struct reply_SIO_TEST_map               SIO_TEST;
        struct reply_SIO_INFO_map               SIO_INFO;
        struct reply_APPS_AVAILABLE_map         APPS_AVAILABLE;
        struct reply_DEVICE_INFO_map            DEVICE_INFO;
        struct reply_NVM_STATUS_map             NVM_STATUS;
        struct reply_BOOT_LOG_map               BOOT_LOG;
        struct reply_CRC_CHECK_map              CRC_CHECK;
        struct reply_APP_INFO_map               APP_INFO;
        struct reply_PLL_ACTIVE_REFCLOCK_map    PLL_ACTIVE_REFCLOCK;
        struct reply_INPUT_STATUS_map           INPUT_STATUS;
        struct reply_PLL_STATUS_map             PLL_STATUS;
        struct reply_INTERRUPT_STATUS_map       INTERRUPT_STATUS;
        struct reply_METADATA_map               METADATA;
        struct reply_REFERENCE_STATUS_map       REFERENCE_STATUS;
        struct reply_PHASE_READOUT_map          PHASE_READOUT;
        struct reply_INPUT_PERIOD_READOUT_map   INPUT_PERIOD_READOUT;
        struct reply_TEMPERATURE_READOUT_map    TEMPERATURE_READOUT;
        struct reply_VARIABLE_OFFSET_DCO_map    VARIABLE_OFFSET_DCO;
} __attribute__((packed, aligned(1)));

/* This section contains command buffer declarations */
typedef struct reply_buf_READ_REPLY_struct {
        union {
                uint16_t  ERR;
                cmd_READ_REPLY_REPLY_ERR_map_t  sERR;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_buf_READ_REPLY_struct_t;

typedef struct arg_buf_SIO_TEST_struct {
        union {
                uint8_t  DATA_IN[255];
                cmd_SIO_TEST_ARG_DATA_IN_map_t  sDATA_IN[255];
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) arg_buf_SIO_TEST_struct_t;

typedef struct reply_buf_SIO_TEST_struct {
        union {
                uint8_t  CMD_ECHO;
                cmd_SIO_TEST_REPLY_CMD_ECHO_map_t  sCMD_ECHO;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  DATA_OUT[255];
                cmd_SIO_TEST_REPLY_DATA_OUT_map_t  sDATA_OUT[255];
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_buf_SIO_TEST_struct_t;

typedef struct reply_buf_SIO_INFO_struct {
        union {
                uint16_t  CBS;
                cmd_SIO_INFO_REPLY_CBS_map_t  sCBS;
        }__attribute__((packed, aligned(1)));
        union {
                uint16_t  RBS;
                cmd_SIO_INFO_REPLY_RBS_map_t  sRBS;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_buf_SIO_INFO_struct_t;

typedef struct reply_buf_APPS_AVAILABLE_struct {
        union {
                uint8_t  CNT;
                cmd_APPS_AVAILABLE_REPLY_CNT_map_t  sCNT;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  APP[8];
                cmd_APPS_AVAILABLE_REPLY_APP_map_t  sAPP[8];
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_buf_APPS_AVAILABLE_struct_t;

typedef struct arg_buf_APP_SELECT_struct {
        union {
                uint8_t  APP;
                cmd_APP_SELECT_ARG_APP_map_t  sAPP;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) arg_buf_APP_SELECT_struct_t;

typedef struct arg_buf_HOST_LOAD_struct {
        union {
                uint8_t  DATA[1024];
                cmd_HOST_LOAD_ARG_DATA_map_t  sDATA[1024];
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) arg_buf_HOST_LOAD_struct_t;

typedef struct reply_buf_DEVICE_INFO_struct {
        union {
                uint16_t  PN;
                cmd_DEVICE_INFO_REPLY_PN_map_t  sPN;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  DG;
                cmd_DEVICE_INFO_REPLY_DG_map_t  sDG;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  REV;
                cmd_DEVICE_INFO_REPLY_REV_map_t  sREV;
        }__attribute__((packed, aligned(1)));
        union {
                uint32_t  OPNID;
                cmd_DEVICE_INFO_REPLY_OPNID_map_t  sOPNID;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  OPNREV;
                cmd_DEVICE_INFO_REPLY_OPNREV_map_t  sOPNREV;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  TG;
                cmd_DEVICE_INFO_REPLY_TG_map_t  sTG;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PKG;
                cmd_DEVICE_INFO_REPLY_PKG_map_t  sPKG;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  MISC;
                cmd_DEVICE_INFO_REPLY_MISC_map_t  sMISC;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  ROM;
                cmd_DEVICE_INFO_REPLY_ROM_map_t  sROM;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  MROM;
                cmd_DEVICE_INFO_REPLY_MROM_map_t  sMROM;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  BROM;
                cmd_DEVICE_INFO_REPLY_BROM_map_t  sBROM;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  SFLAGS;
                cmd_DEVICE_INFO_REPLY_SFLAGS_map_t  sSFLAGS;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  M0;
                cmd_DEVICE_INFO_REPLY_M0_map_t  sM0;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  M1;
                cmd_DEVICE_INFO_REPLY_M1_map_t  sM1;
        }__attribute__((packed, aligned(1)));
        uint8_t  PAD0;
        union {
                uint32_t  SVN;
                cmd_DEVICE_INFO_REPLY_SVN_map_t  sSVN;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_buf_DEVICE_INFO_struct_t;

typedef struct reply_buf_NVM_STATUS_struct {
        union {
                uint8_t  ERROR2CNT;
                cmd_NVM_STATUS_REPLY_ERROR2CNT_map_t  sERROR2CNT;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  ERROR1CNT;
                cmd_NVM_STATUS_REPLY_ERROR1CNT_map_t  sERROR1CNT;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  MISC;
                cmd_NVM_STATUS_REPLY_MISC_map_t  sMISC;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  DESCRIPTORS;
                cmd_NVM_STATUS_REPLY_DESCRIPTORS_map_t  sDESCRIPTORS;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  INVALIDATED;
                cmd_NVM_STATUS_REPLY_INVALIDATED_map_t  sINVALIDATED;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_buf_NVM_STATUS_struct_t;

typedef struct reply_buf_BOOT_LOG_struct {
        union {
                uint8_t  ROVER;
                cmd_BOOT_LOG_REPLY_ROVER_map_t  sROVER;
        }__attribute__((packed, aligned(1)));
        union {
                uint16_t  COLL;
                cmd_BOOT_LOG_REPLY_COLL_map_t  sCOLL;
        }__attribute__((packed, aligned(1)));
        union {
                uint16_t  CNT;
                cmd_BOOT_LOG_REPLY_CNT_map_t  sCNT;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  DATA[255];
                cmd_BOOT_LOG_REPLY_DATA_map_t  sDATA[255];
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_buf_BOOT_LOG_struct_t;

typedef struct arg_buf_CRC_CHECK_struct {
        union {
                uint16_t  ADDR;
                cmd_CRC_CHECK_ARG_ADDR_map_t  sADDR;
        }__attribute__((packed, aligned(1)));
        union {
                uint16_t  NB;
                cmd_CRC_CHECK_ARG_NB_map_t  sNB;
        }__attribute__((packed, aligned(1)));
        union {
                uint32_t  CRC;
                cmd_CRC_CHECK_ARG_CRC_map_t  sCRC;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) arg_buf_CRC_CHECK_struct_t;

typedef struct reply_buf_CRC_CHECK_struct {
        union {
                uint8_t  RESULT;
                cmd_CRC_CHECK_REPLY_RESULT_map_t  sRESULT;
        }__attribute__((packed, aligned(1)));
        uint8_t  PAD0;
        uint8_t  PAD1;
        union {
                uint32_t  CALC;
                cmd_CRC_CHECK_REPLY_CALC_map_t  sCALC;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_buf_CRC_CHECK_struct_t;

typedef struct arg_buf_RESTART_struct {
        union {
                uint8_t  OPTIONS;
                cmd_RESTART_ARG_OPTIONS_map_t  sOPTIONS;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) arg_buf_RESTART_struct_t;

typedef struct reply_buf_APP_INFO_struct {
        union {
                uint8_t  A_MAJOR;
                cmd_APP_INFO_REPLY_A_MAJOR_map_t  sA_MAJOR;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  A_MINOR;
                cmd_APP_INFO_REPLY_A_MINOR_map_t  sA_MINOR;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  A_BRANCH;
                cmd_APP_INFO_REPLY_A_BRANCH_map_t  sA_BRANCH;
        }__attribute__((packed, aligned(1)));
        union {
                uint16_t  A_BUILD;
                cmd_APP_INFO_REPLY_A_BUILD_map_t  sA_BUILD;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  P_MAJOR;
                cmd_APP_INFO_REPLY_P_MAJOR_map_t  sP_MAJOR;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  P_MINOR;
                cmd_APP_INFO_REPLY_P_MINOR_map_t  sP_MINOR;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  P_BRANCH;
                cmd_APP_INFO_REPLY_P_BRANCH_map_t  sP_BRANCH;
        }__attribute__((packed, aligned(1)));
        union {
                uint16_t  P_BUILD;
                cmd_APP_INFO_REPLY_P_BUILD_map_t  sP_BUILD;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  DESIGN_ID[8];
                cmd_APP_INFO_REPLY_DESIGN_ID_map_t  sDESIGN_ID[8];
        }__attribute__((packed, aligned(1)));
        union {
                uint32_t  CBPRO;
                cmd_APP_INFO_REPLY_CBPRO_map_t  sCBPRO;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_buf_APP_INFO_struct_t;

typedef struct arg_buf_PLL_ACTIVE_REFCLOCK_struct {
        union {
                uint8_t  PLLX;
                cmd_PLL_ACTIVE_REFCLOCK_ARG_PLLX_map_t  sPLLX;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) arg_buf_PLL_ACTIVE_REFCLOCK_struct_t;

typedef struct reply_buf_PLL_ACTIVE_REFCLOCK_struct {
        union {
                uint8_t  REFCLOCK;
                cmd_PLL_ACTIVE_REFCLOCK_REPLY_REFCLOCK_map_t  sREFCLOCK;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_buf_PLL_ACTIVE_REFCLOCK_struct_t;

typedef struct arg_buf_INPUT_STATUS_struct {
        union {
                uint8_t  INPUT_SELECT;
                cmd_INPUT_STATUS_ARG_INPUT_SELECT_map_t  sINPUT_SELECT;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) arg_buf_INPUT_STATUS_struct_t;

typedef struct reply_buf_INPUT_STATUS_struct {
        union {
                uint8_t  INPUT_CLOCK_VALIDATION;
                cmd_INPUT_STATUS_REPLY_INPUT_CLOCK_VALIDATION_map_t  sINPUT_CLOCK_VALIDATION;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  LOSS_OF_SIGNAL;
                cmd_INPUT_STATUS_REPLY_LOSS_OF_SIGNAL_map_t  sLOSS_OF_SIGNAL;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  OUT_OF_FREQUENCY;
                cmd_INPUT_STATUS_REPLY_OUT_OF_FREQUENCY_map_t  sOUT_OF_FREQUENCY;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PHASE_MONITOR;
                cmd_INPUT_STATUS_REPLY_PHASE_MONITOR_map_t  sPHASE_MONITOR;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_buf_INPUT_STATUS_struct_t;

typedef struct arg_buf_PLL_STATUS_struct {
        union {
                uint8_t  PLL_SELECT;
                cmd_PLL_STATUS_ARG_PLL_SELECT_map_t  sPLL_SELECT;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) arg_buf_PLL_STATUS_struct_t;

typedef struct reply_buf_PLL_STATUS_struct {
        union {
                uint8_t  PLL_LOSS_OF_LOCK_MISC;
                cmd_PLL_STATUS_REPLY_PLL_LOSS_OF_LOCK_MISC_map_t  sPLL_LOSS_OF_LOCK_MISC;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PLL_STATUS;
                cmd_PLL_STATUS_REPLY_PLL_STATUS_map_t  sPLL_STATUS;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PLL_SLIP_COUNT;
                cmd_PLL_STATUS_REPLY_PLL_SLIP_COUNT_map_t  sPLL_SLIP_COUNT;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PLL_SLIP_COUNT_NET;
                cmd_PLL_STATUS_REPLY_PLL_SLIP_COUNT_NET_map_t  sPLL_SLIP_COUNT_NET;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PLL_HOLDOVER_VALID;
                cmd_PLL_STATUS_REPLY_PLL_HOLDOVER_VALID_map_t  sPLL_HOLDOVER_VALID;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PLL_HOLDOVER;
                cmd_PLL_STATUS_REPLY_PLL_HOLDOVER_map_t  sPLL_HOLDOVER;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PLL_SHORT_TERM_HOLDOVER;
                cmd_PLL_STATUS_REPLY_PLL_SHORT_TERM_HOLDOVER_map_t  sPLL_SHORT_TERM_HOLDOVER;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PLL_PHASE_BLEEDOUT;
                cmd_PLL_STATUS_REPLY_PLL_PHASE_BLEEDOUT_map_t  sPLL_PHASE_BLEEDOUT;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PLL_LOOP_FILTER_STATUS;
                cmd_PLL_STATUS_REPLY_PLL_LOOP_FILTER_STATUS_map_t  sPLL_LOOP_FILTER_STATUS;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PPS_PLL;
                cmd_PLL_STATUS_REPLY_PPS_PLL_map_t  sPPS_PLL;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_buf_PLL_STATUS_struct_t;

typedef struct reply_buf_INTERRUPT_STATUS_struct {
        union {
                uint8_t  INPUT_CLOCK_INVALID;
                cmd_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_INVALID_map_t  sINPUT_CLOCK_INVALID;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  INPUT_CLOCK_VALID;
                cmd_INTERRUPT_STATUS_REPLY_INPUT_CLOCK_VALID_map_t  sINPUT_CLOCK_VALID;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PLLR;
                cmd_INTERRUPT_STATUS_REPLY_PLLR_map_t  sPLLR;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PLLA;
                cmd_INTERRUPT_STATUS_REPLY_PLLA_map_t  sPLLA;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PLLB;
                cmd_INTERRUPT_STATUS_REPLY_PLLB_map_t  sPLLB;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  GENERAL;
                cmd_INTERRUPT_STATUS_REPLY_GENERAL_map_t  sGENERAL;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  SOFTWARE;
                cmd_INTERRUPT_STATUS_REPLY_SOFTWARE_map_t  sSOFTWARE;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PHASE_CONTROL;
                cmd_INTERRUPT_STATUS_REPLY_PHASE_CONTROL_map_t  sPHASE_CONTROL;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_buf_INTERRUPT_STATUS_struct_t;

typedef struct reply_buf_METADATA_struct {
        union {
                uint32_t  DCO_MR_STEP_SIZE;
                cmd_METADATA_REPLY_DCO_MR_STEP_SIZE_map_t  sDCO_MR_STEP_SIZE;
        }__attribute__((packed, aligned(1)));
        union {
                uint32_t  DCO_NA_STEP_SIZE;
                cmd_METADATA_REPLY_DCO_NA_STEP_SIZE_map_t  sDCO_NA_STEP_SIZE;
        }__attribute__((packed, aligned(1)));
        union {
                uint32_t  DCO_MA_STEP_SIZE;
                cmd_METADATA_REPLY_DCO_MA_STEP_SIZE_map_t  sDCO_MA_STEP_SIZE;
        }__attribute__((packed, aligned(1)));
        union {
                uint32_t  DCO_NB_STEP_SIZE;
                cmd_METADATA_REPLY_DCO_NB_STEP_SIZE_map_t  sDCO_NB_STEP_SIZE;
        }__attribute__((packed, aligned(1)));
        union {
                uint32_t  DCO_MB_STEP_SIZE;
                cmd_METADATA_REPLY_DCO_MB_STEP_SIZE_map_t  sDCO_MB_STEP_SIZE;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PLAN_OPTIONS;
                cmd_METADATA_REPLY_PLAN_OPTIONS_map_t  sPLAN_OPTIONS;
        }__attribute__((packed, aligned(1)));
        union {
                int32_t  PHASE_JAM_PPS_OUT_RANGE_HIGH;
                cmd_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_HIGH_map_t  sPHASE_JAM_PPS_OUT_RANGE_HIGH;
        }__attribute__((packed, aligned(1)));
        union {
                int32_t  PHASE_JAM_PPS_OUT_RANGE_LOW;
                cmd_METADATA_REPLY_PHASE_JAM_PPS_OUT_RANGE_LOW_map_t  sPHASE_JAM_PPS_OUT_RANGE_LOW;
        }__attribute__((packed, aligned(1)));
        union {
                uint64_t  PHASE_JAM_PPS_OUT_STEP_SIZE;
                cmd_METADATA_REPLY_PHASE_JAM_PPS_OUT_STEP_SIZE_map_t  sPHASE_JAM_PPS_OUT_STEP_SIZE;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_buf_METADATA_struct_t;

typedef struct reply_buf_REFERENCE_STATUS_struct {
        union {
                uint8_t  REFERENCE_CLOCK_VALIDATION;
                cmd_REFERENCE_STATUS_REPLY_REFERENCE_CLOCK_VALIDATION_map_t  sREFERENCE_CLOCK_VALIDATION;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  LOSS_OF_SIGNAL;
                cmd_REFERENCE_STATUS_REPLY_LOSS_OF_SIGNAL_map_t  sLOSS_OF_SIGNAL;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  OUT_OF_FREQUENCY;
                cmd_REFERENCE_STATUS_REPLY_OUT_OF_FREQUENCY_map_t  sOUT_OF_FREQUENCY;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PHASE_MONITOR;
                cmd_REFERENCE_STATUS_REPLY_PHASE_MONITOR_map_t  sPHASE_MONITOR;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_buf_REFERENCE_STATUS_struct_t;

typedef struct arg_buf_PHASE_READOUT_struct {
        union {
                uint8_t  PHASE_GROUP;
                cmd_PHASE_READOUT_ARG_PHASE_GROUP_map_t  sPHASE_GROUP;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) arg_buf_PHASE_READOUT_struct_t;

typedef struct reply_buf_PHASE_READOUT_struct {
        union {
                uint8_t  ERRORS;
                cmd_PHASE_READOUT_REPLY_ERRORS_map_t  sERRORS;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  PHASE_VALID;
                cmd_PHASE_READOUT_REPLY_PHASE_VALID_map_t  sPHASE_VALID;
        }__attribute__((packed, aligned(1)));
        union {
                int64_t  PHASE_READOUT;
                cmd_PHASE_READOUT_REPLY_PHASE_READOUT_map_t  sPHASE_READOUT;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_buf_PHASE_READOUT_struct_t;

typedef struct arg_buf_INPUT_PERIOD_READOUT_struct {
        union {
                uint8_t  REFERENCE_SELECT_A;
                cmd_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_A_map_t  sREFERENCE_SELECT_A;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  REFERENCE_SELECT_B;
                cmd_INPUT_PERIOD_READOUT_ARG_REFERENCE_SELECT_B_map_t  sREFERENCE_SELECT_B;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) arg_buf_INPUT_PERIOD_READOUT_struct_t;

typedef struct reply_buf_INPUT_PERIOD_READOUT_struct {
        union {
                uint64_t  PERIOD_READOUT_A;
                cmd_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_A_map_t  sPERIOD_READOUT_A;
        }__attribute__((packed, aligned(1)));
        union {
                uint64_t  PERIOD_READOUT_B;
                cmd_INPUT_PERIOD_READOUT_REPLY_PERIOD_READOUT_B_map_t  sPERIOD_READOUT_B;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_buf_INPUT_PERIOD_READOUT_struct_t;

typedef struct reply_buf_TEMPERATURE_READOUT_struct {
        union {
                int32_t  TEMPERATURE_READOUT;
                cmd_TEMPERATURE_READOUT_REPLY_TEMPERATURE_READOUT_map_t  sTEMPERATURE_READOUT;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_buf_TEMPERATURE_READOUT_struct_t;

typedef struct reply_buf_JESD_SYSREF_PULSER_struct {
        union {
                uint8_t  JESD_SYSREF_PULSER_STATUS;
                cmd_JESD_SYSREF_PULSER_REPLY_JESD_SYSREF_PULSER_STATUS_map_t  sJESD_SYSREF_PULSER_STATUS;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_buf_JESD_SYSREF_PULSER_struct_t;

typedef struct arg_buf_MANUAL_INPUT_CLOCK_SELECT_struct {
        union {
                uint8_t  PLLX;
                cmd_MANUAL_INPUT_CLOCK_SELECT_ARG_PLLX_map_t  sPLLX;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  CLOCK_SELECT;
                cmd_MANUAL_INPUT_CLOCK_SELECT_ARG_CLOCK_SELECT_map_t  sCLOCK_SELECT;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) arg_buf_MANUAL_INPUT_CLOCK_SELECT_struct_t;

typedef struct arg_buf_VARIABLE_OFFSET_DCO_struct {
        union {
                uint8_t  DIVIDER_SELECT;
                cmd_VARIABLE_OFFSET_DCO_ARG_DIVIDER_SELECT_map_t  sDIVIDER_SELECT;
        }__attribute__((packed, aligned(1)));
        union {
                int32_t  OFFSET;
                cmd_VARIABLE_OFFSET_DCO_ARG_OFFSET_map_t  sOFFSET;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) arg_buf_VARIABLE_OFFSET_DCO_struct_t;

typedef struct reply_buf_VARIABLE_OFFSET_DCO_struct {
        union {
                uint8_t  DCO_STATUS;
                cmd_VARIABLE_OFFSET_DCO_REPLY_DCO_STATUS_map_t  sDCO_STATUS;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_buf_VARIABLE_OFFSET_DCO_struct_t;

typedef struct arg_buf_FORCE_HOLDOVER_struct {
        union {
                uint8_t  PLLX;
                cmd_FORCE_HOLDOVER_ARG_PLLX_map_t  sPLLX;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  HOLDOVER;
                cmd_FORCE_HOLDOVER_ARG_HOLDOVER_map_t  sHOLDOVER;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) arg_buf_FORCE_HOLDOVER_struct_t;

typedef struct arg_buf_PHASE_JAM_PPS_OUT_struct {
        union {
                uint8_t  GROUP_SELECT;
                cmd_PHASE_JAM_PPS_OUT_ARG_GROUP_SELECT_map_t  sGROUP_SELECT;
        }__attribute__((packed, aligned(1)));
        union {
                int32_t  OFFSET;
                cmd_PHASE_JAM_PPS_OUT_ARG_OFFSET_map_t  sOFFSET;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) arg_buf_PHASE_JAM_PPS_OUT_struct_t;

typedef struct reply_buf_PHASE_JAM_PPS_OUT_struct {
        union {
                uint8_t  PHASE_JAM_STATUS;
                cmd_PHASE_JAM_PPS_OUT_REPLY_PHASE_JAM_STATUS_map_t  sPHASE_JAM_STATUS;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) reply_buf_PHASE_JAM_PPS_OUT_struct_t;

typedef struct arg_buf_OUTPUT_ENABLE_struct {
        union {
                uint32_t  OUTX;
                cmd_OUTPUT_ENABLE_ARG_OUTX_map_t  sOUTX;
        }__attribute__((packed, aligned(1)));
        union {
                uint8_t  ACTION;
                cmd_OUTPUT_ENABLE_ARG_ACTION_map_t  sACTION;
        }__attribute__((packed, aligned(1)));
} __attribute__((packed, aligned(1))) arg_buf_OUTPUT_ENABLE_struct_t;

/* This section is a place holder for all command isr handlers */
extern void cmd_isr_dispatch(void);
extern void cmd_isr_read_reply(void);
extern void cmd_isr_sio_test(void);
extern void cmd_isr_sio_info(void);
extern void cmd_isr_apps_available(void);
extern void cmd_isr_app_select(void);
extern void cmd_isr_host_load(void);
extern void cmd_isr_boot(void);
extern void cmd_isr_device_info(void);
extern void cmd_isr_nvm_read(void);
extern void cmd_isr_nvm_status(void);
extern void cmd_isr_boot_log(void);
extern void cmd_isr_crc_check(void);
extern void cmd_isr_restart(void);
extern void cmd_isr_app_info(void);
extern void cmd_isr_pll_active_refclock(void);
extern void cmd_isr_input_status(void);
extern void cmd_isr_pll_status(void);
extern void cmd_isr_interrupt_status(void);
extern void cmd_isr_metadata(void);
extern void cmd_isr_reference_status(void);
extern void cmd_isr_phase_readout(void);
extern void cmd_isr_input_period_readout(void);
extern void cmd_isr_temperature_readout(void);
extern void cmd_isr_finc_dco(void);
extern void cmd_isr_fdec_dco(void);
extern void cmd_isr_jesd_sysref_pulser(void);
extern void cmd_isr_manual_input_clock_select(void);
extern void cmd_isr_variable_offset_dco(void);
extern void cmd_isr_force_holdover(void);
extern void cmd_isr_phase_jam_pps_out(void);
extern void cmd_isr_pps_relock(void);
extern void cmd_isr_pps_force_bleedout(void);
extern void cmd_isr_output_enable(void);
extern void cmd_isr_clear_status_flags(void);

/* This section defines command id as command value */
#define cmd_ID_READ_REPLY                       0x00
#define cmd_ID_SIO_TEST                         0x01
#define cmd_ID_SIO_INFO                         0x02
#define cmd_ID_APPS_AVAILABLE                   0x03
#define cmd_ID_APP_SELECT                       0x04
#define cmd_ID_HOST_LOAD                        0x05
#define cmd_ID_BOOT                             0x07
#define cmd_ID_DEVICE_INFO                      0x08
#define cmd_ID_NVM_READ                         0x09
#define cmd_ID_NVM_STATUS                       0x0a
#define cmd_ID_BOOT_LOG                         0x0b
#define cmd_ID_CRC_CHECK                        0x0c
#define cmd_ID_RESTART                          0xf0
#define cmd_ID_APP_INFO                         0x10
#define cmd_ID_PLL_ACTIVE_REFCLOCK              0x11
#define cmd_ID_INPUT_STATUS                     0x12
#define cmd_ID_PLL_STATUS                       0x13
#define cmd_ID_INTERRUPT_STATUS                 0x14
#define cmd_ID_METADATA                         0x15
#define cmd_ID_REFERENCE_STATUS                 0x16
#define cmd_ID_PHASE_READOUT                    0x17
#define cmd_ID_INPUT_PERIOD_READOUT             0x18
#define cmd_ID_TEMPERATURE_READOUT              0x19
#define cmd_ID_FINC_DCO                         0x20
#define cmd_ID_FDEC_DCO                         0x21
#define cmd_ID_JESD_SYSREF_PULSER               0x22
#define cmd_ID_MANUAL_INPUT_CLOCK_SELECT        0x23
#define cmd_ID_VARIABLE_OFFSET_DCO              0x24
#define cmd_ID_FORCE_HOLDOVER                   0x25
#define cmd_ID_PHASE_JAM_PPS_OUT                0x26
#define cmd_ID_PPS_RELOCK                       0x27
#define cmd_ID_PPS_FORCE_BLEEDOUT               0x28
#define cmd_ID_OUTPUT_ENABLE                    0x29
#define cmd_ID_CLEAR_STATUS_FLAGS               0x2a


#endif  /* _SYNC_TIMING_ARUBA_CMD_MAP_H_ */
