-- Script to test FFT
General_Header_length=24; 
function byte2int(in_table, num)

    out_table = {};

    i = 1;
    for j=1, (num/4) do
        out_table[j] = (in_table[i+3]<<24) | (in_table[i+2]<<16) | (in_table[i+1]<<8) | in_table[i]
        i = i+4;
    end;

    return out_table;
end;

function bytes_to_ushort(b1, b2)
  len = b1 * 256 + b2
  return len
end

function ushort_to_bytes(ushort_value)
  buffer = {} 
  buffer[1] = ushort_value/256
  buffer[2] = ushort_value%256
  return buffer
end;

function bytes_to_int(b1, b2, b3, b4)
  if not b4 then error("need four bytes to convert to int",2) end
  local n = b1*16777216 + b2*65536 + b3*256 + b4
  n = (n > 2147483647) and (n - 4294967296) or n
  return n
end

function int2byte(in_table, num)

    out_table = {};

    j = 1;
    for i=1, (num) do
        out_table[j] = (in_table[i]>>24) & 0xFF
        j = j+1
        out_table[j] = (in_table[i]>>16) & 0xFF
        j = j +1
        out_table[j] = (in_table[i]>>8) & 0xFF
        j = j+1
        out_table[j] = (in_table[i]) & 0xFF
        j = j+1;
    end;

    return out_table;
end;

function is_fft(header)
    fft = bytes_to_ushort(header[14], header[13])
    if (fft == 2) then
      return 1
    else
      return 0
    end;
end;

function get_nfft_from_header(ffi_header)
    return bytes_to_ushort(fft_header[6], fft_header[5])
end;

function get_nfft(size_nFFT)
    nfft = -1
    if (size_nFFT == 0x1000) then
    	nfft = 0xC
    elseif (size_nFFT == 0x800) then
	nfft = 0xb
    elseif (size_nFFT == 0x400) then
        nfft = 0xa
    elseif (size_nFFT == 0x200) then
        nfft = 0x9
    else
	print( "Invalid nFFT size: "..size_nFFT.."");
    return nfft
    end;
end;
    	
function prepare_general_header()
    header = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    return header
end;

function set_dir_to_matlab(header)
    header[11] = 1
    header[12] = 0
end;

function set_vector_length(header, length)
    header[1] = (length >> 24) &0xFF
    header[2] = (length >> 16) &0xFF
    header[3] = (length >> 8) &0xFF
    header[4] = length &0xFF
end;

function read_hw_data()
    res, val = regget(32, "fctrl.size");
    if (res < 0) then
        print ("Read fifo size error, res:"..res);
        return -1, 0;
    else
        print ("The fifo size is "..(val*4).." bytes");
    end

    --r, a = readdata(32, 0xa0010000, val);
    r, a = readdata(32, "fifo", val);
    return r, a
end;

function get_slot_number(gen_header)
    return bytes_to_ushort(gen_header[6], gen_header[5])
end;

function get_layer_number(gen_header)
    return bytes_to_ushort(gen_header[10], gen_header[9])
end;

function get_symbol_number(gen_header)
    return bytes_to_ushort(gen_header[8], gen_header[7])
end;
    
function get_num_SCS(fft_header)
    return bytes_to_ushort(fft_header[10], fft_header[9])
end;

function get_CpLen(fft_header)
    return bytes_to_ushort(fft_header[14], fft_header[13])
end;

function get_fft_start(fft_header)
    return bytes_to_ushort(fft_header[16], fft_header[15])
end;

function init_fft_hw(gen_header, fft_header)
    regset(32, "fft.ctrl", 0);
    regset(32, "fft.status", 0);
    uint32 = get_slot_number(gen_header)
    regset(32, "fft.seq_num_slot", uint32);
    uint32 = get_symbol_number(gen_header)
    regset(32, "fft.seq_num_symbol", uint32);
    uint32 = get_layer_number(gen_header);
    regset(32, "fft.seq_num_layer", uint32);
    regset(32, "fft.fft_error", 0);
    regset(32, "fft.fft_error_status", 0);
    nfft_num = get_nfft_from_header(fft_header);
    nfft = get_nfft(nfft_num);
    regset(32, "fft.nfft_cfg", nfft);
    uint32 = get_num_SCS(fft_header);
    regset(32, "fft.amount_of_samples", nfft);
    MaxnSCS = get_max_num_SCS(fft_header);
    uint32 = (nfft_num - MaxnSCS) / 2;
    regset(32, "fft.pad_before_samples", uint32);
    regset(32, "fft.pad_after_samples", uint32);
    CpLen = get_CpLen(fft_header);
    regset(32, "fft.fft_cp_len_all_cfg0", CpLen);
    regset(32, "fft.fft_cp_len_all_cfg1", CpLen);
    regset(32, "fft.fft_seq_all_sel_cfg", 0);
    regset(32, "fft.ftt_transform_configuration", nfft + 0x100);
    regset(32, "fft.fft_scale", 0);
    regset(32, "fft.enable_half_transform_shift", 1);
    fft_start = get_fft_start(fft_header);
    regset(32, "fft.start_index_profile_0", fft_start);
    regset(32, "fft.start_index_profile_1", fft_start);
    regset(32, "fft.start_index_profile_select", 0);
    regset(32, "fft.sample_point_profile_0", fft_start);
    regset(32, "fft.sample_point_profile_1", fft_start);
    regset(32, "fft.sample_point_profile_select", 0);
end;

function main()
    h, l = get_cliver();

    print("Lua CLI version:"..string.format("%d.%02d",h, l));

    local server = socket();
    local res = bind(server, "0.0.0.0", 10000);
    while 1 do
::loop::    local client = accept(server);
-- Receive General header of General_Header_length bytes
      res, header = recv(client, General_Header_length);

      if (res > 0) then
        print(header[1], header[2], header[3], header[4])
        if (is_fft(header) == 1) then
	  print("Received General Header with FFT");
        else
	  print("Received unknown header")
	  goto loop
        end;
-- Calculate the whole vector size
        total_size = bytes_to_int(header[4], header[3], header[2], header[1])
        print("total vector size to receive: "..total_size.." bytes")
-- Receive length of next header (FFT header)
        res, fft_len = recv(client, 4);
        if (res > 0) then
          print("Received fft header length:")
          print(fft_len[1], fft_len[2], fft_len[3], fft_len[4])
        else
          print("Failed to receive fft header length, exiting")
          break;
        end;
-- Calculate IFFT header length
        fft_header_length = bytes_to_int(fft_len[4], fft_len[3], fft_len[2], fft_len[1])
        res, fft_header = recv(client, fft_header_length -4);
        if (res > 0) then
	  print("Received FFT header")
        else
          print("Failed to receive fft header, exiting")
          break;
        end;
        --init_fft_hw(header, fft_header);
        data_size = total_size - General_Header_length - fft_header_length;
        print("Data samples to receive: "..data_size.." bytes")
        res, data = recv(client, data_size);
        if (res > 0) then
          print("Received data:")
        else
          print("Failed to receive data, exiting")
          break;
        end;
        --write_hw_data(data)
        --send data back
        --data_size, read_data = read_hw_data()
        output_header = header;
	set_dir_to_matlab(output_header)
-- Calculate output vector length
        out_total_len = General_Header_length + data_size
        set_vector_length(output_header, out_total_len)
        print(output_header[1], output_header[2], output_header[3], output_header[4])
        res = send(client, output_header);
        if (res < 0) then
          print("Error to send the data_size, res:"..res);
          break;
        end;
        res = send(client, data);
        if (res < 0) then
          print("Error to send the data, res:"..res);
          break;
        end;      	  
      else
        print("Error to receive the data from socket, res:"..res);
        break;
      end;
      close(client);
    end;
    close(client);
    close(server);
end;
