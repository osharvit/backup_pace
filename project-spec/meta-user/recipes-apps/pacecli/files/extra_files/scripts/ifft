-- Script to test IFFT 
General_Header_length=24;
-- listening port
PORT=7777
 
function byte2int(in_table, num)

    out_table = {};

    i = 1;
    for j=1, (num/4) do
        out_table[j] = (in_table[i+3]<<24) | (in_table[i+2]<<16) | (in_table[i+1]<<8) | in_table[i]
        i = i+4;
    end;

    return out_table;
end;

function bytes_to_ushort(b1, b2)
  len = b1 * 256 + b2
  return len
end

function ushort_to_bytes(ushort_value)
  buffer = {} 
  buffer[1] = ushort_value/256
  buffer[2] = ushort_value%256
  return buffer
end;

function bytes_to_int(b1, b2, b3, b4)
  if not b4 then error("need four bytes to convert to int",2) end
  local n = b1*16777216 + b2*65536 + b3*256 + b4
  n = (n > 2147483647) and (n - 4294967296) or n
  return n
end

function int2byte(in_table, num)

    out_table = {};

    j = 1;
    for i=1, (num) do
        out_table[j] = (in_table[i]>>24) & 0xFF
        j = j+1
        out_table[j] = (in_table[i]>>16) & 0xFF
        j = j +1
        out_table[j] = (in_table[i]>>8) & 0xFF
        j = j+1
        out_table[j] = (in_table[i]) & 0xFF
        j = j+1;
    end;

    return out_table;
end;

function is_ifft(header)
    ifft = bytes_to_ushort(header[14], header[13])
    if (ifft == 1) then
      return 1
    else
      return 0
    end;
end;

function get_nfft_from_header(ifft_header)
    print("nfft: ifft_header[2]= "..ifft_header[2].."; ifft_header[1] = "..ifft_header[1]);
    return bytes_to_ushort(ifft_header[2], ifft_header[1])
end;

function get_nfft(size_nFFT)
    print("size_nFFT= "..size_nFFT);
    hw_nfft = -1;
    if (size_nFFT == 0x1000) then
    	hw_nfft = 0xC
    elseif (size_nFFT == 0x800) then
	hw_nfft = 0xb
    elseif (size_nFFT == 0x400) then
        hw_nfft = 0xa
    elseif (size_nFFT == 0x200) then
        hw_nfft = 0x9
    else
	print( "Invalid nFFT size: "..size_nFFT.."");
    end;
    print("hw_nfft= ", hw_nfft);
    return hw_nfft
end;
    	

function set_dir_to_matlab(header)
    header[11] = 1
    header[12] = 0
end;

function setReg0(header, scale)
   header[19] = 0xFF & scale;
   header[20] = 0xFF & (scale >> 8);
end;

function set_vector_length(header, length)
    header[4] = (length >> 24) &0xFF
    header[3] = (length >> 16) &0xFF
    header[2] = (length >> 8) &0xFF
    header[1] = length &0xFF
end;

function write_hw_data(data, data_len)
    print ("Init AXIS-fifo for IFFT data");
    print("Writing "..data_len.." bytes into FIFO")
    err = writedata(32, "fifo", data);
    return err
end;

function read_hw_data()
    outval = {};
    u32_len = 12000;
    print("Reading "..u32_len.." 32-bit samples from FIFO")
    err, outval = readdata(32, "fifo", u32_len);
    return err, outval;
end;

function get_slot_number(gen_header)
    return bytes_to_ushort(gen_header[6], gen_header[5])
end;

function get_layer_number(gen_header)
    return bytes_to_ushort(gen_header[10], gen_header[9])
end;

function get_symbol_number(gen_header)
    return bytes_to_ushort(gen_header[8], gen_header[7])
end;
    
function get_num_SCS(ifft_header)
    return bytes_to_ushort(ifft_header[6], ifft_header[5])
end;

function get_CpLen(ifft_header)
    return bytes_to_ushort(ifft_header[10], ifft_header[9])
end;

function get_max_num_SCS(ifft_header)
   return bytes_to_ushort(ifft_header[8], ifft_header[7])
end;

function get_start_re(ifft_header)
   return bytes_to_ushort(ifft_header[4], ifft_header[3])
end;

function get_Win_Size(ifft_header)
   print("ifft_header[12]= "..ifft_header[12].." , ifft_header[11]= "..ifft_header[11]);
   return bytes_to_ushort(ifft_header[12], ifft_header[11])
end;

function prepare_coefficients(ifft_header, win_size)
    byte_coeff = {};
    num_coeffs = 40;
    print("Number of zero coefficients: "..(10 - win_size));
    for i=1, 40 do
      byte_coeff[i] = 0
    end
    k = 1;
    for i = 0, (win_size -1), 1
    do
        byte_coeff[k +1] = ifft_header[14 + (2*i)];
        byte_coeff[k] = ifft_header[13+ (2*i)];
        byte_coeff[k +3] = ifft_header[14 +(2*i)];
        byte_coeff[k +2] = ifft_header[13+ (2*i)];
        print("coeff["..k.."]= "..byte_coeff[k], byte_coeff[k +1], byte_coeff[k +2], byte_coeff[k +3])
	k = k +4;
    end
    return byte_coeff;
end;

function init_ifft_hw(gen_header, ifft_header)
    regset(32, "ifft.ctrl", 0);
    regset(32, "ifft.status", 0);
    slot_number = get_slot_number(gen_header);
    print("Slot number:      "..slot_number);
    regset(32, "ifft.seq_num_slot", slot_number);
    symb_number = get_symbol_number(gen_header)
    print("Symbol number:    "..symb_number);
    regset(32, "ifft.seq_num_symbol", symb_number);
    layer_number = get_layer_number(gen_header);
    print("Layer number:     "..symb_number);
    regset(32, "ifft.seq_num_layer", layer_number);
    regset(32, "ifft.ifft_error", 0);
    regset(32, "ifft.ifft_error_status", 0);
    nfft_num = get_nfft_from_header(ifft_header);
    print("nfft_num = "..nfft_num);
    nfft = get_nfft(nfft_num);

    print("nfft = "..nfft);
    print("NFFT:    "..nfft_num.."("..nfft..")");
    regset(32, "ifft.nfft_cfg", nfft);
    num_scs = get_num_SCS(ifft_header);
    print("Num of SCS:      "..num_scs);
    regset(32, "ifft.amount_of_samples", num_scs);
    MaxnSCS = get_max_num_SCS(ifft_header);
    start_re = get_start_re(ifft_header);
    uint32 = math.floor(((nfft_num - MaxnSCS) / 2) + start_re);
    print("MaxnSCS: "..MaxnSCS.."; start_re: "..start_re.."; to write: "..uint32);
    if ((uint32 ~= 0) and (uint32 < nfft_num/2)) then
      regset(32, "ifft.pad_before_samples", uint32);
    else
      print("is Not (nFFT "..nfft_num.." -MaxnSCS "..MaxnSCS.."Â )/2+start_re "..start_re.." must be bigger than 0 and less than (nFFT/2)")
    end;
    after_samples = nfft_num - uint32 - num_scs;
    print("After Samples:   "..after_samples);

    regset(32, "ifft.pad_after_samples", after_samples);
    CpLen = get_CpLen(ifft_header);
    print("CpLen:           "..CpLen);
    regset(32, "ifft.ifft_cp_len_all_cfg0", CpLen);
    regset(32, "ifft.ifft_cp_len_all_cfg1", CpLen);
    regset(32, "ifft.ifft_seq_all_sel_cfg", 0);
    win_size = get_Win_Size(ifft_header);
    print("Coeff window size: "..win_size);
    coeffs = prepare_coefficients(ifft_header, win_size);
    err = writedata(32, "ifft.ifft_windowing_mult_data_0_0" , coeffs);
    if (err < 0) then
      print("Error wrote wind coeff(0): "..err);
    end 
    err = writedata(32, "ifft.ifft_windowing_mult_data_1_0" , coeffs); 
    if (err < 0) then
      print("Error wrote wind coeff(1): "..err);
    end 
   
    regset(32, "ifft.ifft_windowing_first_index_0", win_size); 
    regset(32, "ifft.ifft_windowing_first_index_1", win_size); 
    regset(32, "ifft.ifft_windowing_last_index_0", nfft_num + CpLen - win_size); 
    regset(32, "ifft.ifft_windowing_last_index_1",  nfft_num + CpLen - win_size);
    regset(32, "ifft.ifft_total_len_all_cfg0", nfft_num + CpLen); 
    regset(32, "ifft.ifft_total_len_all_cfg1",  nfft_num + CpLen);
    regset(32, "ifft.ifft_total_len_all_sel_cfg", 0);
    regset(32, "ifft.ifft_ip_configuration_transform_length", nfft);
    tmp2 = CpLen;
    tmp3 = (12 - nfft);
    tmp2 = tmp2 << tmp3;
    regset(32, "ifft.ifft_ip_configuration_cp_length", tmp2);
    regset(32, "ifft.ifft_ip_configuration_mode", 0);
    regset(32, "ifft.ifft_ip_configuration_scale", 0x0AAA);

    regset(32, "ifft.ifft_ip_configuration_scale2", 1);
end;

function sleep(n)
  os.execute("sleep " .. tonumber(n))
end

function start_fifo()
-- Set fifo start
    regset(32, "ifft.ctrl", 0);
    sleep(1)
    regset(32, "ifft.ctrl", 1);
end;

function receive(client, size)
  received_buffer = {}
  n = 0
  idle = 0
  bytes = size;
  received = 0;
  while received < size do
    res, data = recv(client, bytes);
    if (res < 0) then
      print("Error received "..res);
      received = res;
      break;
    end
    if (res > 0) then
      print("Received "..res.." bytes")
      for _,v in ipairs(data) do n=n+1; received_buffer[n]=v end
      received = received + res;
      bytes = bytes - res;
    end
    if (res == 0) then
      --print("Received 0 "..idle);
      idle = idle +1
      if (idle > 2) then
        break;
      end
      cli( "sleep 600");
    end
  end;
  return received, received_buffer
end;

function main()
    h, l = get_cliver();

    print("Lua CLI version:"..string.format("%d.%02d",h, l));
    print("=========     IFFT     ==========")
    local server = socket();
    local res = bind(server, "0.0.0.0", PORT);
::accept::    local client = accept(server);
    while 1 do
::loop:: 
-- Receive General header of General_Header_length bytes
      res, header = receive(client, General_Header_length);

      if (res > 0) then
        print(header[1], header[2], header[3], header[4])
        if (is_ifft(header) == 1) then
	  print("Received General Header with IFFT");
        else
	  print("Received unknown header")
	  goto loop
        end;
-- Calculate the whole vector size
        total_size = bytes_to_int(header[4], header[3], header[2], header[1])
        print("total vector size to receive: "..total_size.." bytes")
-- Receive length of next header (IFFT header)
        res, ifft_len = receive(client, 4);
        if (res > 0) then
          print("Received ifft header length:")
          print(ifft_len[1], ifft_len[2], ifft_len[3], ifft_len[4])
        else
          print("Failed to receive ifft header length, exiting")
          break;
        end;
-- Calculate IFFT header length
        ifft_header_length = bytes_to_int(ifft_len[4], ifft_len[3], ifft_len[2], ifft_len[1])
        res, ifft_header = receive(client, ifft_header_length -4);
        if (res > 0) then
	  print("Received IFFT header of "..ifft_header_length.." bytes length");
        else
          print("Failed to receive ifft header, exiting")
          break;
        end;
--Init all registers of IFFT
        init_ifft_hw(header, ifft_header);

        data_size = total_size - General_Header_length - ifft_header_length;
        print("Data samples to receive: "..data_size.." bytes")
        res, data = receive(client, data_size);
        if (res > 0) then
          print("Received data: "..res.." bytes")
        else
          print("Failed to receive data, exiting")
          break;
        end;
-- Set fifo start
	start_fifo()

        print("Write now !samples to fifo ");
-- Write data samples to axis-fifo
        res  = write_hw_data(data, res);
        if (res < 0) then
          print("Error writing samples to fifo: "..res);
        end;
        sleep(1)
-- Read samples from axis-fifo
        data_size, hw_data = read_hw_data()
        if (data_size < 0) then
          print("Error reading samples from fifo: "..data_size);
          data_size = 0;
        else
	  print("Read "..data_size.." bytes from FIFO")
        end;
        
        output_header = header;
	set_dir_to_matlab(output_header)
-- Calculate output vector length
        out_total_len = General_Header_length + data_size
        set_vector_length(output_header, out_total_len)
        res, val = regget(32, "ifft.iscale");
        if (res < 0) then
          print ("Read ifft scale error, res:"..res);
        else
          print ("The ifft scale is "..val);
        end
        setReg0(output_header, val); 
       
        print(output_header[1], output_header[2], output_header[3], output_header[4])
--send data back
        res = send(client, output_header);
        if (res < 0) then
          print("Error to send the data_size, res:"..res);
          break;
        end;
        if (data_size > 0) then
          res = send(client, hw_data);
          if (res < 0) then
            print("Error to send the data, res:"..res);
            break;
          end;
	end;
      else
        print("Error to receive the data from socket, res:"..res);
        break;
      end;
    end;
    close(client);
    if (res == 0) then
      print("Listening socket has been closed; going to accept new connection...")
      goto accept
    end
    close(server);
end;
